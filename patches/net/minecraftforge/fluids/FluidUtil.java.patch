--- ../src-base/minecraft/net/minecraftforge/fluids/FluidUtil.java
+++ ../src-work/minecraft/net/minecraftforge/fluids/FluidUtil.java
@@ -19,17 +19,14 @@
 
 package net.minecraftforge.fluids;
 
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-
 import com.google.common.base.Preconditions;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockLiquid;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.player.EntityPlayer;
-import net.minecraft.item.ItemBucket;
 import net.minecraft.init.Items;
+import net.minecraft.item.ItemBucket;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.tileentity.TileEntity;
@@ -50,10 +47,11 @@
 import net.minecraftforge.items.IItemHandler;
 import net.minecraftforge.items.ItemHandlerHelper;
 
-public class FluidUtil
-{
-    private FluidUtil()
-    {
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+
+public class FluidUtil {
+    private FluidUtil() {
     }
 
     /**
@@ -69,8 +67,7 @@
      * @param side   The side of the block to interact with. May be null.
      * @return true if the interaction succeeded and updated the item held by the player, false otherwise.
      */
-    public static boolean interactWithFluidHandler(@Nonnull EntityPlayer player, @Nonnull EnumHand hand, @Nonnull World world, @Nonnull BlockPos pos, @Nullable EnumFacing side)
-    {
+    public static boolean interactWithFluidHandler(@Nonnull EntityPlayer player, @Nonnull EnumHand hand, @Nonnull World world, @Nonnull BlockPos pos, @Nullable EnumFacing side) {
         Preconditions.checkNotNull(world);
         Preconditions.checkNotNull(pos);
 
@@ -89,26 +86,21 @@
      * @param handler The fluid handler.
      * @return true if the interaction succeeded and updated the item held by the player, false otherwise.
      */
-    public static boolean interactWithFluidHandler(@Nonnull EntityPlayer player, @Nonnull EnumHand hand, @Nonnull IFluidHandler handler)
-    {
+    public static boolean interactWithFluidHandler(@Nonnull EntityPlayer player, @Nonnull EnumHand hand, @Nonnull IFluidHandler handler) {
         Preconditions.checkNotNull(player);
         Preconditions.checkNotNull(hand);
         Preconditions.checkNotNull(handler);
 
         ItemStack heldItem = player.getHeldItem(hand);
-        if (!heldItem.isEmpty())
-        {
+        if (!heldItem.isEmpty()) {
             IItemHandler playerInventory = player.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY, null);
-            if (playerInventory != null)
-            {
+            if (playerInventory != null) {
                 FluidActionResult fluidActionResult = tryFillContainerAndStow(heldItem, handler, playerInventory, Integer.MAX_VALUE, player, true);
-                if (!fluidActionResult.isSuccess())
-                {
+                if (!fluidActionResult.isSuccess()) {
                     fluidActionResult = tryEmptyContainerAndStow(heldItem, handler, playerInventory, Integer.MAX_VALUE, player, true);
                 }
 
-                if (fluidActionResult.isSuccess())
-                {
+                if (fluidActionResult.isSuccess()) {
                     player.setHeldItem(hand, fluidActionResult.getResult());
                     return true;
                 }
@@ -130,26 +122,19 @@
      * @return a {@link FluidActionResult} holding the filled container if successful.
      */
     @Nonnull
-    public static FluidActionResult tryFillContainer(@Nonnull ItemStack container, IFluidHandler fluidSource, int maxAmount, @Nullable EntityPlayer player, boolean doFill)
-    {
+    public static FluidActionResult tryFillContainer(@Nonnull ItemStack container, IFluidHandler fluidSource, int maxAmount, @Nullable EntityPlayer player, boolean doFill) {
         ItemStack containerCopy = ItemHandlerHelper.copyStackWithSize(container, 1); // do not modify the input
         IFluidHandlerItem containerFluidHandler = getFluidHandler(containerCopy);
-        if (containerFluidHandler != null)
-        {
+        if (containerFluidHandler != null) {
             FluidStack simulatedTransfer = tryFluidTransfer(containerFluidHandler, fluidSource, maxAmount, false);
-            if (simulatedTransfer != null)
-            {
-                if (doFill)
-                {
+            if (simulatedTransfer != null) {
+                if (doFill) {
                     tryFluidTransfer(containerFluidHandler, fluidSource, maxAmount, true);
-                    if (player != null)
-                    {
+                    if (player != null) {
                         SoundEvent soundevent = simulatedTransfer.getFluid().getFillSound(simulatedTransfer);
                         player.world.playSound(null, player.posX, player.posY + 0.5, player.posZ, soundevent, SoundCategory.BLOCKS, 1.0F, 1.0F);
                     }
-                }
-                else
-                {
+                } else {
                     containerFluidHandler.fill(simulatedTransfer, true);
                 }
 
@@ -174,31 +159,23 @@
      *         NOTE If the container is consumable, the empty container will be null on success.
      */
     @Nonnull
-    public static FluidActionResult tryEmptyContainer(@Nonnull ItemStack container, IFluidHandler fluidDestination, int maxAmount, @Nullable EntityPlayer player, boolean doDrain)
-    {
+    public static FluidActionResult tryEmptyContainer(@Nonnull ItemStack container, IFluidHandler fluidDestination, int maxAmount, @Nullable EntityPlayer player, boolean doDrain) {
         ItemStack containerCopy = ItemHandlerHelper.copyStackWithSize(container, 1); // do not modify the input
         IFluidHandlerItem containerFluidHandler = getFluidHandler(containerCopy);
-        if (containerFluidHandler != null)
-        {
-            if (doDrain)
-            {
+        if (containerFluidHandler != null) {
+            if (doDrain) {
                 FluidStack transfer = tryFluidTransfer(fluidDestination, containerFluidHandler, maxAmount, true);
-                if (transfer != null)
-                {
-                    if (player != null)
-                    {
+                if (transfer != null) {
+                    if (player != null) {
                         SoundEvent soundevent = transfer.getFluid().getEmptySound(transfer);
                         player.world.playSound(null, player.posX, player.posY + 0.5, player.posZ, soundevent, SoundCategory.BLOCKS, 1.0F, 1.0F);
                     }
                     ItemStack resultContainer = containerFluidHandler.getContainer();
                     return new FluidActionResult(resultContainer);
                 }
-            }
-            else
-            {
+            } else {
                 FluidStack simulatedTransfer = tryFluidTransfer(fluidDestination, containerFluidHandler, maxAmount, false);
-                if (simulatedTransfer != null)
-                {
+                if (simulatedTransfer != null) {
                     containerFluidHandler.drain(simulatedTransfer, true);
                     ItemStack resultContainer = containerFluidHandler.getContainer();
                     return new FluidActionResult(resultContainer);
@@ -227,8 +204,7 @@
      */
     @Deprecated // TODO remove in 1.13
     @Nonnull
-    public static FluidActionResult tryFillContainerAndStow(@Nonnull ItemStack container, IFluidHandler fluidSource, IItemHandler inventory, int maxAmount, @Nullable EntityPlayer player)
-    {
+    public static FluidActionResult tryFillContainerAndStow(@Nonnull ItemStack container, IFluidHandler fluidSource, IItemHandler inventory, int maxAmount, @Nullable EntityPlayer player) {
         return tryFillContainerAndStow(container, fluidSource, inventory, maxAmount, player, true);
     }
 
@@ -250,44 +226,33 @@
      * @return a {@link FluidActionResult} holding the result and the resulting container. The resulting container is empty on failure.
      */
     @Nonnull
-    public static FluidActionResult tryFillContainerAndStow(@Nonnull ItemStack container, IFluidHandler fluidSource, IItemHandler inventory, int maxAmount, @Nullable EntityPlayer player, boolean doFill)
-    {
-        if (container.isEmpty())
-        {
+    public static FluidActionResult tryFillContainerAndStow(@Nonnull ItemStack container, IFluidHandler fluidSource, IItemHandler inventory, int maxAmount, @Nullable EntityPlayer player, boolean doFill) {
+        if (container.isEmpty()) {
             return FluidActionResult.FAILURE;
         }
 
-        if (player != null && player.capabilities.isCreativeMode)
-        {
+        if (player != null && player.capabilities.isCreativeMode) {
             FluidActionResult filledReal = tryFillContainer(container, fluidSource, maxAmount, player, doFill);
-            if (filledReal.isSuccess())
-            {
+            if (filledReal.isSuccess()) {
                 return new FluidActionResult(container); // creative mode: item does not change
             }
-        }
-        else if (container.getCount() == 1) // don't need to stow anything, just fill the container stack
+        } else if (container.getCount() == 1) // don't need to stow anything, just fill the container stack
         {
             FluidActionResult filledReal = tryFillContainer(container, fluidSource, maxAmount, player, doFill);
-            if (filledReal.isSuccess())
-            {
+            if (filledReal.isSuccess()) {
                 return filledReal;
             }
-        }
-        else
-        {
+        } else {
             FluidActionResult filledSimulated = tryFillContainer(container, fluidSource, maxAmount, player, false);
-            if (filledSimulated.isSuccess())
-            {
+            if (filledSimulated.isSuccess()) {
                 // check if we can give the itemStack to the inventory
                 ItemStack remainder = ItemHandlerHelper.insertItemStacked(inventory, filledSimulated.getResult(), true);
-                if (remainder.isEmpty() || player != null)
-                {
+                if (remainder.isEmpty() || player != null) {
                     FluidActionResult filledReal = tryFillContainer(container, fluidSource, maxAmount, player, doFill);
                     remainder = ItemHandlerHelper.insertItemStacked(inventory, filledReal.getResult(), !doFill);
 
                     // give it to the player or drop it at their feet
-                    if (!remainder.isEmpty() && player != null && doFill)
-                    {
+                    if (!remainder.isEmpty() && player != null && doFill) {
                         ItemHandlerHelper.giveItemToPlayer(player, remainder);
                     }
 
@@ -319,8 +284,7 @@
      */
     @Deprecated // TODO: remove in 1.13
     @Nonnull
-    public static FluidActionResult tryEmptyContainerAndStow(@Nonnull ItemStack container, IFluidHandler fluidDestination, IItemHandler inventory, int maxAmount, @Nullable EntityPlayer player)
-    {
+    public static FluidActionResult tryEmptyContainerAndStow(@Nonnull ItemStack container, IFluidHandler fluidDestination, IItemHandler inventory, int maxAmount, @Nullable EntityPlayer player) {
         return tryEmptyContainerAndStow(container, fluidDestination, inventory, maxAmount, player, true);
     }
 
@@ -341,44 +305,33 @@
      * @return a {@link FluidActionResult} holding the result and the resulting container. The resulting container is empty on failure.
      */
     @Nonnull
-    public static FluidActionResult tryEmptyContainerAndStow(@Nonnull ItemStack container, IFluidHandler fluidDestination, IItemHandler inventory, int maxAmount, @Nullable EntityPlayer player, boolean doDrain)
-    {
-        if (container.isEmpty())
-        {
+    public static FluidActionResult tryEmptyContainerAndStow(@Nonnull ItemStack container, IFluidHandler fluidDestination, IItemHandler inventory, int maxAmount, @Nullable EntityPlayer player, boolean doDrain) {
+        if (container.isEmpty()) {
             return FluidActionResult.FAILURE;
         }
 
-        if (player != null && player.capabilities.isCreativeMode)
-        {
+        if (player != null && player.capabilities.isCreativeMode) {
             FluidActionResult emptiedReal = tryEmptyContainer(container, fluidDestination, maxAmount, player, doDrain);
-            if (emptiedReal.isSuccess())
-            {
+            if (emptiedReal.isSuccess()) {
                 return new FluidActionResult(container); // creative mode: item does not change
             }
-        }
-        else if (container.getCount() == 1) // don't need to stow anything, just fill and edit the container stack
+        } else if (container.getCount() == 1) // don't need to stow anything, just fill and edit the container stack
         {
             FluidActionResult emptiedReal = tryEmptyContainer(container, fluidDestination, maxAmount, player, doDrain);
-            if (emptiedReal.isSuccess())
-            {
+            if (emptiedReal.isSuccess()) {
                 return emptiedReal;
             }
-        }
-        else
-        {
+        } else {
             FluidActionResult emptiedSimulated = tryEmptyContainer(container, fluidDestination, maxAmount, player, false);
-            if (emptiedSimulated.isSuccess())
-            {
+            if (emptiedSimulated.isSuccess()) {
                 // check if we can give the itemStack to the inventory
                 ItemStack remainder = ItemHandlerHelper.insertItemStacked(inventory, emptiedSimulated.getResult(), true);
-                if (remainder.isEmpty() || player != null)
-                {
+                if (remainder.isEmpty() || player != null) {
                     FluidActionResult emptiedReal = tryEmptyContainer(container, fluidDestination, maxAmount, player, doDrain);
                     remainder = ItemHandlerHelper.insertItemStacked(inventory, emptiedReal.getResult(), !doDrain);
 
                     // give it to the player or drop it at their feet
-                    if (!remainder.isEmpty() && player != null && doDrain)
-                    {
+                    if (!remainder.isEmpty() && player != null && doDrain) {
                         ItemHandlerHelper.giveItemToPlayer(player, remainder);
                     }
 
@@ -404,11 +357,9 @@
      * @return the fluidStack that was transferred from the source to the destination. null on failure.
      */
     @Nullable
-    public static FluidStack tryFluidTransfer(IFluidHandler fluidDestination, IFluidHandler fluidSource, int maxAmount, boolean doTransfer)
-    {
+    public static FluidStack tryFluidTransfer(IFluidHandler fluidDestination, IFluidHandler fluidSource, int maxAmount, boolean doTransfer) {
         FluidStack drainable = fluidSource.drain(maxAmount, false);
-        if (drainable != null && drainable.amount > 0)
-        {
+        if (drainable != null && drainable.amount > 0) {
             return tryFluidTransfer_Internal(fluidDestination, fluidSource, drainable, doTransfer);
         }
         return null;
@@ -426,11 +377,9 @@
      * @return the fluidStack that was transferred from the source to the destination. null on failure.
      */
     @Nullable
-    public static FluidStack tryFluidTransfer(IFluidHandler fluidDestination, IFluidHandler fluidSource, FluidStack resource, boolean doTransfer)
-    {
+    public static FluidStack tryFluidTransfer(IFluidHandler fluidDestination, IFluidHandler fluidSource, FluidStack resource, boolean doTransfer) {
         FluidStack drainable = fluidSource.drain(resource, false);
-        if (drainable != null && drainable.amount > 0 && resource.isFluidEqual(drainable))
-        {
+        if (drainable != null && drainable.amount > 0 && resource.isFluidEqual(drainable)) {
             return tryFluidTransfer_Internal(fluidDestination, fluidSource, drainable, doTransfer);
         }
         return null;
@@ -444,22 +393,16 @@
      * or {@link #tryFluidTransfer(IFluidHandler, IFluidHandler, int, boolean)}.
      */
     @Nullable
-    private static FluidStack tryFluidTransfer_Internal(IFluidHandler fluidDestination, IFluidHandler fluidSource, FluidStack drainable, boolean doTransfer)
-    {
+    private static FluidStack tryFluidTransfer_Internal(IFluidHandler fluidDestination, IFluidHandler fluidSource, FluidStack drainable, boolean doTransfer) {
         int fillableAmount = fluidDestination.fill(drainable, false);
-        if (fillableAmount > 0)
-        {
-            if (doTransfer)
-            {
+        if (fillableAmount > 0) {
+            if (doTransfer) {
                 FluidStack drained = fluidSource.drain(fillableAmount, true);
-                if (drained != null)
-                {
+                if (drained != null) {
                     drained.amount = fluidDestination.fill(drained, true);
                     return drained;
                 }
-            }
-            else
-            {
+            } else {
                 drainable.amount = fillableAmount;
                 return drainable;
             }
@@ -482,14 +425,10 @@
      * Returns null if the itemStack passed in does not have a fluid handler.
      */
     @Nullable
-    public static IFluidHandlerItem getFluidHandler(@Nonnull ItemStack itemStack)
-    {
-        if (itemStack.hasCapability(CapabilityFluidHandler.FLUID_HANDLER_ITEM_CAPABILITY, null))
-        {
+    public static IFluidHandlerItem getFluidHandler(@Nonnull ItemStack itemStack) {
+        if (itemStack.hasCapability(CapabilityFluidHandler.FLUID_HANDLER_ITEM_CAPABILITY, null)) {
             return itemStack.getCapability(CapabilityFluidHandler.FLUID_HANDLER_ITEM_CAPABILITY, null);
-        }
-        else
-        {
+        } else {
             return null;
         }
     }
@@ -498,14 +437,11 @@
      * Helper method to get the fluid contained in an itemStack
      */
     @Nullable
-    public static FluidStack getFluidContained(@Nonnull ItemStack container)
-    {
-        if (!container.isEmpty())
-        {
+    public static FluidStack getFluidContained(@Nonnull ItemStack container) {
+        if (!container.isEmpty()) {
             container = ItemHandlerHelper.copyStackWithSize(container, 1);
             IFluidHandlerItem fluidHandler = getFluidHandler(container);
-            if (fluidHandler != null)
-            {
+            if (fluidHandler != null) {
                 return fluidHandler.drain(Integer.MAX_VALUE, false);
             }
         }
@@ -518,25 +454,19 @@
      * Returns null if there is no valid fluid handler.
      */
     @Nullable
-    public static IFluidHandler getFluidHandler(World world, BlockPos blockPos, @Nullable EnumFacing side)
-    {
+    public static IFluidHandler getFluidHandler(World world, BlockPos blockPos, @Nullable EnumFacing side) {
         IBlockState state = world.getBlockState(blockPos);
         Block block = state.getBlock();
 
-        if (block.hasTileEntity(state))
-        {
+        if (block.hasTileEntity(state)) {
             TileEntity tileEntity = world.getTileEntity(blockPos);
-            if (tileEntity != null && tileEntity.hasCapability(CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY, side))
-            {
+            if (tileEntity != null && tileEntity.hasCapability(CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY, side)) {
                 return tileEntity.getCapability(CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY, side);
             }
         }
-        if (block instanceof IFluidBlock)
-        {
+        if (block instanceof IFluidBlock) {
             return new FluidBlockWrapper((IFluidBlock) block, world, blockPos);
-        }
-        else if (block instanceof BlockLiquid)
-        {
+        } else if (block instanceof BlockLiquid) {
             return new BlockLiquidWrapper((BlockLiquid) block, world, blockPos);
         }
 
@@ -555,21 +485,17 @@
      * @return a {@link FluidActionResult} holding the result and the resulting container.
      */
     @Nonnull
-    public static FluidActionResult tryPickUpFluid(@Nonnull ItemStack emptyContainer, @Nullable EntityPlayer playerIn, World worldIn, BlockPos pos, EnumFacing side)
-    {
-        if (emptyContainer.isEmpty() || worldIn == null || pos == null)
-        {
+    public static FluidActionResult tryPickUpFluid(@Nonnull ItemStack emptyContainer, @Nullable EntityPlayer playerIn, World worldIn, BlockPos pos, EnumFacing side) {
+        if (emptyContainer.isEmpty() || worldIn == null || pos == null) {
             return FluidActionResult.FAILURE;
         }
 
         IBlockState state = worldIn.getBlockState(pos);
         Block block = state.getBlock();
 
-        if (block instanceof IFluidBlock || block instanceof BlockLiquid)
-        {
+        if (block instanceof IFluidBlock || block instanceof BlockLiquid) {
             IFluidHandler targetFluidHandler = getFluidHandler(worldIn, pos, side);
-            if (targetFluidHandler != null)
-            {
+            if (targetFluidHandler != null) {
                 return tryFillContainer(emptyContainer, targetFluidHandler, Integer.MAX_VALUE, playerIn, true);
             }
         }
@@ -588,12 +514,10 @@
      * @return the container's ItemStack with the remaining amount of fluid if the placement was successful, null otherwise
      */
     @Nonnull
-    public static FluidActionResult tryPlaceFluid(@Nullable EntityPlayer player, World world, BlockPos pos, @Nonnull ItemStack container, FluidStack resource)
-    {
+    public static FluidActionResult tryPlaceFluid(@Nullable EntityPlayer player, World world, BlockPos pos, @Nonnull ItemStack container, FluidStack resource) {
         ItemStack containerCopy = ItemHandlerHelper.copyStackWithSize(container, 1); // do not modify the input
         IFluidHandlerItem containerFluidHandler = getFluidHandler(containerCopy);
-        if (containerFluidHandler != null && tryPlaceFluid(player, world, pos, containerFluidHandler, resource))
-        {
+        if (containerFluidHandler != null && tryPlaceFluid(player, world, pos, containerFluidHandler, resource)) {
             return new FluidActionResult(containerFluidHandler.getContainer());
         }
         return FluidActionResult.FAILURE;
@@ -614,21 +538,17 @@
      * @param resource    The fluidStack to place.
      * @return true if the placement was successful, false otherwise
      */
-    public static boolean tryPlaceFluid(@Nullable EntityPlayer player, World world, BlockPos pos, IFluidHandler fluidSource, FluidStack resource)
-    {
-        if (world == null || resource == null || pos == null)
-        {
+    public static boolean tryPlaceFluid(@Nullable EntityPlayer player, World world, BlockPos pos, IFluidHandler fluidSource, FluidStack resource) {
+        if (world == null || resource == null || pos == null) {
             return false;
         }
 
         Fluid fluid = resource.getFluid();
-        if (fluid == null || !fluid.canBePlacedInWorld())
-        {
+        if (fluid == null || !fluid.canBePlacedInWorld()) {
             return false;
         }
 
-        if (fluidSource.drain(resource, false) == null)
-        {
+        if (fluidSource.drain(resource, false) == null) {
             return false;
         }
 
@@ -637,27 +557,21 @@
         Material destMaterial = destBlockState.getMaterial();
         boolean isDestNonSolid = !destMaterial.isSolid();
         boolean isDestReplaceable = destBlockState.getBlock().isReplaceable(world, pos);
-        if (!world.isAirBlock(pos) && !isDestNonSolid && !isDestReplaceable)
-        {
+        if (!world.isAirBlock(pos) && !isDestNonSolid && !isDestReplaceable) {
             return false; // Non-air, solid, unreplacable block. We can't put fluid here.
         }
 
-        if (world.provider.doesWaterVaporize() && fluid.doesVaporize(resource))
-        {
+        if (world.provider.doesWaterVaporize() && fluid.doesVaporize(resource)) {
             FluidStack result = fluidSource.drain(resource, true);
-            if (result != null)
-            {
+            if (result != null) {
                 result.getFluid().vaporize(player, world, pos, result);
                 return true;
             }
-        }
-        else
-        {
+        } else {
             // This fluid handler places the fluid block when filled
             IFluidHandler handler = getFluidBlockHandler(fluid, world, pos);
             FluidStack result = tryFluidTransfer(handler, fluidSource, resource, true);
-            if (result != null)
-            {
+            if (result != null) {
                 SoundEvent soundevent = resource.getFluid().getEmptySound(resource);
                 world.playSound(player, pos, soundevent, SoundCategory.BLOCKS, 1.0F, 1.0F);
                 return true;
@@ -672,19 +586,13 @@
      * Modders: Instead of this method, use {@link #tryPlaceFluid(EntityPlayer, World, BlockPos, ItemStack, FluidStack)}
      * or {@link #tryPlaceFluid(EntityPlayer, World, BlockPos, IFluidHandler, FluidStack)}
      */
-    private static IFluidHandler getFluidBlockHandler(Fluid fluid, World world, BlockPos pos)
-    {
+    private static IFluidHandler getFluidBlockHandler(Fluid fluid, World world, BlockPos pos) {
         Block block = fluid.getBlock();
-        if (block instanceof IFluidBlock)
-        {
+        if (block instanceof IFluidBlock) {
             return new FluidBlockWrapper((IFluidBlock) block, world, pos);
-        }
-        else if (block instanceof BlockLiquid)
-        {
+        } else if (block instanceof BlockLiquid) {
             return new BlockLiquidWrapper((BlockLiquid) block, world, pos);
-        }
-        else
-        {
+        } else {
             return new BlockWrapper(block, world, pos);
         }
     }
@@ -698,16 +606,13 @@
      * @param world the world that the fluid will be placed in
      * @param pos   the location that the fluid will be placed
      */
-    public static void destroyBlockOnFluidPlacement(World world, BlockPos pos)
-    {
-        if (!world.isRemote)
-        {
+    public static void destroyBlockOnFluidPlacement(World world, BlockPos pos) {
+        if (!world.isRemote) {
             IBlockState destBlockState = world.getBlockState(pos);
             Material destMaterial = destBlockState.getMaterial();
             boolean isDestNonSolid = !destMaterial.isSolid();
             boolean isDestReplaceable = destBlockState.getBlock().isReplaceable(world, pos);
-            if ((isDestNonSolid || isDestReplaceable) && !destMaterial.isLiquid())
-            {
+            if ((isDestNonSolid || isDestReplaceable) && !destMaterial.isLiquid()) {
                 world.destroyBlock(pos, true);
             }
         }
@@ -720,28 +625,20 @@
      *         Returns empty itemStack if none of the enabled buckets can hold the fluid.
      */
     @Nonnull
-    public static ItemStack getFilledBucket(@Nonnull FluidStack fluidStack)
-    {
+    public static ItemStack getFilledBucket(@Nonnull FluidStack fluidStack) {
         Fluid fluid = fluidStack.getFluid();
 
-        if (fluidStack.tag == null || fluidStack.tag.hasNoTags())
-        {
-            if (fluid == FluidRegistry.WATER)
-            {
+        if (fluidStack.tag == null || fluidStack.tag.hasNoTags()) {
+            if (fluid == FluidRegistry.WATER) {
                 return new ItemStack(Items.WATER_BUCKET);
-            }
-            else if (fluid == FluidRegistry.LAVA)
-            {
+            } else if (fluid == FluidRegistry.LAVA) {
                 return new ItemStack(Items.LAVA_BUCKET);
-            }
-            else if (fluid.getName().equals("milk"))
-            {
+            } else if (fluid.getName().equals("milk")) {
                 return new ItemStack(Items.MILK_BUCKET);
             }
         }
 
-        if (FluidRegistry.isUniversalBucketEnabled() && FluidRegistry.hasBucket(fluid))
-        {
+        if (FluidRegistry.isUniversalBucketEnabled() && FluidRegistry.hasBucket(fluid)) {
             UniversalBucket bucket = ForgeModContainer.getInstance().universalBucket;
             ItemStack filledBucket = new ItemStack(bucket);
             FluidStack fluidContents = new FluidStack(fluidStack, bucket.getCapacity());
