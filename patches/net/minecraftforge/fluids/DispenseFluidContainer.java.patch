--- ../src-base/minecraft/net/minecraftforge/fluids/DispenseFluidContainer.java
+++ ../src-work/minecraft/net/minecraftforge/fluids/DispenseFluidContainer.java
@@ -19,8 +19,6 @@
 
 package net.minecraftforge.fluids;
 
-import javax.annotation.Nonnull;
-
 import net.minecraft.block.BlockDispenser;
 import net.minecraft.dispenser.BehaviorDefaultDispenseItem;
 import net.minecraft.dispenser.IBlockSource;
@@ -31,32 +29,28 @@
 import net.minecraft.world.World;
 import net.minecraftforge.fluids.capability.IFluidHandlerItem;
 
+import javax.annotation.Nonnull;
+
 /**
  * Fills or drains a fluid container item using a Dispenser.
  */
-public class DispenseFluidContainer extends BehaviorDefaultDispenseItem
-{
+public class DispenseFluidContainer extends BehaviorDefaultDispenseItem {
     private static final DispenseFluidContainer INSTANCE = new DispenseFluidContainer();
+    private final BehaviorDefaultDispenseItem dispenseBehavior = new BehaviorDefaultDispenseItem();
 
-    public static DispenseFluidContainer getInstance()
-    {
+    private DispenseFluidContainer() {
+    }
+
+    public static DispenseFluidContainer getInstance() {
         return INSTANCE;
     }
 
-    private DispenseFluidContainer() {}
-
-    private final BehaviorDefaultDispenseItem dispenseBehavior = new BehaviorDefaultDispenseItem();
-
     @Override
     @Nonnull
-    public ItemStack dispenseStack(@Nonnull IBlockSource source, @Nonnull ItemStack stack)
-    {
-        if (FluidUtil.getFluidContained(stack) != null)
-        {
+    public ItemStack dispenseStack(@Nonnull IBlockSource source, @Nonnull ItemStack stack) {
+        if (FluidUtil.getFluidContained(stack) != null) {
             return dumpContainer(source, stack);
-        }
-        else
-        {
+        } else {
             return fillContainer(source, stack);
         }
     }
@@ -65,8 +59,7 @@
      * Picks up fluid in front of a Dispenser and fills a container with it.
      */
     @Nonnull
-    private ItemStack fillContainer(@Nonnull IBlockSource source, @Nonnull ItemStack stack)
-    {
+    private ItemStack fillContainer(@Nonnull IBlockSource source, @Nonnull ItemStack stack) {
         World world = source.getWorld();
         EnumFacing dispenserFacing = source.getBlockState().getValue(BlockDispenser.FACING);
         BlockPos blockpos = source.getBlockPos().offset(dispenserFacing);
@@ -74,17 +67,13 @@
         FluidActionResult actionResult = FluidUtil.tryPickUpFluid(stack, null, world, blockpos, dispenserFacing.getOpposite());
         ItemStack resultStack = actionResult.getResult();
 
-        if (!actionResult.isSuccess() || resultStack.isEmpty())
-        {
+        if (!actionResult.isSuccess() || resultStack.isEmpty()) {
             return super.dispenseStack(source, stack);
         }
 
-        if (stack.getCount() == 1)
-        {
+        if (stack.getCount() == 1) {
             return resultStack;
-        }
-        else if (((TileEntityDispenser)source.getBlockTileEntity()).addItemStack(resultStack) < 0)
-        {
+        } else if (((TileEntityDispenser) source.getBlockTileEntity()).addItemStack(resultStack) < 0) {
             this.dispenseBehavior.dispense(source, resultStack);
         }
 
@@ -97,13 +86,11 @@
      * Drains a filled container and places the fluid in front of the Dispenser.
      */
     @Nonnull
-    private ItemStack dumpContainer(IBlockSource source, @Nonnull ItemStack stack)
-    {
+    private ItemStack dumpContainer(IBlockSource source, @Nonnull ItemStack stack) {
         ItemStack singleStack = stack.copy();
         singleStack.setCount(1);
         IFluidHandlerItem fluidHandler = FluidUtil.getFluidHandler(singleStack);
-        if (fluidHandler == null)
-        {
+        if (fluidHandler == null) {
             return super.dispenseStack(source, stack);
         }
 
@@ -112,25 +99,19 @@
         BlockPos blockpos = source.getBlockPos().offset(dispenserFacing);
         FluidActionResult result = fluidStack != null ? FluidUtil.tryPlaceFluid(null, source.getWorld(), blockpos, stack, fluidStack) : FluidActionResult.FAILURE;
 
-        if (result.isSuccess())
-        {
+        if (result.isSuccess()) {
             ItemStack drainedStack = result.getResult();
 
-            if (drainedStack.getCount() == 1)
-            {
+            if (drainedStack.getCount() == 1) {
                 return drainedStack;
-            }
-            else if (!drainedStack.isEmpty() && ((TileEntityDispenser)source.getBlockTileEntity()).addItemStack(drainedStack) < 0)
-            {
+            } else if (!drainedStack.isEmpty() && ((TileEntityDispenser) source.getBlockTileEntity()).addItemStack(drainedStack) < 0) {
                 this.dispenseBehavior.dispense(source, drainedStack);
             }
 
             ItemStack stackCopy = drainedStack.copy();
             stackCopy.shrink(1);
             return stackCopy;
-        }
-        else
-        {
+        } else {
             return this.dispenseBehavior.dispense(source, stack);
         }
     }
