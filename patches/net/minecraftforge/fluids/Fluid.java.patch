--- ../src-base/minecraft/net/minecraftforge/fluids/Fluid.java
+++ ../src-work/minecraft/net/minecraftforge/fluids/Fluid.java
@@ -19,25 +19,25 @@
 
 package net.minecraftforge.fluids;
 
-import javax.annotation.Nullable;
-
-import java.awt.Color;
-import java.util.Locale;
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.SoundEvents;
+import net.minecraft.item.EnumRarity;
 import net.minecraft.util.EnumParticleTypes;
+import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.SoundCategory;
 import net.minecraft.util.SoundEvent;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.text.translation.I18n;
-import net.minecraft.util.ResourceLocation;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldProvider;
 import net.minecraftforge.fml.common.FMLLog;
-import net.minecraft.item.EnumRarity;
 
+import javax.annotation.Nullable;
+import java.awt.*;
+import java.util.Locale;
+
 /**
  * Minecraft Forge Fluid Implementation
  *
@@ -54,32 +54,23 @@
  * water.
  *
  */
-public class Fluid
-{
+public class Fluid {
     public static final int BUCKET_VOLUME = 1000;
 
     /** The unique identification name for this fluid. */
     protected final String fluidName;
-
-    /** The unlocalized name of this fluid. */
-    protected String unlocalizedName;
-
     protected final ResourceLocation still;
     protected final ResourceLocation flowing;
-
     @Nullable
     protected final ResourceLocation overlay;
-
-    private SoundEvent fillSound;
-    private SoundEvent emptySound;
-
+    /** The unlocalized name of this fluid. */
+    protected String unlocalizedName;
     /**
      * The light level emitted by this fluid.
      *
      * Default value is 0, as most fluids do not actively emit light.
      */
     protected int luminosity = 0;
-
     /**
      * Density of the fluid - completely arbitrary; negative density indicates that the fluid is
      * lighter than air.
@@ -87,7 +78,6 @@
      * Default value is approximately the real-life density of water in kg/m^3.
      */
     protected int density = 1000;
-
     /**
      * Temperature of the fluid - completely arbitrary; higher temperature indicates that the fluid is
      * hotter than air.
@@ -95,7 +85,6 @@
      * Default value is approximately the real-life room temperature of water in degrees Kelvin.
      */
     protected int temperature = 300;
-
     /**
      * Viscosity ("thickness") of the fluid - completely arbitrary; negative values are not
      * permissible.
@@ -107,28 +96,24 @@
      *
      */
     protected int viscosity = 1000;
-
     /**
      * This indicates if the fluid is gaseous.
      *
      * Generally this is associated with negative density fluids.
      */
     protected boolean isGaseous;
-
     /**
      * The rarity of the fluid.
      *
      * Used primarily in tool tips.
      */
     protected EnumRarity rarity = EnumRarity.COMMON;
-
     /**
      * If there is a Block implementation of the Fluid, the Block is linked here.
      *
      * The default value of null should remain for any Fluid without a Block implementation.
      */
     protected Block block = null;
-    
     /**
      * Color used by universal bucket and the ModelFluid baked model.
      * Note that this int includes the alpha so converting this to RGB with alpha would be
@@ -138,36 +123,32 @@
      *   float a = ((color >> 24) & 0xFF) / 255f; // alpha
      */
     protected int color = 0xFFFFFFFF;
+    private SoundEvent fillSound;
+    private SoundEvent emptySound;
 
-    public Fluid(String fluidName, ResourceLocation still, ResourceLocation flowing, Color color)
-    {
+    public Fluid(String fluidName, ResourceLocation still, ResourceLocation flowing, Color color) {
         this(fluidName, still, flowing, null, color);
     }
 
-    public Fluid(String fluidName, ResourceLocation still, ResourceLocation flowing, @Nullable ResourceLocation overlay, Color color)
-    {
+    public Fluid(String fluidName, ResourceLocation still, ResourceLocation flowing, @Nullable ResourceLocation overlay, Color color) {
         this(fluidName, still, flowing, overlay);
         this.setColor(color);
     }
 
-    public Fluid(String fluidName, ResourceLocation still, ResourceLocation flowing, int color)
-    {
+    public Fluid(String fluidName, ResourceLocation still, ResourceLocation flowing, int color) {
         this(fluidName, still, flowing, null, color);
     }
 
-    public Fluid(String fluidName, ResourceLocation still, ResourceLocation flowing, @Nullable ResourceLocation overlay, int color)
-    {
+    public Fluid(String fluidName, ResourceLocation still, ResourceLocation flowing, @Nullable ResourceLocation overlay, int color) {
         this(fluidName, still, flowing, overlay);
         this.setColor(color);
     }
 
-    public Fluid(String fluidName, ResourceLocation still, ResourceLocation flowing)
-    {
+    public Fluid(String fluidName, ResourceLocation still, ResourceLocation flowing) {
         this(fluidName, still, flowing, (ResourceLocation) null);
     }
 
-    public Fluid(String fluidName, ResourceLocation still, ResourceLocation flowing, @Nullable ResourceLocation overlay)
-    {
+    public Fluid(String fluidName, ResourceLocation still, ResourceLocation flowing, @Nullable ResourceLocation overlay) {
         this.fluidName = fluidName.toLowerCase(Locale.ENGLISH);
         this.unlocalizedName = fluidName;
         this.still = still;
@@ -175,112 +156,42 @@
         this.overlay = overlay;
     }
 
-    public Fluid setUnlocalizedName(String unlocalizedName)
-    {
-        this.unlocalizedName = unlocalizedName;
-        return this;
-    }
-
-    public Fluid setBlock(Block block)
-    {
-        if (this.block == null || this.block == block)
-        {
-            this.block = block;
-        }
-        else
-        {
-            FMLLog.log.warn("A mod has attempted to assign Block {} to the Fluid '{}' but this Fluid has already been linked to the Block {}. "
-                    + "You may have duplicate Fluid Blocks as a result. It *may* be possible to configure your mods to avoid this.", block, fluidName, this.block);
-        }
-        return this;
-    }
-
-    public Fluid setLuminosity(int luminosity)
-    {
-        this.luminosity = luminosity;
-        return this;
-    }
-
-    public Fluid setDensity(int density)
-    {
-        this.density = density;
-        return this;
-    }
-
-    public Fluid setTemperature(int temperature)
-    {
-        this.temperature = temperature;
-        return this;
-    }
-
-    public Fluid setViscosity(int viscosity)
-    {
-        this.viscosity = viscosity;
-        return this;
-    }
-
-    public Fluid setGaseous(boolean isGaseous)
-    {
-        this.isGaseous = isGaseous;
-        return this;
-    }
-
-    public Fluid setRarity(EnumRarity rarity)
-    {
-        this.rarity = rarity;
-        return this;
-    }
-
-    public Fluid setFillSound(SoundEvent fillSound)
-    {
-        this.fillSound = fillSound;
-        return this;
-    }
-
-    public Fluid setEmptySound(SoundEvent emptySound)
-    {
-        this.emptySound = emptySound;
-        return this;
-    }
-    
-    public Fluid setColor(Color color)
-    {
+    public Fluid setColor(Color color) {
         this.color = color.getRGB();
         return this;
     }
-    
-    public Fluid setColor(int color)
-    {
-        this.color = color;
-        return this;
-    }
 
-    public final String getName()
-    {
+    public final String getName() {
         return this.fluidName;
     }
 
-    public final Block getBlock()
-    {
+    public final Block getBlock() {
         return block;
     }
 
-    public final boolean canBePlacedInWorld()
-    {
+    public Fluid setBlock(Block block) {
+        if (this.block == null || this.block == block) {
+            this.block = block;
+        } else {
+            FMLLog.log.warn("A mod has attempted to assign Block {} to the Fluid '{}' but this Fluid has already been linked to the Block {}. "
+                    + "You may have duplicate Fluid Blocks as a result. It *may* be possible to configure your mods to avoid this.", block, fluidName, this.block);
+        }
+        return this;
+    }
+
+    public final boolean canBePlacedInWorld() {
         return block != null;
     }
 
-    public final boolean isLighterThanAir()
-    {
+    public final boolean isLighterThanAir() {
         int density = this.density;
-        if (block instanceof BlockFluidBase)
-        {
+        if (block instanceof BlockFluidBase) {
             density = ((BlockFluidBase) block).getDensity();
         }
         return density <= 0;
     }
 
-	/**
+    /**
      * Determines if this fluid should vaporize in dimensions where water vaporizes when placed.
      * To preserve the intentions of vanilla, fluids that can turn lava into obsidian should vaporize.
      * This prevents players from making the nether safe with a single bucket.
@@ -289,14 +200,13 @@
      * @param fluidStack The fluidStack is trying to be placed.
      * @return true if this fluid should vaporize in dimensions where water vaporizes when placed.
      */
-    public boolean doesVaporize(FluidStack fluidStack)
-    {
+    public boolean doesVaporize(FluidStack fluidStack) {
         if (block == null)
             return false;
         return block.getDefaultState().getMaterial() == Material.WATER;
     }
 
-	/**
+    /**
      * Called instead of placing the fluid block if {@link WorldProvider#doesWaterVaporize()} and {@link #doesVaporize(FluidStack)} are true.
      * Override this to make your explosive liquid blow up instead of the default smoke, etc.
      * Based on {@link net.minecraft.item.ItemBucket#tryPlaceContainedLiquid(EntityPlayer, World, BlockPos)}
@@ -306,12 +216,10 @@
      * @param pos        The position in the world the fluid block was going to be placed.
      * @param fluidStack The fluidStack that was going to be placed.
      */
-    public void vaporize(@Nullable EntityPlayer player, World worldIn, BlockPos pos, FluidStack fluidStack)
-    {
+    public void vaporize(@Nullable EntityPlayer player, World worldIn, BlockPos pos, FluidStack fluidStack) {
         worldIn.playSound(player, pos, SoundEvents.BLOCK_FIRE_EXTINGUISH, SoundCategory.BLOCKS, 0.5F, 2.6F + (worldIn.rand.nextFloat() - worldIn.rand.nextFloat()) * 0.8F);
 
-        for (int l = 0; l < 8; ++l)
-        {
+        for (int l = 0; l < 8; ++l) {
             worldIn.spawnParticle(EnumParticleTypes.SMOKE_LARGE, (double) pos.getX() + Math.random(), (double) pos.getY() + Math.random(), (double) pos.getZ() + Math.random(), 0.0D, 0.0D, 0.0D);
         }
     }
@@ -319,8 +227,7 @@
     /**
      * Returns the localized name of this fluid.
      */
-    public String getLocalizedName(FluidStack stack)
-    {
+    public String getLocalizedName(FluidStack stack) {
         String s = this.getUnlocalizedName();
         return s == null ? "" : I18n.translateToLocal(s);
     }
@@ -328,81 +235,104 @@
     /**
      * A FluidStack sensitive version of getUnlocalizedName
      */
-    public String getUnlocalizedName(FluidStack stack)
-    {
+    public String getUnlocalizedName(FluidStack stack) {
         return this.getUnlocalizedName();
     }
 
     /**
      * Returns the unlocalized name of this fluid.
      */
-    public String getUnlocalizedName()
-    {
+    public String getUnlocalizedName() {
         return "fluid." + this.unlocalizedName;
     }
 
+    public Fluid setUnlocalizedName(String unlocalizedName) {
+        this.unlocalizedName = unlocalizedName;
+        return this;
+    }
+
     /* Default Accessors */
-    public final int getLuminosity()
-    {
+    public final int getLuminosity() {
         return this.luminosity;
     }
 
-    public final int getDensity()
-    {
+    public Fluid setLuminosity(int luminosity) {
+        this.luminosity = luminosity;
+        return this;
+    }
+
+    public final int getDensity() {
         return this.density;
     }
 
-    public final int getTemperature()
-    {
+    public Fluid setDensity(int density) {
+        this.density = density;
+        return this;
+    }
+
+    public final int getTemperature() {
         return this.temperature;
     }
 
-    public final int getViscosity()
-    {
+    public Fluid setTemperature(int temperature) {
+        this.temperature = temperature;
+        return this;
+    }
+
+    public final int getViscosity() {
         return this.viscosity;
     }
 
-    public final boolean isGaseous()
-    {
+    public Fluid setViscosity(int viscosity) {
+        this.viscosity = viscosity;
+        return this;
+    }
+
+    public final boolean isGaseous() {
         return this.isGaseous;
     }
 
-    public EnumRarity getRarity()
-    {
+    public Fluid setGaseous(boolean isGaseous) {
+        this.isGaseous = isGaseous;
+        return this;
+    }
+
+    public EnumRarity getRarity() {
         return rarity;
     }
 
-    public int getColor()
-    {
+    public Fluid setRarity(EnumRarity rarity) {
+        this.rarity = rarity;
+        return this;
+    }
+
+    public int getColor() {
         return color;
     }
 
-    public ResourceLocation getStill()
-    {
+    public Fluid setColor(int color) {
+        this.color = color;
+        return this;
+    }
+
+    public ResourceLocation getStill() {
         return still;
     }
 
-    public ResourceLocation getFlowing()
-    {
+    public ResourceLocation getFlowing() {
         return flowing;
     }
 
     @Nullable
-    public ResourceLocation getOverlay()
-    {
+    public ResourceLocation getOverlay() {
         return overlay;
     }
 
-    public SoundEvent getFillSound()
-    {
-        if(fillSound == null)
-        {
-            if(getBlock() != null && getBlock().getDefaultState().getMaterial() == Material.LAVA)
-            {
+    public SoundEvent getFillSound() {
+        if (fillSound == null) {
+            if (getBlock() != null && getBlock().getDefaultState().getMaterial() == Material.LAVA) {
                 fillSound = SoundEvents.ITEM_BUCKET_FILL_LAVA;
-            }
-            else
-            {
+            } else {
                 fillSound = SoundEvents.ITEM_BUCKET_FILL;
             }
         }
@@ -410,16 +340,16 @@
         return fillSound;
     }
 
-    public SoundEvent getEmptySound()
-    {
-        if(emptySound == null)
-        {
-            if(getBlock() != null && getBlock().getDefaultState().getMaterial() == Material.LAVA)
-            {
+    public Fluid setFillSound(SoundEvent fillSound) {
+        this.fillSound = fillSound;
+        return this;
+    }
+
+    public SoundEvent getEmptySound() {
+        if (emptySound == null) {
+            if (getBlock() != null && getBlock().getDefaultState().getMaterial() == Material.LAVA) {
                 emptySound = SoundEvents.ITEM_BUCKET_EMPTY_LAVA;
-            }
-            else
-            {
+            } else {
                 emptySound = SoundEvents.ITEM_BUCKET_EMPTY;
             }
         }
@@ -427,30 +357,99 @@
         return emptySound;
     }
 
+    public Fluid setEmptySound(SoundEvent emptySound) {
+        this.emptySound = emptySound;
+        return this;
+    }
+
     /* Stack-based Accessors */
-    public int getLuminosity(FluidStack stack){ return getLuminosity(); }
-    public int getDensity(FluidStack stack){ return getDensity(); }
-    public int getTemperature(FluidStack stack){ return getTemperature(); }
-    public int getViscosity(FluidStack stack){ return getViscosity(); }
-    public boolean isGaseous(FluidStack stack){ return isGaseous(); }
-    public EnumRarity getRarity(FluidStack stack){ return getRarity(); }
-    public int getColor(FluidStack stack){ return getColor(); }
-    public ResourceLocation getStill(FluidStack stack) { return getStill(); }
-    public ResourceLocation getFlowing(FluidStack stack) { return getFlowing(); }
-    public SoundEvent getFillSound(FluidStack stack) { return getFillSound(); }
-    public SoundEvent getEmptySound(FluidStack stack) { return getEmptySound(); }
+    public int getLuminosity(FluidStack stack) {
+        return getLuminosity();
+    }
 
+    public int getDensity(FluidStack stack) {
+        return getDensity();
+    }
+
+    public int getTemperature(FluidStack stack) {
+        return getTemperature();
+    }
+
+    public int getViscosity(FluidStack stack) {
+        return getViscosity();
+    }
+
+    public boolean isGaseous(FluidStack stack) {
+        return isGaseous();
+    }
+
+    public EnumRarity getRarity(FluidStack stack) {
+        return getRarity();
+    }
+
+    public int getColor(FluidStack stack) {
+        return getColor();
+    }
+
+    public ResourceLocation getStill(FluidStack stack) {
+        return getStill();
+    }
+
+    public ResourceLocation getFlowing(FluidStack stack) {
+        return getFlowing();
+    }
+
+    public SoundEvent getFillSound(FluidStack stack) {
+        return getFillSound();
+    }
+
+    public SoundEvent getEmptySound(FluidStack stack) {
+        return getEmptySound();
+    }
+
     /* World-based Accessors */
-    public int getLuminosity(World world, BlockPos pos){ return getLuminosity(); }
-    public int getDensity(World world, BlockPos pos){ return getDensity(); }
-    public int getTemperature(World world, BlockPos pos){ return getTemperature(); }
-    public int getViscosity(World world, BlockPos pos){ return getViscosity(); }
-    public boolean isGaseous(World world, BlockPos pos){ return isGaseous(); }
-    public EnumRarity getRarity(World world, BlockPos pos){ return getRarity(); }
-    public int getColor(World world, BlockPos pos){ return getColor(); }
-    public ResourceLocation getStill(World world, BlockPos pos) { return getStill(); }
-    public ResourceLocation getFlowing(World world, BlockPos pos) { return getFlowing(); }
-    public SoundEvent getFillSound(World world, BlockPos pos) { return getFillSound(); }
-    public SoundEvent getEmptySound(World world, BlockPos pos) { return getEmptySound(); }
+    public int getLuminosity(World world, BlockPos pos) {
+        return getLuminosity();
+    }
 
+    public int getDensity(World world, BlockPos pos) {
+        return getDensity();
+    }
+
+    public int getTemperature(World world, BlockPos pos) {
+        return getTemperature();
+    }
+
+    public int getViscosity(World world, BlockPos pos) {
+        return getViscosity();
+    }
+
+    public boolean isGaseous(World world, BlockPos pos) {
+        return isGaseous();
+    }
+
+    public EnumRarity getRarity(World world, BlockPos pos) {
+        return getRarity();
+    }
+
+    public int getColor(World world, BlockPos pos) {
+        return getColor();
+    }
+
+    public ResourceLocation getStill(World world, BlockPos pos) {
+        return getStill();
+    }
+
+    public ResourceLocation getFlowing(World world, BlockPos pos) {
+        return getFlowing();
+    }
+
+    public SoundEvent getFillSound(World world, BlockPos pos) {
+        return getFillSound();
+    }
+
+    public SoundEvent getEmptySound(World world, BlockPos pos) {
+        return getEmptySound();
+    }
+
 }
