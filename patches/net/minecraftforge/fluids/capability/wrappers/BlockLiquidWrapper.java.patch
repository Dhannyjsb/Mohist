--- ../src-base/minecraft/net/minecraftforge/fluids/capability/wrappers/BlockLiquidWrapper.java
+++ ../src-work/minecraft/net/minecraftforge/fluids/capability/wrappers/BlockLiquidWrapper.java
@@ -19,8 +19,6 @@
 
 package net.minecraftforge.fluids.capability.wrappers;
 
-import javax.annotation.Nullable;
-
 import net.minecraft.block.BlockLiquid;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
@@ -35,49 +33,44 @@
 import net.minecraftforge.fluids.FluidRegistry;
 import net.minecraftforge.fluids.FluidStack;
 import net.minecraftforge.fluids.capability.FluidTankProperties;
-import net.minecraftforge.fluids.capability.IFluidTankProperties;
 import net.minecraftforge.fluids.capability.IFluidHandler;
+import net.minecraftforge.fluids.capability.IFluidTankProperties;
 
+import javax.annotation.Nullable;
+
 /**
  * Wrapper to handle vanilla Water or Lava as an IFluidHandler.
  * Methods are modeled after {@link ItemBucket#onItemRightClick(World, EntityPlayer, EnumHand)}
  */
-public class BlockLiquidWrapper implements IFluidHandler
-{
+public class BlockLiquidWrapper implements IFluidHandler {
     protected final BlockLiquid blockLiquid;
     protected final World world;
     protected final BlockPos blockPos;
 
-    public BlockLiquidWrapper(BlockLiquid blockLiquid, World world, BlockPos blockPos)
-    {
+    public BlockLiquidWrapper(BlockLiquid blockLiquid, World world, BlockPos blockPos) {
         this.blockLiquid = blockLiquid;
         this.world = world;
         this.blockPos = blockPos;
     }
 
     @Override
-    public IFluidTankProperties[] getTankProperties()
-    {
+    public IFluidTankProperties[] getTankProperties() {
         FluidStack containedStack = null;
         IBlockState blockState = world.getBlockState(blockPos);
-        if (blockState.getBlock() == blockLiquid)
-        {
+        if (blockState.getBlock() == blockLiquid) {
             containedStack = getStack(blockState);
         }
         return new FluidTankProperties[]{new FluidTankProperties(containedStack, Fluid.BUCKET_VOLUME, false, true)};
     }
 
     @Override
-    public int fill(FluidStack resource, boolean doFill)
-    {
+    public int fill(FluidStack resource, boolean doFill) {
         // NOTE: "Filling" means placement in this context!
-        if (resource.amount < Fluid.BUCKET_VOLUME)
-        {
+        if (resource.amount < Fluid.BUCKET_VOLUME) {
             return 0;
         }
 
-        if (doFill)
-        {
+        if (doFill) {
             Material material = blockLiquid.getDefaultState().getMaterial();
             BlockLiquid block = BlockLiquid.getFlowingBlock(material);
             world.setBlockState(blockPos, block.getDefaultState().withProperty(BlockLiquid.LEVEL, 0), 11);
@@ -88,21 +81,16 @@
 
     @Nullable
     @Override
-    public FluidStack drain(FluidStack resource, boolean doDrain)
-    {
-        if (resource == null || resource.amount < Fluid.BUCKET_VOLUME)
-        {
+    public FluidStack drain(FluidStack resource, boolean doDrain) {
+        if (resource == null || resource.amount < Fluid.BUCKET_VOLUME) {
             return null;
         }
 
         IBlockState blockState = world.getBlockState(blockPos);
-        if (blockState.getBlock() == blockLiquid && blockState.getValue(BlockLiquid.LEVEL) == 0)
-        {
+        if (blockState.getBlock() == blockLiquid && blockState.getValue(BlockLiquid.LEVEL) == 0) {
             FluidStack containedStack = getStack(blockState);
-            if (containedStack != null && resource.containsFluid(containedStack))
-            {
-                if (doDrain)
-                {
+            if (containedStack != null && resource.containsFluid(containedStack)) {
+                if (doDrain) {
                     world.setBlockState(blockPos, Blocks.AIR.getDefaultState(), Constants.BlockFlags.DEFAULT_AND_RERENDER);
                 }
                 return containedStack;
@@ -114,21 +102,16 @@
 
     @Nullable
     @Override
-    public FluidStack drain(int maxDrain, boolean doDrain)
-    {
-        if (maxDrain < Fluid.BUCKET_VOLUME)
-        {
+    public FluidStack drain(int maxDrain, boolean doDrain) {
+        if (maxDrain < Fluid.BUCKET_VOLUME) {
             return null;
         }
 
         IBlockState blockState = world.getBlockState(blockPos);
-        if (blockState.getBlock() == blockLiquid)
-        {
+        if (blockState.getBlock() == blockLiquid) {
             FluidStack containedStack = getStack(blockState);
-            if (containedStack != null && containedStack.amount <= maxDrain)
-            {
-                if (doDrain)
-                {
+            if (containedStack != null && containedStack.amount <= maxDrain) {
+                if (doDrain) {
                     world.setBlockState(blockPos, Blocks.AIR.getDefaultState(), Constants.BlockFlags.DEFAULT_AND_RERENDER);
                 }
                 return containedStack;
@@ -139,19 +122,13 @@
     }
 
     @Nullable
-    private FluidStack getStack(IBlockState blockState)
-    {
+    private FluidStack getStack(IBlockState blockState) {
         Material material = blockState.getMaterial();
-        if (material == Material.WATER && blockState.getValue(BlockLiquid.LEVEL) == 0)
-        {
+        if (material == Material.WATER && blockState.getValue(BlockLiquid.LEVEL) == 0) {
             return new FluidStack(FluidRegistry.WATER, Fluid.BUCKET_VOLUME);
-        }
-        else if (material == Material.LAVA && blockState.getValue(BlockLiquid.LEVEL) == 0)
-        {
+        } else if (material == Material.LAVA && blockState.getValue(BlockLiquid.LEVEL) == 0) {
             return new FluidStack(FluidRegistry.LAVA, Fluid.BUCKET_VOLUME);
-        }
-        else
-        {
+        } else {
             return null;
         }
     }
