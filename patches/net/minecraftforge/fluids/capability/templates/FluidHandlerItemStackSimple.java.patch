--- ../src-base/minecraft/net/minecraftforge/fluids/capability/templates/FluidHandlerItemStackSimple.java
+++ ../src-work/minecraft/net/minecraftforge/fluids/capability/templates/FluidHandlerItemStackSimple.java
@@ -19,28 +19,27 @@
 
 package net.minecraftforge.fluids.capability.templates;
 
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.util.EnumFacing;
 import net.minecraftforge.common.capabilities.Capability;
 import net.minecraftforge.common.capabilities.ICapabilityProvider;
 import net.minecraftforge.fluids.FluidStack;
+import net.minecraftforge.fluids.capability.CapabilityFluidHandler;
 import net.minecraftforge.fluids.capability.FluidTankProperties;
 import net.minecraftforge.fluids.capability.IFluidHandlerItem;
 import net.minecraftforge.fluids.capability.IFluidTankProperties;
-import net.minecraftforge.fluids.capability.CapabilityFluidHandler;
 
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+
 /**
  * FluidHandlerItemStackSimple is a template capability provider for ItemStacks.
  * Data is stored directly in the vanilla NBT, in the same way as the old ItemFluidContainer.
  *
  * This implementation only allows item containers to be fully filled or emptied, similar to vanilla buckets.
  */
-public class FluidHandlerItemStackSimple implements IFluidHandlerItem, ICapabilityProvider
-{
+public class FluidHandlerItemStackSimple implements IFluidHandlerItem, ICapabilityProvider {
     public static final String FLUID_NBT_KEY = "Fluid";
 
     @Nonnull
@@ -51,34 +50,28 @@
      * @param container  The container itemStack, data is stored on it directly as NBT.
      * @param capacity   The maximum capacity of this fluid tank.
      */
-    public FluidHandlerItemStackSimple(@Nonnull ItemStack container, int capacity)
-    {
+    public FluidHandlerItemStackSimple(@Nonnull ItemStack container, int capacity) {
         this.container = container;
         this.capacity = capacity;
     }
 
     @Nonnull
     @Override
-    public ItemStack getContainer()
-    {
+    public ItemStack getContainer() {
         return container;
     }
 
     @Nullable
-    public FluidStack getFluid()
-    {
+    public FluidStack getFluid() {
         NBTTagCompound tagCompound = container.getTagCompound();
-        if (tagCompound == null || !tagCompound.hasKey(FLUID_NBT_KEY))
-        {
+        if (tagCompound == null || !tagCompound.hasKey(FLUID_NBT_KEY)) {
             return null;
         }
         return FluidStack.loadFluidStackFromNBT(tagCompound.getCompoundTag(FLUID_NBT_KEY));
     }
 
-    protected void setFluid(FluidStack fluid)
-    {
-        if (!container.hasTagCompound())
-        {
+    protected void setFluid(FluidStack fluid) {
+        if (!container.hasTagCompound()) {
             container.setTagCompound(new NBTTagCompound());
         }
 
@@ -88,22 +81,18 @@
     }
 
     @Override
-    public IFluidTankProperties[] getTankProperties()
-    {
-        return new IFluidTankProperties[] { new FluidTankProperties(getFluid(), capacity) };
+    public IFluidTankProperties[] getTankProperties() {
+        return new IFluidTankProperties[]{new FluidTankProperties(getFluid(), capacity)};
     }
 
     @Override
-    public int fill(FluidStack resource, boolean doFill)
-    {
-        if (container.getCount() != 1 || resource == null || resource.amount <= 0 || !canFillFluidType(resource))
-        {
+    public int fill(FluidStack resource, boolean doFill) {
+        if (container.getCount() != 1 || resource == null || resource.amount <= 0 || !canFillFluidType(resource)) {
             return 0;
         }
 
         FluidStack contained = getFluid();
-        if (contained == null)
-        {
+        if (contained == null) {
             int fillAmount = Math.min(capacity, resource.amount);
             if (fillAmount == capacity) {
                 if (doFill) {
@@ -120,26 +109,21 @@
     }
 
     @Override
-    public FluidStack drain(FluidStack resource, boolean doDrain)
-    {
-        if (container.getCount() != 1 || resource == null || resource.amount <= 0 || !resource.isFluidEqual(getFluid()))
-        {
+    public FluidStack drain(FluidStack resource, boolean doDrain) {
+        if (container.getCount() != 1 || resource == null || resource.amount <= 0 || !resource.isFluidEqual(getFluid())) {
             return null;
         }
         return drain(resource.amount, doDrain);
     }
 
     @Override
-    public FluidStack drain(int maxDrain, boolean doDrain)
-    {
-        if (container.getCount() != 1 || maxDrain <= 0)
-        {
+    public FluidStack drain(int maxDrain, boolean doDrain) {
+        if (container.getCount() != 1 || maxDrain <= 0) {
             return null;
         }
 
         FluidStack contained = getFluid();
-        if (contained == null || contained.amount <= 0 || !canDrainFluidType(contained))
-        {
+        if (contained == null || contained.amount <= 0 || !canDrainFluidType(contained)) {
             return null;
         }
 
@@ -157,13 +141,11 @@
         return null;
     }
 
-    public boolean canFillFluidType(FluidStack fluid)
-    {
+    public boolean canFillFluidType(FluidStack fluid) {
         return true;
     }
 
-    public boolean canDrainFluidType(FluidStack fluid)
-    {
+    public boolean canDrainFluidType(FluidStack fluid) {
         return true;
     }
 
@@ -172,38 +154,32 @@
      * Can be used to swap out the container's item for a different one with "container.setItem".
      * Can be used to destroy the container with "container.stackSize--"
      */
-    protected void setContainerToEmpty()
-    {
+    protected void setContainerToEmpty() {
         container.getTagCompound().removeTag(FLUID_NBT_KEY);
     }
 
     @Override
-    public boolean hasCapability(@Nonnull Capability<?> capability, @Nullable EnumFacing facing)
-    {
+    public boolean hasCapability(@Nonnull Capability<?> capability, @Nullable EnumFacing facing) {
         return capability == CapabilityFluidHandler.FLUID_HANDLER_ITEM_CAPABILITY;
     }
 
     @SuppressWarnings("unchecked")
     @Override
     @Nullable
-    public <T> T getCapability(@Nonnull Capability<T> capability, @Nullable EnumFacing facing)
-    {
+    public <T> T getCapability(@Nonnull Capability<T> capability, @Nullable EnumFacing facing) {
         return capability == CapabilityFluidHandler.FLUID_HANDLER_ITEM_CAPABILITY ? (T) this : null;
     }
 
     /**
      * Destroys the container item when it's emptied.
      */
-    public static class Consumable extends FluidHandlerItemStackSimple
-    {
-        public Consumable(ItemStack container, int capacity)
-        {
+    public static class Consumable extends FluidHandlerItemStackSimple {
+        public Consumable(ItemStack container, int capacity) {
             super(container, capacity);
         }
 
         @Override
-        protected void setContainerToEmpty()
-        {
+        protected void setContainerToEmpty() {
             super.setContainerToEmpty();
             container.shrink(1);
         }
@@ -212,19 +188,16 @@
     /**
      * Swaps the container item for a different one when it's emptied.
      */
-    public static class SwapEmpty extends FluidHandlerItemStackSimple
-    {
+    public static class SwapEmpty extends FluidHandlerItemStackSimple {
         protected final ItemStack emptyContainer;
 
-        public SwapEmpty(ItemStack container, ItemStack emptyContainer, int capacity)
-        {
+        public SwapEmpty(ItemStack container, ItemStack emptyContainer, int capacity) {
             super(container, capacity);
             this.emptyContainer = emptyContainer;
         }
 
         @Override
-        protected void setContainerToEmpty()
-        {
+        protected void setContainerToEmpty() {
             super.setContainerToEmpty();
             container = emptyContainer;
         }
