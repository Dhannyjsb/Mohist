--- ../src-base/minecraft/net/minecraftforge/fluids/capability/templates/FluidHandlerConcatenate.java
+++ ../src-work/minecraft/net/minecraftforge/fluids/capability/templates/FluidHandlerConcatenate.java
@@ -21,8 +21,8 @@
 
 import com.google.common.collect.Lists;
 import net.minecraftforge.fluids.FluidStack;
-import net.minecraftforge.fluids.capability.IFluidTankProperties;
 import net.minecraftforge.fluids.capability.IFluidHandler;
+import net.minecraftforge.fluids.capability.IFluidTankProperties;
 
 import java.util.Collection;
 import java.util.Collections;
@@ -32,42 +32,35 @@
  * FluidHandlerConcatenate is a template class for concatenating multiple handlers into one.
  * If each tank is restricted to exactly one type of fluid, then use {@link FluidHandlerFluidMap} as it is more efficient.
  */
-public class FluidHandlerConcatenate implements IFluidHandler
-{
+public class FluidHandlerConcatenate implements IFluidHandler {
     protected final IFluidHandler[] subHandlers;
 
-    public FluidHandlerConcatenate(IFluidHandler... subHandlers)
-    {
+    public FluidHandlerConcatenate(IFluidHandler... subHandlers) {
         this.subHandlers = subHandlers;
     }
 
-    public FluidHandlerConcatenate(Collection<IFluidHandler> subHandlers)
-    {
+    public FluidHandlerConcatenate(Collection<IFluidHandler> subHandlers) {
         this.subHandlers = subHandlers.toArray(new IFluidHandler[subHandlers.size()]);
     }
 
     @Override
-    public IFluidTankProperties[] getTankProperties()
-    {
+    public IFluidTankProperties[] getTankProperties() {
         List<IFluidTankProperties> tanks = Lists.newArrayList();
-        for (IFluidHandler handler : subHandlers)
-        {
+        for (IFluidHandler handler : subHandlers) {
             Collections.addAll(tanks, handler.getTankProperties());
         }
         return tanks.toArray(new IFluidTankProperties[tanks.size()]);
     }
 
     @Override
-    public int fill(FluidStack resource, boolean doFill)
-    {
+    public int fill(FluidStack resource, boolean doFill) {
         if (resource == null || resource.amount <= 0)
             return 0;
 
         resource = resource.copy();
 
         int totalFillAmount = 0;
-        for (IFluidHandler handler : subHandlers)
-        {
+        for (IFluidHandler handler : subHandlers) {
             int fillAmount = handler.fill(resource, doFill);
             totalFillAmount += fillAmount;
             resource.amount -= fillAmount;
@@ -78,19 +71,16 @@
     }
 
     @Override
-    public FluidStack drain(FluidStack resource, boolean doDrain)
-    {
+    public FluidStack drain(FluidStack resource, boolean doDrain) {
         if (resource == null || resource.amount <= 0)
             return null;
 
         resource = resource.copy();
 
         FluidStack totalDrained = null;
-        for (IFluidHandler handler : subHandlers)
-        {
+        for (IFluidHandler handler : subHandlers) {
             FluidStack drain = handler.drain(resource, doDrain);
-            if (drain != null)
-            {
+            if (drain != null) {
                 if (totalDrained == null)
                     totalDrained = drain;
                 else
@@ -105,28 +95,21 @@
     }
 
     @Override
-    public FluidStack drain(int maxDrain, boolean doDrain)
-    {
+    public FluidStack drain(int maxDrain, boolean doDrain) {
         if (maxDrain == 0)
             return null;
         FluidStack totalDrained = null;
-        for (IFluidHandler handler : subHandlers)
-        {
-            if (totalDrained == null)
-            {
+        for (IFluidHandler handler : subHandlers) {
+            if (totalDrained == null) {
                 totalDrained = handler.drain(maxDrain, doDrain);
-                if (totalDrained != null)
-                {
+                if (totalDrained != null) {
                     maxDrain -= totalDrained.amount;
                 }
-            }
-            else
-            {
+            } else {
                 FluidStack copy = totalDrained.copy();
                 copy.amount = maxDrain;
                 FluidStack drain = handler.drain(copy, doDrain);
-                if (drain != null)
-                {
+                if (drain != null) {
                     totalDrained.amount += drain.amount;
                     maxDrain -= drain.amount;
                 }
