--- ../src-base/minecraft/net/minecraftforge/fluids/capability/templates/VoidFluidHandler.java
+++ ../src-work/minecraft/net/minecraftforge/fluids/capability/templates/VoidFluidHandler.java
@@ -34,58 +34,50 @@
  * VoidFluidHandler is a template fluid handler that can be filled indefinitely without ever getting full.
  * It does not store fluid that gets filled into it, but "destroys" it upon receiving it.
  */
-public class VoidFluidHandler implements IFluidHandler, IFluidTank
-{
+public class VoidFluidHandler implements IFluidHandler, IFluidTank {
     public static final EmptyFluidHandler INSTANCE = new EmptyFluidHandler();
 
-    public VoidFluidHandler() {}
+    public VoidFluidHandler() {
+    }
 
     @Override
-    public IFluidTankProperties[] getTankProperties()
-    {
+    public IFluidTankProperties[] getTankProperties() {
         return EMPTY_TANK_PROPERTIES_ARRAY;
     }
 
     @Override
     @Nullable
-    public FluidStack getFluid()
-    {
+    public FluidStack getFluid() {
         return null;
     }
 
     @Override
-    public int getFluidAmount()
-    {
+    public int getFluidAmount() {
         return 0;
     }
 
     @Override
-    public int getCapacity()
-    {
+    public int getCapacity() {
         return Integer.MAX_VALUE;
     }
 
     @Override
-    public FluidTankInfo getInfo()
-    {
+    public FluidTankInfo getInfo() {
         return EMPTY_TANK_INFO;
     }
 
     @Override
-    public int fill(FluidStack resource, boolean doFill)
-    {
+    public int fill(FluidStack resource, boolean doFill) {
         return resource.amount;
     }
 
     @Override
-    public FluidStack drain(FluidStack resource, boolean doDrain)
-    {
+    public FluidStack drain(FluidStack resource, boolean doDrain) {
         return null;
     }
 
     @Override
-    public FluidStack drain(int maxDrain, boolean doDrain)
-    {
+    public FluidStack drain(int maxDrain, boolean doDrain) {
         return null;
     }
 }
