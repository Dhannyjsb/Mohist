--- ../src-base/minecraft/net/minecraftforge/fluids/capability/templates/FluidHandlerFluidMap.java
+++ ../src-work/minecraft/net/minecraftforge/fluids/capability/templates/FluidHandlerFluidMap.java
@@ -22,50 +22,46 @@
 import com.google.common.collect.Lists;
 import net.minecraftforge.fluids.Fluid;
 import net.minecraftforge.fluids.FluidStack;
-import net.minecraftforge.fluids.capability.IFluidTankProperties;
 import net.minecraftforge.fluids.capability.IFluidHandler;
+import net.minecraftforge.fluids.capability.IFluidTankProperties;
 
-import java.util.*;
+import java.util.Collections;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
 
 /**
  * FluidHandlerFluidMap is a template class for concatenating multiple handlers into one,
  * where each handler is associated with a different fluid.
  */
-public class FluidHandlerFluidMap implements IFluidHandler
-{
+public class FluidHandlerFluidMap implements IFluidHandler {
     protected final Map<Fluid, IFluidHandler> handlers;
 
-    public FluidHandlerFluidMap()
-    {
+    public FluidHandlerFluidMap() {
         // LinkedHashMap to ensure iteration order is consistent.
         this(new LinkedHashMap<Fluid, IFluidHandler>());
     }
 
-    public FluidHandlerFluidMap(Map<Fluid, IFluidHandler> handlers)
-    {
+    public FluidHandlerFluidMap(Map<Fluid, IFluidHandler> handlers) {
         this.handlers = handlers;
     }
 
-    public FluidHandlerFluidMap addHandler(Fluid fluid, IFluidHandler handler)
-    {
+    public FluidHandlerFluidMap addHandler(Fluid fluid, IFluidHandler handler) {
         handlers.put(fluid, handler);
         return this;
     }
 
     @Override
-    public IFluidTankProperties[] getTankProperties()
-    {
+    public IFluidTankProperties[] getTankProperties() {
         List<IFluidTankProperties> tanks = Lists.newArrayList();
-        for (IFluidHandler iFluidHandler : handlers.values())
-        {
+        for (IFluidHandler iFluidHandler : handlers.values()) {
             Collections.addAll(tanks, iFluidHandler.getTankProperties());
         }
         return tanks.toArray(new IFluidTankProperties[tanks.size()]);
     }
 
     @Override
-    public int fill(FluidStack resource, boolean doFill)
-    {
+    public int fill(FluidStack resource, boolean doFill) {
         if (resource == null)
             return 0;
         IFluidHandler handler = handlers.get(resource.getFluid());
@@ -75,8 +71,7 @@
     }
 
     @Override
-    public FluidStack drain(FluidStack resource, boolean doDrain)
-    {
+    public FluidStack drain(FluidStack resource, boolean doDrain) {
         if (resource == null)
             return null;
         IFluidHandler handler = handlers.get(resource.getFluid());
@@ -86,10 +81,8 @@
     }
 
     @Override
-    public FluidStack drain(int maxDrain, boolean doDrain)
-    {
-        for (IFluidHandler handler : handlers.values())
-        {
+    public FluidStack drain(int maxDrain, boolean doDrain) {
+        for (IFluidHandler handler : handlers.values()) {
             FluidStack drain = handler.drain(maxDrain, doDrain);
             if (drain != null)
                 return drain;
