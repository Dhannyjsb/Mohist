--- ../src-base/minecraft/net/minecraftforge/oredict/DyeUtils.java
+++ ../src-work/minecraft/net/minecraftforge/oredict/DyeUtils.java
@@ -20,7 +20,6 @@
 package net.minecraftforge.oredict;
 
 import net.minecraft.item.EnumDyeColor;
-import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import org.apache.commons.lang3.ArrayUtils;
 
@@ -31,35 +30,33 @@
 /**
  * Utility class for working with ore dictionary dyes.
  */
-public class DyeUtils
-{
+public class DyeUtils {
     private static final String[] dyeOredicts = new String[]
-    {
-        "dyeWhite",
-        "dyeOrange",
-        "dyeMagenta",
-        "dyeLightBlue",
-        "dyeYellow",
-        "dyeLime",
-        "dyePink",
-        "dyeGray",
-        "dyeLightGray",
-        "dyeCyan",
-        "dyePurple",
-        "dyeBlue",
-        "dyeBrown",
-        "dyeGreen",
-        "dyeRed",
-        "dyeBlack"
-    };
+            {
+                    "dyeWhite",
+                    "dyeOrange",
+                    "dyeMagenta",
+                    "dyeLightBlue",
+                    "dyeYellow",
+                    "dyeLime",
+                    "dyePink",
+                    "dyeGray",
+                    "dyeLightGray",
+                    "dyeCyan",
+                    "dyePurple",
+                    "dyeBlue",
+                    "dyeBrown",
+                    "dyeGreen",
+                    "dyeRed",
+                    "dyeBlack"
+            };
 
     /**
      * Check if an item stack is a dye.
      * @param stack the item stack
      * @return whether the stack is a dye
      */
-    public static boolean isDye(ItemStack stack)
-    {
+    public static boolean isDye(ItemStack stack) {
         return metaFromStack(stack).isPresent();
     }
 
@@ -68,8 +65,7 @@
      * @param stack the item stack
      * @return an {@link OptionalInt} holding the dye metadata for a dye, or an empty {@link OptionalInt} otherwise
      */
-    public static OptionalInt metaFromStack(ItemStack stack)
-    {
+    public static OptionalInt metaFromStack(ItemStack stack) {
         if (stack.isEmpty()) return OptionalInt.empty();
         return Arrays.stream(OreDictionary.getOreIDs(stack))
                 .mapToObj(OreDictionary::getOreName)
@@ -84,8 +80,7 @@
      * @param stack the item stack
      * @return the dye metadata for a dye, or {@code -1} otherwise
      */
-    public static int rawMetaFromStack(ItemStack stack)
-    {
+    public static int rawMetaFromStack(ItemStack stack) {
         return metaFromStack(stack).orElse(-1);
     }
 
@@ -94,8 +89,7 @@
      * @param stack the item stack
      * @return an {@link OptionalInt} holding the dye damage for a dye, or an empty {@link OptionalInt} otherwise
      */
-    public static OptionalInt dyeDamageFromStack(ItemStack stack)
-    {
+    public static OptionalInt dyeDamageFromStack(ItemStack stack) {
         final OptionalInt meta = metaFromStack(stack);
         return meta.isPresent() ? OptionalInt.of(0xF - meta.getAsInt()) : OptionalInt.empty();
     }
@@ -106,8 +100,7 @@
      * @param stack the item stack
      * @return the dye damage for a dye, or {@code -1} otherwise
      */
-    public static int rawDyeDamageFromStack(ItemStack stack)
-    {
+    public static int rawDyeDamageFromStack(ItemStack stack) {
         return dyeDamageFromStack(stack).orElse(-1);
     }
 
@@ -116,8 +109,7 @@
      * @param stack the item stack
      * @return an {@link Optional} holding the dye color if present, or an empty {@link Optional} otherwise
      */
-    public static Optional<EnumDyeColor> colorFromStack(ItemStack stack)
-    {
+    public static Optional<EnumDyeColor> colorFromStack(ItemStack stack) {
         final OptionalInt meta = metaFromStack(stack);
         return meta.isPresent() ? Optional.of(EnumDyeColor.byMetadata(meta.getAsInt())) : Optional.empty();
     }
