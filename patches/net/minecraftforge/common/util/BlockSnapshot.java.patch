--- ../src-base/minecraft/net/minecraftforge/common/util/BlockSnapshot.java
+++ ../src-work/minecraft/net/minecraftforge/common/util/BlockSnapshot.java
@@ -19,9 +19,6 @@
 
 package net.minecraftforge.common.util;
 
-import java.lang.ref.WeakReference;
-import java.util.Objects;
-
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.tileentity.TileEntity;
@@ -32,6 +29,8 @@
 import net.minecraftforge.fml.common.registry.ForgeRegistries;
 
 import javax.annotation.Nullable;
+import java.lang.ref.WeakReference;
+import java.util.Objects;
 
 /**
  * Represents a captured snapshot of a block which will not change
@@ -40,29 +39,26 @@
  * Unlike Block, which only one object can exist per coordinate, BlockSnapshot
  * can exist multiple times for any given Block.
  */
-public class BlockSnapshot
-{
+public class BlockSnapshot {
     private static final boolean DEBUG = Boolean.parseBoolean(System.getProperty("forge.debugBlockSnapshot", "false"));
 
     private final BlockPos pos;
     private final int dimId;
     @Nullable
+    private final NBTTagCompound nbt;
+    private final ResourceLocation registryName;
+    private final int meta;
+    @Nullable
     private IBlockState replacedBlock;
     private int flag;
     @Nullable
-    private final NBTTagCompound nbt;
-    @Nullable
     private WeakReference<World> world;
-    private final ResourceLocation registryName;
-    private final int meta;
 
-    public BlockSnapshot(World world, BlockPos pos, IBlockState state)
-    {
+    public BlockSnapshot(World world, BlockPos pos, IBlockState state) {
         this(world, pos, state, getTileNBT(world.getTileEntity(pos)));
     }
 
-    public BlockSnapshot(World world, BlockPos pos, IBlockState state, @Nullable NBTTagCompound nbt)
-    {
+    public BlockSnapshot(World world, BlockPos pos, IBlockState state, @Nullable NBTTagCompound nbt) {
         this.setWorld(world);
         this.dimId = world.provider.getDimension();
         this.pos = pos.toImmutable();
@@ -71,30 +67,26 @@
         this.meta = state.getBlock().getMetaFromState(state);
         this.setFlag(3);
         this.nbt = nbt;
-        if (DEBUG)
-        {
+        if (DEBUG) {
             System.out.printf("Created BlockSnapshot - [World: %s ][Location: %d,%d,%d ][Block: %s ][Meta: %d ]", world.getWorldInfo().getWorldName(), pos.getX(), pos.getY(), pos.getZ(), getRegistryName(), getMeta());
         }
     }
 
-    public BlockSnapshot(World world, BlockPos pos, IBlockState state, int flag)
-    {
+    public BlockSnapshot(World world, BlockPos pos, IBlockState state, int flag) {
         this(world, pos, state);
         this.setFlag(flag);
     }
 
     /** @deprecated use {@link #BlockSnapshot(int, BlockPos, ResourceLocation, int, int, NBTTagCompound)} */
     @Deprecated
-    public BlockSnapshot(int dimension, BlockPos pos, String modId, String blockName, int meta, int flag, @Nullable NBTTagCompound nbt)
-    {
+    public BlockSnapshot(int dimension, BlockPos pos, String modId, String blockName, int meta, int flag, @Nullable NBTTagCompound nbt) {
         this(dimension, pos, new ResourceLocation(modId, blockName), meta, flag, nbt);
     }
 
     /**
      * Raw constructor designed for serialization usages.
      */
-    public BlockSnapshot(int dimension, BlockPos pos, ResourceLocation registryName, int meta, int flag, @Nullable NBTTagCompound nbt)
-    {
+    public BlockSnapshot(int dimension, BlockPos pos, ResourceLocation registryName, int meta, int flag, @Nullable NBTTagCompound nbt) {
         this.dimId = dimension;
         this.pos = pos.toImmutable();
         this.setFlag(flag);
@@ -103,18 +95,15 @@
         this.nbt = nbt;
     }
 
-    public static BlockSnapshot getBlockSnapshot(World world, BlockPos pos)
-    {
+    public static BlockSnapshot getBlockSnapshot(World world, BlockPos pos) {
         return new BlockSnapshot(world, pos, world.getBlockState(pos));
     }
 
-    public static BlockSnapshot getBlockSnapshot(World world, BlockPos pos, int flag)
-    {
+    public static BlockSnapshot getBlockSnapshot(World world, BlockPos pos, int flag) {
         return new BlockSnapshot(world, pos, world.getBlockState(pos), flag);
     }
 
-    public static BlockSnapshot readFromNBT(NBTTagCompound tag)
-    {
+    public static BlockSnapshot readFromNBT(NBTTagCompound tag) {
         return new BlockSnapshot(
                 tag.getInteger("dimension"),
                 new BlockPos(tag.getInteger("posX"), tag.getInteger("posY"), tag.getInteger("posZ")),
@@ -125,75 +114,68 @@
     }
 
     @Nullable
-    private static NBTTagCompound getTileNBT(@Nullable TileEntity te)
-    {
+    private static NBTTagCompound getTileNBT(@Nullable TileEntity te) {
         if (te == null) return null;
         NBTTagCompound nbt = new NBTTagCompound();
         te.writeToNBT(nbt);
         return nbt;
     }
 
-    public IBlockState getCurrentBlock()
-    {
+    public IBlockState getCurrentBlock() {
         return getWorld().getBlockState(getPos());
     }
 
-    public World getWorld()
-    {
+    public World getWorld() {
         World world = this.world != null ? this.world.get() : null;
-        if (world == null)
-        {
+        if (world == null) {
             world = FMLCommonHandler.instance().getMinecraftServerInstance().getWorld(getDimId());
             this.world = new WeakReference<World>(world);
         }
         return world;
     }
 
-    public IBlockState getReplacedBlock()
-    {
-        if (this.replacedBlock == null)
-        {
+    public void setWorld(World world) {
+        this.world = new WeakReference<World>(world);
+    }
+
+    public IBlockState getReplacedBlock() {
+        if (this.replacedBlock == null) {
             this.replacedBlock = ForgeRegistries.BLOCKS.getValue(getRegistryName()).getStateFromMeta(getMeta());
         }
         return this.replacedBlock;
     }
 
+    public void setReplacedBlock(IBlockState replacedBlock) {
+        this.replacedBlock = replacedBlock;
+    }
+
     @Nullable
-    public TileEntity getTileEntity()
-    {
+    public TileEntity getTileEntity() {
         return getNbt() != null ? TileEntity.create(getWorld(), getNbt()) : null;
     }
 
-    public boolean restore()
-    {
+    public boolean restore() {
         return restore(false);
     }
 
-    public boolean restore(boolean force)
-    {
+    public boolean restore(boolean force) {
         return restore(force, true);
     }
 
-    public boolean restore(boolean force, boolean notifyNeighbors)
-    {
+    public boolean restore(boolean force, boolean notifyNeighbors) {
         return restoreToLocation(getWorld(), getPos(), force, notifyNeighbors);
     }
 
-    public boolean restoreToLocation(World world, BlockPos pos, boolean force, boolean notifyNeighbors)
-    {
+    public boolean restoreToLocation(World world, BlockPos pos, boolean force, boolean notifyNeighbors) {
         IBlockState current = getCurrentBlock();
         IBlockState replaced = getReplacedBlock();
 
         int flags = notifyNeighbors ? Constants.BlockFlags.DEFAULT : Constants.BlockFlags.SEND_TO_CLIENTS;
 
-        if (current.getBlock() != replaced.getBlock() || current.getBlock().getMetaFromState(current) != replaced.getBlock().getMetaFromState(replaced))
-        {
-            if (force)
-            {
+        if (current.getBlock() != replaced.getBlock() || current.getBlock().getMetaFromState(current) != replaced.getBlock().getMetaFromState(replaced)) {
+            if (force) {
                 world.setBlockState(pos, replaced, flags);
-            }
-            else
-            {
+            } else {
                 return false;
             }
         }
@@ -202,25 +184,21 @@
         world.notifyBlockUpdate(pos, current, replaced, flags);
 
         TileEntity te = null;
-        if (getNbt() != null)
-        {
+        if (getNbt() != null) {
             te = world.getTileEntity(pos);
-            if (te != null)
-            {
+            if (te != null) {
                 te.readFromNBT(getNbt());
                 te.markDirty();
             }
         }
 
-        if (DEBUG)
-        {
+        if (DEBUG) {
             System.out.printf("Restored BlockSnapshot with data [World: %s ][Location: %d,%d,%d ][Meta: %d ][Block: %s ][TileEntity: %s ][force: %s ][notifyNeighbors: %s]", world.getWorldInfo().getWorldName(), pos.getX(), pos.getY(), pos.getZ(), replaced.getBlock().getMetaFromState(replaced), replaced.getBlock().delegate.name(), te, force, notifyNeighbors);
         }
         return true;
     }
 
-    public void writeToNBT(NBTTagCompound compound)
-    {
+    public void writeToNBT(NBTTagCompound compound) {
         compound.setString("blockMod", getRegistryName().getResourceDomain());
         compound.setString("blockName", getRegistryName().getResourcePath());
         compound.setInteger("posX", getPos().getX());
@@ -232,54 +210,43 @@
 
         compound.setBoolean("hasTE", getNbt() != null);
 
-        if (getNbt() != null)
-        {
+        if (getNbt() != null) {
             compound.setTag("tileEntity", getNbt());
         }
     }
 
     @Override
-    public boolean equals(Object obj)
-    {
-        if (obj == this)
-        {
+    public boolean equals(Object obj) {
+        if (obj == this) {
             return true;
         }
-        if (obj == null)
-        {
+        if (obj == null) {
             return false;
         }
-        if (getClass() != obj.getClass())
-        {
+        if (getClass() != obj.getClass()) {
             return false;
         }
         final BlockSnapshot other = (BlockSnapshot) obj;
-        if (this.getMeta() != other.getMeta())
-        {
+        if (this.getMeta() != other.getMeta()) {
             return false;
         }
-        if (this.getDimId() != other.getDimId())
-        {
+        if (this.getDimId() != other.getDimId()) {
             return false;
         }
-        if (!this.getPos().equals(other.getPos()))
-        {
+        if (!this.getPos().equals(other.getPos())) {
             return false;
         }
-        if (!this.getRegistryName().equals(other.getRegistryName()))
-        {
+        if (!this.getRegistryName().equals(other.getRegistryName())) {
             return false;
         }
-        if (!Objects.equals(this.getNbt(), other.getNbt()))
-        {
+        if (!Objects.equals(this.getNbt(), other.getNbt())) {
             return false;
         }
         return true;
     }
 
     @Override
-    public int hashCode()
-    {
+    public int hashCode() {
         int hash = 7;
         hash = 73 * hash + this.getMeta();
         hash = 73 * hash + this.getDimId();
@@ -289,22 +256,32 @@
         return hash;
     }
 
-    public BlockPos getPos() { return pos; }
+    public BlockPos getPos() {
+        return pos;
+    }
 
-    public int getDimId() { return dimId; }
+    public int getDimId() {
+        return dimId;
+    }
 
-    public void setReplacedBlock(IBlockState replacedBlock) { this.replacedBlock = replacedBlock; }
+    public int getFlag() {
+        return flag;
+    }
 
-    public int getFlag() { return flag; }
+    public void setFlag(int flag) {
+        this.flag = flag;
+    }
 
-    public void setFlag(int flag) { this.flag = flag; }
-
     @Nullable
-    public NBTTagCompound getNbt() { return nbt; }
+    public NBTTagCompound getNbt() {
+        return nbt;
+    }
 
-    public void setWorld(World world) { this.world = new WeakReference<World>(world); }
+    public ResourceLocation getRegistryName() {
+        return registryName;
+    }
 
-    public ResourceLocation getRegistryName() { return registryName; }
-
-    public int getMeta() { return meta; }
+    public int getMeta() {
+        return meta;
+    }
 }
