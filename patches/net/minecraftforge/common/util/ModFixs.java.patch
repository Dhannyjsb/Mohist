--- ../src-base/minecraft/net/minecraftforge/common/util/ModFixs.java
+++ ../src-work/minecraft/net/minecraftforge/common/util/ModFixs.java
@@ -19,59 +19,48 @@
 
 package net.minecraftforge.common.util;
 
-import java.util.List;
-import java.util.Map;
-
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
-
 import net.minecraft.util.datafix.IFixType;
 import net.minecraft.util.datafix.IFixableData;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
-public class ModFixs
-{
+import java.util.List;
+import java.util.Map;
+
+public class ModFixs {
     private static final Logger LOGGER = LogManager.getLogger();
     final String mod;
     final int version;
     private final Map<IFixType, List<IFixableData>> fixes = Maps.newHashMap();
 
-    ModFixs(String mod, int version)
-    {
+    ModFixs(String mod, int version) {
         this.mod = mod;
         this.version = version;
     }
 
-    public List<IFixableData> getFixes(IFixType type)
-    {
+    public List<IFixableData> getFixes(IFixType type) {
         return this.fixes.computeIfAbsent(type, k -> Lists.newArrayList());
     }
 
-    public void registerFix(IFixType type, IFixableData fixer)
-    {
+    public void registerFix(IFixType type, IFixableData fixer) {
         List<IFixableData> list = getFixes(type);
         int ver = fixer.getFixVersion();
 
-        if (ver > this.version)
-        {
+        if (ver > this.version) {
             LOGGER.warn("[{}] Ignored fix registered for version: {} as the DataVersion of the game is: {}", mod, ver, this.version);
             return;
         }
 
-        if (!list.isEmpty() && list.get(list.size()-1).getFixVersion() > ver)
-        {
-            for (int x = 0; x < list.size(); ++x)
-            {
-                if (list.get(x).getFixVersion() > ver)
-                {
+        if (!list.isEmpty() && list.get(list.size() - 1).getFixVersion() > ver) {
+            for (int x = 0; x < list.size(); ++x) {
+                if (list.get(x).getFixVersion() > ver) {
                     list.add(x, fixer);
                     break;
                 }
             }
-        }
-        else
+        } else
             list.add(fixer);
     }
 
