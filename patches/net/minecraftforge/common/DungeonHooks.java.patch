--- ../src-base/minecraft/net/minecraftforge/common/DungeonHooks.java
+++ ../src-work/minecraft/net/minecraftforge/common/DungeonHooks.java
@@ -19,16 +19,21 @@
 
 package net.minecraftforge.common;
 
-import java.util.ArrayList;
-import java.util.Random;
-
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.WeightedRandom;
 
-public class DungeonHooks
-{
+import java.util.ArrayList;
+import java.util.Random;
+
+public class DungeonHooks {
     private static ArrayList<DungeonMob> dungeonMobs = new ArrayList<DungeonMob>();
 
+    static {
+        addDungeonMob(new ResourceLocation("skeleton"), 100);
+        addDungeonMob(new ResourceLocation("zombie"), 200);
+        addDungeonMob(new ResourceLocation("spider"), 100);
+    }
+
     /**
      * Adds a mob to the possible list of creatures the spawner will create.
      * If the mob is already in the spawn list, the rarity will be added to the existing one,
@@ -43,17 +48,13 @@
      *        Meaning, Zombies are twice as common as spiders or skeletons.
      * @return The new rarity of the monster,
      */
-    public static float addDungeonMob(ResourceLocation name, int rarity)
-    {
-        if (rarity <= 0)
-        {
+    public static float addDungeonMob(ResourceLocation name, int rarity) {
+        if (rarity <= 0) {
             throw new IllegalArgumentException("Rarity must be greater then zero");
         }
 
-        for (DungeonMob mob : dungeonMobs)
-        {
-            if (name.equals(mob.type))
-            {
+        for (DungeonMob mob : dungeonMobs) {
+            if (name.equals(mob.type)) {
                 return mob.itemWeight += rarity;
             }
         }
@@ -68,12 +69,9 @@
      * @param name The name of the mob to remove
      * @return The rarity of the removed mob, prior to being removed.
      */
-    public static int removeDungeonMob(ResourceLocation name)
-    {
-        for (DungeonMob mob : dungeonMobs)
-        {
-            if (name.equals(mob.type))
-            {
+    public static int removeDungeonMob(ResourceLocation name) {
+        for (DungeonMob mob : dungeonMobs) {
+            if (name.equals(mob.type)) {
                 dungeonMobs.remove(mob);
                 return mob.itemWeight;
             }
@@ -86,33 +84,22 @@
      * @param rand World generation random number generator
      * @return The mob name
      */
-    public static ResourceLocation getRandomDungeonMob(Random rand)
-    {
+    public static ResourceLocation getRandomDungeonMob(Random rand) {
         DungeonMob mob = WeightedRandom.getRandomItem(rand, dungeonMobs);
         return mob.type;
     }
 
-
-    public static class DungeonMob extends WeightedRandom.Item
-    {
+    public static class DungeonMob extends WeightedRandom.Item {
         public ResourceLocation type;
-        public DungeonMob(int weight, ResourceLocation type)
-        {
+
+        public DungeonMob(int weight, ResourceLocation type) {
             super(weight);
             this.type = type;
         }
 
         @Override
-        public boolean equals(Object target)
-        {
-            return target instanceof DungeonMob && type.equals(((DungeonMob)target).type);
+        public boolean equals(Object target) {
+            return target instanceof DungeonMob && type.equals(((DungeonMob) target).type);
         }
     }
-
-    static
-    {
-        addDungeonMob(new ResourceLocation("skeleton"), 100);
-        addDungeonMob(new ResourceLocation("zombie"),   200);
-        addDungeonMob(new ResourceLocation("spider"),   100);
-    }
 }
