--- ../src-base/minecraft/net/minecraftforge/common/config/TypeAdapters.java
+++ ../src-work/minecraft/net/minecraftforge/common/config/TypeAdapters.java
@@ -22,52 +22,46 @@
 //=========================================================
 // Run away thar' be dragons!
 //=========================================================
-import java.util.Arrays;
 
-import com.google.common.primitives.Booleans;
-import com.google.common.primitives.Bytes;
-import com.google.common.primitives.Doubles;
-import com.google.common.primitives.Floats;
-import com.google.common.primitives.Ints;
-import com.google.common.primitives.Shorts;
-
+import com.google.common.primitives.*;
 import net.minecraftforge.common.config.Property.Type;
 
-class TypeAdapters
-{
-   /*
-    *    boolean, boolean[], Boolean, Boolean[]
-    *    float, float[], Float, Float[]
-    *    double, double[], Double, Double[]
-    *    byte, byte[], Byte, Byte[]
-    *    char, char[], Character, Character[]
-    *    short, short[], Short, Short[]
-    *    int, int[], Integer, Integer[]
-    *    String, String[]
-    */
+import java.util.Arrays;
+
+class TypeAdapters {
+    /*
+     *    boolean, boolean[], Boolean, Boolean[]
+     *    float, float[], Float, Float[]
+     *    double, double[], Double, Double[]
+     *    byte, byte[], Byte, Byte[]
+     *    char, char[], Character, Character[]
+     *    short, short[], Short, Short[]
+     *    int, int[], Integer, Integer[]
+     *    String, String[]
+     */
     static ITypeAdapter bool = new ITypeAdapter() {
         @Override
         public Object getValue(Property prop) {
             return prop.getBoolean();
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValue((Boolean)value);
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValue((Boolean) value);
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValue((Boolean)value);
+        public void setValue(Property property, Object value) {
+            property.setValue((Boolean) value);
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.BOOLEAN;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return false;
         }
     };
@@ -76,24 +70,24 @@
         public Object getValue(Property prop) {
             return prop.getBooleanList();
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValues((boolean[])value);
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValues((boolean[]) value);
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValues((boolean[])value);
+        public void setValue(Property property, Object value) {
+            property.setValues((boolean[]) value);
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.BOOLEAN;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return true;
         }
     };
@@ -102,24 +96,24 @@
         public Object getValue(Property prop) {
             return Boolean.valueOf(prop.getBoolean());
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValue((Boolean)value);
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValue((Boolean) value);
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValue((Boolean)value);
+        public void setValue(Property property, Object value) {
+            property.setValue((Boolean) value);
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.BOOLEAN;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return false;
         }
     };
@@ -128,50 +122,50 @@
         public Object getValue(Property prop) {
             return Booleans.asList(prop.getBooleanList()).toArray(new Boolean[prop.getBooleanList().length]);
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
+        public void setDefaultValue(Property property, Object value) {
             property.setDefaultValues(Booleans.toArray(Arrays.asList((Boolean[]) value)));
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
+        public void setValue(Property property, Object value) {
             property.setValues(Booleans.toArray(Arrays.asList((Boolean[]) value)));
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.BOOLEAN;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return true;
         }
     };
     static ITypeAdapter flt = new ITypeAdapter() {
         @Override
         public Object getValue(Property prop) {
-            return (float)prop.getDouble();
+            return (float) prop.getDouble();
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValue((Float)value);
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValue((Float) value);
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValue((Float)value);
+        public void setValue(Property property, Object value) {
+            property.setValue((Float) value);
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.DOUBLE;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return false;
         }
     };
@@ -180,50 +174,50 @@
         public Object getValue(Property prop) {
             return Floats.toArray(Doubles.asList(prop.getDoubleList()));
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValues(Doubles.toArray(Floats.asList((float[])value)));
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValues(Doubles.toArray(Floats.asList((float[]) value)));
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValues(Doubles.toArray(Floats.asList((float[])value)));
+        public void setValue(Property property, Object value) {
+            property.setValues(Doubles.toArray(Floats.asList((float[]) value)));
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.DOUBLE;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return true;
         }
     };
     static ITypeAdapter Flt = new ITypeAdapter() {
         @Override
         public Object getValue(Property prop) {
-            return Float.valueOf((float)prop.getDouble());
+            return Float.valueOf((float) prop.getDouble());
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValue((Float)value);
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValue((Float) value);
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValue((Float)value);
+        public void setValue(Property property, Object value) {
+            property.setValue((Float) value);
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.DOUBLE;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return false;
         }
     };
@@ -232,51 +226,50 @@
         public Object getValue(Property prop) {
             return Floats.asList(Floats.toArray(Doubles.asList(prop.getDoubleList()))).toArray(new Float[prop.getDoubleList().length]);
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValues(Doubles.toArray(Arrays.asList((Float[])value)));
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValues(Doubles.toArray(Arrays.asList((Float[]) value)));
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValues(Doubles.toArray(Arrays.asList((Float[])value)));
+        public void setValue(Property property, Object value) {
+            property.setValues(Doubles.toArray(Arrays.asList((Float[]) value)));
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.DOUBLE;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return true;
         }
     };
     static ITypeAdapter dbl = new ITypeAdapter() {
         @Override
-        public Object getValue(Property prop)
-        {
+        public Object getValue(Property prop) {
             return prop.getDouble();
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValue((Double)value);
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValue((Double) value);
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValue((Double)value);
+        public void setValue(Property property, Object value) {
+            property.setValue((Double) value);
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.DOUBLE;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return false;
         }
     };
@@ -287,25 +280,22 @@
         }
 
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValues((double[])value);
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValues((double[]) value);
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValues((double[])value);
+        public void setValue(Property property, Object value) {
+            property.setValues((double[]) value);
         }
 
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.DOUBLE;
         }
 
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return true;
         }
     };
@@ -314,24 +304,24 @@
         public Object getValue(Property prop) {
             return Double.valueOf(prop.getDouble());
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValue((Double)value);
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValue((Double) value);
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
+        public void setValue(Property property, Object value) {
             property.setValue((Double) value);
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.DOUBLE;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return false;
         }
     };
@@ -340,51 +330,50 @@
         public Object getValue(Property prop) {
             return Doubles.asList(prop.getDoubleList()).toArray(new Double[prop.getDoubleList().length]);
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValues(Doubles.toArray(Arrays.asList((Double[])value)));
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValues(Doubles.toArray(Arrays.asList((Double[]) value)));
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValues(Doubles.toArray(Arrays.asList((Double[])value)));
+        public void setValue(Property property, Object value) {
+            property.setValues(Doubles.toArray(Arrays.asList((Double[]) value)));
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.DOUBLE;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return true;
         }
     };
     static ITypeAdapter byt = new ITypeAdapter() {
         @Override
-        public Object getValue(Property prop)
-        {
-            return (byte)prop.getInt();
+        public Object getValue(Property prop) {
+            return (byte) prop.getInt();
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValue((Byte)value);
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValue((Byte) value);
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValue((Byte)value);
+        public void setValue(Property property, Object value) {
+            property.setValue((Byte) value);
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.INTEGER;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return false;
         }
     };
@@ -393,50 +382,50 @@
         public Object getValue(Property prop) {
             return Bytes.toArray(Ints.asList(prop.getIntList()));
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValues(Ints.toArray(Bytes.asList((byte[])value)));
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValues(Ints.toArray(Bytes.asList((byte[]) value)));
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValues(Ints.toArray(Bytes.asList((byte[])value)));
+        public void setValue(Property property, Object value) {
+            property.setValues(Ints.toArray(Bytes.asList((byte[]) value)));
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.INTEGER;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return true;
         }
     };
     static ITypeAdapter Byt = new ITypeAdapter() {
         @Override
         public Object getValue(Property prop) {
-            return Byte.valueOf((byte)prop.getInt());
+            return Byte.valueOf((byte) prop.getInt());
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValue((Byte)value);
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValue((Byte) value);
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValue((Byte)value);
+        public void setValue(Property property, Object value) {
+            property.setValue((Byte) value);
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.INTEGER;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return false;
         }
     };
@@ -445,51 +434,51 @@
         public Object getValue(Property prop) {
             return Bytes.asList(Bytes.toArray(Ints.asList(prop.getIntList()))).toArray(new Byte[prop.getIntList().length]);
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
+        public void setDefaultValue(Property property, Object value) {
             property.setDefaultValues(Ints.toArray(Arrays.asList((Byte[]) value)));
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
+        public void setValue(Property property, Object value) {
             property.setValues(Ints.toArray(Arrays.asList((Byte[]) value)));
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.INTEGER;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return true;
         }
     };
     static ITypeAdapter chr = new ITypeAdapter() {
-        
+
         @Override
         public Object getValue(Property prop) {
-            return (char)prop.getInt();
+            return (char) prop.getInt();
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValue((Character)value);
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValue((Character) value);
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValue((Character)value);
+        public void setValue(Property property, Object value) {
+            property.setValue((Character) value);
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.INTEGER;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return false;
         }
     };
@@ -501,62 +490,60 @@
                 ret[x] = v[x];
             return ret;
         }
-        
+
         @Override
         public Object getValue(Property prop) {
             int[] v = prop.getIntList();
             char[] ret = new char[v.length];
             for (int x = 0; x < v.length; x++)
-                ret[x] = (char)v[x];
+                ret[x] = (char) v[x];
             return ret;
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValues(toPrim((char[])value));
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValues(toPrim((char[]) value));
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValues(toPrim((char[])value));
+        public void setValue(Property property, Object value) {
+            property.setValues(toPrim((char[]) value));
         }
 
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.INTEGER;
         }
 
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return true;
         }
     };
     static ITypeAdapter Chr = new ITypeAdapter() {
-        
+
         @Override
         public Object getValue(Property prop) {
-            return Character.valueOf((char)prop.getInt());
+            return Character.valueOf((char) prop.getInt());
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValue((Character)value);
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValue((Character) value);
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValue((Character)value);
+        public void setValue(Property property, Object value) {
+            property.setValue((Character) value);
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.INTEGER;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return false;
         }
     };
@@ -568,35 +555,33 @@
                 ret[x] = v[x] == null ? 0 : v[x];
             return ret;
         }
-        
+
         @Override
         public Object getValue(Property prop) {
             int[] v = prop.getIntList();
             Character[] ret = new Character[v.length];
             for (int x = 0; x < v.length; x++)
-                ret[x] = Character.valueOf((char)v[x]);
+                ret[x] = Character.valueOf((char) v[x]);
             return ret;
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValues(toPrim((Character[])value));
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValues(toPrim((Character[]) value));
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
+        public void setValue(Property property, Object value) {
             property.setValues(toPrim((Character[]) value));
         }
 
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.INTEGER;
         }
 
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return true;
         }
 
@@ -604,26 +589,26 @@
     static ITypeAdapter shrt = new ITypeAdapter() {
         @Override
         public Object getValue(Property prop) {
-            return (short)prop.getInt();
+            return (short) prop.getInt();
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValue((Short)value);
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValue((Short) value);
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValue((Short)value);
+        public void setValue(Property property, Object value) {
+            property.setValue((Short) value);
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.INTEGER;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return false;
         }
     };
@@ -632,51 +617,51 @@
         public Object getValue(Property prop) {
             return Shorts.toArray(Ints.asList(prop.getIntList()));
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValues(Ints.toArray(Shorts.asList((short[])value)));
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValues(Ints.toArray(Shorts.asList((short[]) value)));
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValues(Ints.toArray(Shorts.asList((short[])value)));
+        public void setValue(Property property, Object value) {
+            property.setValues(Ints.toArray(Shorts.asList((short[]) value)));
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.INTEGER;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return true;
         }
-        
+
     };
     static ITypeAdapter Shrt = new ITypeAdapter() {
         @Override
         public Object getValue(Property prop) {
-            return Short.valueOf((short)prop.getInt());
+            return Short.valueOf((short) prop.getInt());
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValue((Short)value);
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValue((Short) value);
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValue((Short)value);
+        public void setValue(Property property, Object value) {
+            property.setValue((Short) value);
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.INTEGER;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return false;
         }
     };
@@ -686,27 +671,27 @@
             int[] v = prop.getIntList();
             Short[] ret = new Short[v.length];
             for (int x = 0; x < ret.length; x++)
-                ret[x] = Short.valueOf((short)v[x]);
+                ret[x] = Short.valueOf((short) v[x]);
             return ret;
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValues(Ints.toArray(Arrays.asList((Short[])value)));
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValues(Ints.toArray(Arrays.asList((Short[]) value)));
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValues(Ints.toArray(Arrays.asList((Short[])value)));
+        public void setValue(Property property, Object value) {
+            property.setValues(Ints.toArray(Arrays.asList((Short[]) value)));
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.INTEGER;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return true;
         }
     };
@@ -715,24 +700,24 @@
         public Object getValue(Property prop) {
             return prop.getInt();
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValue((Integer)value);
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValue((Integer) value);
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValue((Integer)value);
+        public void setValue(Property property, Object value) {
+            property.setValue((Integer) value);
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.INTEGER;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return false;
         }
     };
@@ -741,50 +726,50 @@
         public Object getValue(Property prop) {
             return prop.getIntList();
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValues((int[])value);
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValues((int[]) value);
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValues((int[])value);
+        public void setValue(Property property, Object value) {
+            property.setValues((int[]) value);
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.INTEGER;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return true;
         }
     };
     static ITypeAdapter Int = new ITypeAdapter() {
         @Override
         public Object getValue(Property prop) {
-            return (Integer)prop.getInt();
+            return (Integer) prop.getInt();
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValue((Integer)value);
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValue((Integer) value);
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValue((Integer)value);            
+        public void setValue(Property property, Object value) {
+            property.setValue((Integer) value);
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.INTEGER;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return false;
         }
     };
@@ -793,24 +778,24 @@
         public Object getValue(Property prop) {
             return Ints.asList(prop.getIntList()).toArray(new Integer[prop.getIntList().length]);
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValues(Ints.toArray(Arrays.asList((Integer[])value)));
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValues(Ints.toArray(Arrays.asList((Integer[]) value)));
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValues(Ints.toArray(Arrays.asList((Integer[])value)));
+        public void setValue(Property property, Object value) {
+            property.setValues(Ints.toArray(Arrays.asList((Integer[]) value)));
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.INTEGER;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return true;
         }
     };
@@ -819,24 +804,24 @@
         public Object getValue(Property prop) {
             return prop.getString();
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValue((String)value);
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValue((String) value);
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValue((String)value);
+        public void setValue(Property property, Object value) {
+            property.setValue((String) value);
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.STRING;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return false;
         }
     };
@@ -845,24 +830,24 @@
         public Object getValue(Property prop) {
             return prop.getStringList();
         }
+
         @Override
-        public void setDefaultValue(Property property, Object value)
-        {
-            property.setDefaultValues((String[])value);
+        public void setDefaultValue(Property property, Object value) {
+            property.setDefaultValues((String[]) value);
         }
+
         @Override
-        public void setValue(Property property, Object value)
-        {
-            property.setValues((String[])value);
+        public void setValue(Property property, Object value) {
+            property.setValues((String[]) value);
         }
+
         @Override
-        public Type getType()
-        {
+        public Type getType() {
             return Type.STRING;
         }
+
         @Override
-        public boolean isArrayAdapter()
-        {
+        public boolean isArrayAdapter() {
             return true;
         }
     };
