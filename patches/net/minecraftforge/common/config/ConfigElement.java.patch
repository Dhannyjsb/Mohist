--- ../src-base/minecraft/net/minecraftforge/common/config/ConfigElement.java
+++ ../src-work/minecraft/net/minecraftforge/common/config/ConfigElement.java
@@ -19,56 +19,103 @@
 
 package net.minecraftforge.common.config;
 
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Set;
-import java.util.regex.Pattern;
-
 import com.google.common.base.Strings;
 import com.google.common.collect.Lists;
-
 import net.minecraftforge.fml.client.config.ConfigGuiType;
 import net.minecraftforge.fml.client.config.DummyConfigElement.DummyCategoryElement;
 import net.minecraftforge.fml.client.config.GuiConfigEntries.IConfigEntry;
 import net.minecraftforge.fml.client.config.GuiEditArrayEntries.IArrayEntry;
 import net.minecraftforge.fml.client.config.IConfigElement;
 
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
+import java.util.regex.Pattern;
+
 /**
  * This class bridges the gap between the FML config GUI classes and the Forge Configuration classes.
  */
-public class ConfigElement implements IConfigElement
-{
+public class ConfigElement implements IConfigElement {
     private Property prop;
     private Property.Type type;
     private boolean isProperty;
     private ConfigCategory category;
     private boolean categoriesFirst = true;
 
-    public ConfigElement(ConfigCategory category)
-    {
+    public ConfigElement(ConfigCategory category) {
         this.category = category;
         isProperty = false;
     }
 
-    public ConfigElement(Property prop)
-    {
+    public ConfigElement(Property prop) {
         this.prop = prop;
         this.type = prop.getType();
         this.isProperty = true;
     }
 
-    public ConfigElement listCategoriesFirst(boolean categoriesFirst)
-    {
+    public static ConfigGuiType getType(Property prop) {
+        return prop.getType() == Property.Type.BOOLEAN ? ConfigGuiType.BOOLEAN : prop.getType() == Property.Type.DOUBLE ? ConfigGuiType.DOUBLE :
+                prop.getType() == Property.Type.INTEGER ? ConfigGuiType.INTEGER : prop.getType() == Property.Type.COLOR ? ConfigGuiType.COLOR :
+                        prop.getType() == Property.Type.MOD_ID ? ConfigGuiType.MOD_ID : ConfigGuiType.STRING;
+    }
+
+    /**
+     * Provides a ConfigElement derived from the annotation-based config system
+     * @param configClass the class which contains the configuration
+     * @return A ConfigElement based on the described category.
+     */
+    public static IConfigElement from(Class<?> configClass) {
+        Config annotation = configClass.getAnnotation(Config.class);
+        if (annotation == null)
+            throw new RuntimeException(String.format("The class '%s' has no @Config annotation!", configClass.getName()));
+
+        Configuration config = ConfigManager.getConfiguration(annotation.modid(), annotation.name());
+        if (config == null) {
+            String error = String.format("The configuration '%s' of mod '%s' isn't loaded with the ConfigManager!", annotation.name(), annotation.modid());
+            throw new RuntimeException(error);
+        }
+
+        String name = Strings.isNullOrEmpty(annotation.name()) ? annotation.modid() : annotation.name();
+        String langKey = name;
+        Config.LangKey langKeyAnnotation = configClass.getAnnotation(Config.LangKey.class);
+        if (langKeyAnnotation != null) {
+            langKey = langKeyAnnotation.value();
+        }
+
+        if (annotation.category().isEmpty()) {
+            List<IConfigElement> elements = Lists.newArrayList();
+            Set<String> catNames = config.getCategoryNames();
+            for (String catName : catNames) {
+                if (catName.isEmpty())
+                    continue;
+                ConfigCategory category = config.getCategory(catName);
+                if (category.isChild())
+                    continue;
+                DummyCategoryElement element = new DummyCategoryElement(category.getName(), category.getLanguagekey(), new ConfigElement(category).getChildElements());
+                element.setRequiresMcRestart(category.requiresMcRestart());
+                element.setRequiresWorldRestart(category.requiresWorldRestart());
+                elements.add(element);
+            }
+
+            return new DummyCategoryElement(name, langKey, elements);
+        } else {
+            ConfigCategory category = config.getCategory(annotation.category());
+            DummyCategoryElement element = new DummyCategoryElement(name, langKey, new ConfigElement(category).getChildElements());
+            element.setRequiresMcRestart(category.requiresMcRestart());
+            element.setRequiresWorldRestart(category.requiresWorldRestart());
+            return element;
+        }
+    }
+
+    public ConfigElement listCategoriesFirst(boolean categoriesFirst) {
         this.categoriesFirst = categoriesFirst;
         return this;
     }
 
     @Override
-    public List<IConfigElement> getChildElements()
-    {
-        if (!isProperty)
-        {
+    public List<IConfigElement> getChildElements() {
+        if (!isProperty) {
             List<IConfigElement> elements = new ArrayList<IConfigElement>();
             Iterator<ConfigCategory> ccI = category.getChildren().iterator();
             Iterator<Property> pI = category.getOrderedValues().iterator();
@@ -76,23 +123,20 @@
             int index = 0;
 
             if (categoriesFirst)
-                while (ccI.hasNext())
-                {
+                while (ccI.hasNext()) {
                     ConfigElement temp = new ConfigElement(ccI.next());
                     if (temp.showInGui()) // don't bother adding elements that shouldn't show
                         elements.add(temp);
                 }
 
-            while (pI.hasNext())
-            {
+            while (pI.hasNext()) {
                 ConfigElement temp = new ConfigElement(pI.next());
                 if (temp.showInGui())
                     elements.add(temp);
             }
 
             if (!categoriesFirst)
-                while (ccI.hasNext())
-                {
+                while (ccI.hasNext()) {
                     ConfigElement temp = new ConfigElement(ccI.next());
                     if (temp.showInGui())
                         elements.add(temp);
@@ -104,210 +148,164 @@
     }
 
     @Override
-    public String getName()
-    {
+    public String getName() {
         return isProperty ? prop.getName() : category.getName();
     }
 
     @Override
-    public boolean isProperty()
-    {
+    public boolean isProperty() {
         return isProperty;
     }
 
     @Override
-    public Class<? extends IConfigEntry> getConfigEntryClass()
-    {
+    public Class<? extends IConfigEntry> getConfigEntryClass() {
         return isProperty ? prop.getConfigEntryClass() : category.getConfigEntryClass();
     }
 
     @Override
-    public Class<? extends IArrayEntry> getArrayEntryClass()
-    {
+    public Class<? extends IArrayEntry> getArrayEntryClass() {
         return isProperty ? prop.getArrayEntryClass() : null;
     }
 
     @Override
-    public String getQualifiedName()
-    {
+    public String getQualifiedName() {
         return isProperty ? prop.getName() : category.getQualifiedName();
     }
 
     @Override
-    public ConfigGuiType getType()
-    {
+    public ConfigGuiType getType() {
         return isProperty ? getType(this.prop) : ConfigGuiType.CONFIG_CATEGORY;
     }
 
-    public static ConfigGuiType getType(Property prop)
-    {
-        return prop.getType() == Property.Type.BOOLEAN ? ConfigGuiType.BOOLEAN : prop.getType() == Property.Type.DOUBLE ? ConfigGuiType.DOUBLE :
-            prop.getType() == Property.Type.INTEGER ? ConfigGuiType.INTEGER : prop.getType() == Property.Type.COLOR ? ConfigGuiType.COLOR :
-            prop.getType() == Property.Type.MOD_ID ? ConfigGuiType.MOD_ID : ConfigGuiType.STRING;
-    }
-
     @Override
-    public boolean isList()
-    {
+    public boolean isList() {
         return isProperty && prop.isList();
     }
 
     @Override
-    public boolean isListLengthFixed()
-    {
+    public boolean isListLengthFixed() {
         return isProperty && prop.isListLengthFixed();
     }
 
     @Override
-    public int getMaxListLength()
-    {
+    public int getMaxListLength() {
         return isProperty ? prop.getMaxListLength() : -1;
     }
 
     @Override
-    public String getComment()
-    {
+    public String getComment() {
         return isProperty ? prop.getComment() : category.getComment();
     }
 
     @Override
-    public boolean isDefault()
-    {
+    public boolean isDefault() {
         return !isProperty || prop.isDefault();
     }
 
     @Override
-    public void setToDefault()
-    {
+    public void setToDefault() {
         if (isProperty)
             prop.setToDefault();
     }
 
     @Override
-    public boolean requiresWorldRestart()
-    {
+    public boolean requiresWorldRestart() {
         return isProperty ? prop.requiresWorldRestart() : category.requiresWorldRestart();
     }
 
     @Override
-    public boolean showInGui()
-    {
+    public boolean showInGui() {
         return isProperty ? prop.showInGui() : category.showInGui();
     }
 
     @Override
-    public boolean requiresMcRestart()
-    {
+    public boolean requiresMcRestart() {
         return isProperty ? prop.requiresMcRestart() : category.requiresMcRestart();
     }
 
     @Override
-    public String[] getValidValues()
-    {
+    public String[] getValidValues() {
         return isProperty ? prop.getValidValues() : null;
     }
 
     @Override
-    public String[] getValidValuesDisplay()
-    {
+    public String[] getValidValuesDisplay() {
         return isProperty ? prop.getValidValuesDisplay() : null;
     }
 
     @Override
-    public String getLanguageKey()
-    {
+    public String getLanguageKey() {
         return isProperty ? prop.getLanguageKey() : category.getLanguagekey();
     }
 
     @Override
-    public Object getDefault()
-    {
+    public Object getDefault() {
         return isProperty ? prop.getDefault() : null;
     }
 
     @Override
-    public Object[] getDefaults()
-    {
-        if (isProperty)
-        {
+    public Object[] getDefaults() {
+        if (isProperty) {
             String[] aVal = prop.getDefaults();
-            if (type == Property.Type.BOOLEAN)
-            {
+            if (type == Property.Type.BOOLEAN) {
                 Boolean[] ba = new Boolean[aVal.length];
-                for(int i = 0; i < aVal.length; i++)
+                for (int i = 0; i < aVal.length; i++)
                     ba[i] = Boolean.valueOf(aVal[i]);
                 return ba;
-            }
-            else if (type == Property.Type.DOUBLE)
-            {
+            } else if (type == Property.Type.DOUBLE) {
                 Double[] da = new Double[aVal.length];
-                for(int i = 0; i < aVal.length; i++)
+                for (int i = 0; i < aVal.length; i++)
                     da[i] = Double.valueOf(aVal[i].toString());
                 return da;
-            }
-            else if (type == Property.Type.INTEGER)
-            {
+            } else if (type == Property.Type.INTEGER) {
                 Integer[] ia = new Integer[aVal.length];
-                for(int i = 0; i < aVal.length; i++)
+                for (int i = 0; i < aVal.length; i++)
                     ia[i] = Integer.valueOf(aVal[i].toString());
                 return ia;
-            }
-            else
+            } else
                 return aVal;
         }
         return null;
     }
 
     @Override
-    public Pattern getValidationPattern()
-    {
+    public Pattern getValidationPattern() {
         return isProperty ? prop.getValidationPattern() : null;
     }
 
     @Override
-    public Object get()
-    {
+    public Object get() {
         return isProperty ? prop.getString() : null;
     }
 
     @Override
-    public Object[] getList()
-    {
-        if (isProperty)
-        {
+    public Object[] getList() {
+        if (isProperty) {
             String[] aVal = prop.getStringList();
-            if (type == Property.Type.BOOLEAN)
-            {
+            if (type == Property.Type.BOOLEAN) {
                 Boolean[] ba = new Boolean[aVal.length];
-                for(int i = 0; i < aVal.length; i++)
+                for (int i = 0; i < aVal.length; i++)
                     ba[i] = Boolean.valueOf(aVal[i]);
                 return ba;
-            }
-            else if (type == Property.Type.DOUBLE)
-            {
+            } else if (type == Property.Type.DOUBLE) {
                 Double[] da = new Double[aVal.length];
-                for(int i = 0; i < aVal.length; i++)
+                for (int i = 0; i < aVal.length; i++)
                     da[i] = Double.valueOf(aVal[i].toString());
                 return da;
-            }
-            else if (type == Property.Type.INTEGER)
-            {
+            } else if (type == Property.Type.INTEGER) {
                 Integer[] ia = new Integer[aVal.length];
-                for(int i = 0; i < aVal.length; i++)
+                for (int i = 0; i < aVal.length; i++)
                     ia[i] = Integer.valueOf(aVal[i].toString());
                 return ia;
-            }
-            else
+            } else
                 return aVal;
         }
         return null;
     }
 
     @Override
-    public void set(Object value)
-    {
-        if (isProperty)
-        {
+    public void set(Object value) {
+        if (isProperty) {
             if (type == Property.Type.BOOLEAN)
                 prop.set(Boolean.parseBoolean(value.toString()));
             else if (type == Property.Type.DOUBLE)
@@ -320,35 +318,26 @@
     }
 
     @Override
-    public void set(Object[] aVal)
-    {
-        if (isProperty)
-        {
-            if (type == Property.Type.BOOLEAN)
-            {
+    public void set(Object[] aVal) {
+        if (isProperty) {
+            if (type == Property.Type.BOOLEAN) {
                 boolean[] ba = new boolean[aVal.length];
-                for(int i = 0; i < aVal.length; i++)
+                for (int i = 0; i < aVal.length; i++)
                     ba[i] = Boolean.valueOf(aVal[i].toString());
                 prop.set(ba);
-            }
-            else if (type == Property.Type.DOUBLE)
-            {
+            } else if (type == Property.Type.DOUBLE) {
                 double[] da = new double[aVal.length];
-                for(int i = 0; i < aVal.length; i++)
+                for (int i = 0; i < aVal.length; i++)
                     da[i] = Double.valueOf(aVal[i].toString());
                 prop.set(da);
-            }
-            else if (type == Property.Type.INTEGER)
-            {
+            } else if (type == Property.Type.INTEGER) {
                 int[] ia = new int[aVal.length];
-                for(int i = 0; i < aVal.length; i++)
+                for (int i = 0; i < aVal.length; i++)
                     ia[i] = Integer.valueOf(aVal[i].toString());
                 prop.set(ia);
-            }
-            else
-            {
+            } else {
                 String[] is = new String[aVal.length];
-                for(int i = 0; i < aVal.length; i++)
+                for (int i = 0; i < aVal.length; i++)
                     is[i] = aVal[i].toString();
                 prop.set(is);
             }
@@ -356,75 +345,17 @@
     }
 
     @Override
-    public Object getMinValue()
-    {
+    public Object getMinValue() {
         return isProperty ? prop.getMinValue() : null;
     }
 
     @Override
-    public Object getMaxValue()
-    {
+    public Object getMaxValue() {
         return isProperty ? prop.getMaxValue() : null;
     }
 
-
     @Override
     public boolean hasSlidingControl() {
         return prop.hasSlidingControl();
     }
-
-    /**
-     * Provides a ConfigElement derived from the annotation-based config system
-     * @param configClass the class which contains the configuration
-     * @return A ConfigElement based on the described category.
-     */
-    public static IConfigElement from(Class<?> configClass)
-    {
-        Config annotation = configClass.getAnnotation(Config.class);
-        if (annotation == null)
-            throw new RuntimeException(String.format("The class '%s' has no @Config annotation!", configClass.getName()));
-        
-        Configuration config = ConfigManager.getConfiguration(annotation.modid(), annotation.name());
-        if (config == null)
-        {
-            String error = String.format("The configuration '%s' of mod '%s' isn't loaded with the ConfigManager!", annotation.name(), annotation.modid());
-            throw new RuntimeException(error);
-        }
-        
-        String name = Strings.isNullOrEmpty(annotation.name()) ? annotation.modid() : annotation.name();
-        String langKey = name;
-        Config.LangKey langKeyAnnotation = configClass.getAnnotation(Config.LangKey.class);
-        if (langKeyAnnotation != null)
-        {
-            langKey = langKeyAnnotation.value();
-        }
-         
-        if (annotation.category().isEmpty())
-        {
-            List<IConfigElement> elements = Lists.newArrayList();
-            Set<String> catNames = config.getCategoryNames();
-            for (String catName : catNames)
-            {
-                if (catName.isEmpty())
-                    continue;
-                ConfigCategory category = config.getCategory(catName);
-                if (category.isChild())
-                    continue;
-                DummyCategoryElement element = new DummyCategoryElement(category.getName(), category.getLanguagekey(), new ConfigElement(category).getChildElements());
-                element.setRequiresMcRestart(category.requiresMcRestart());
-                element.setRequiresWorldRestart(category.requiresWorldRestart());
-                elements.add(element);
-            }
-                
-            return new DummyCategoryElement(name, langKey, elements);
-        }
-        else
-        {
-            ConfigCategory category = config.getCategory(annotation.category());
-            DummyCategoryElement element = new DummyCategoryElement(name, langKey, new ConfigElement(category).getChildElements());   
-            element.setRequiresMcRestart(category.requiresMcRestart());
-            element.setRequiresWorldRestart(category.requiresWorldRestart());
-            return element;
-        } 
-    }
 }
