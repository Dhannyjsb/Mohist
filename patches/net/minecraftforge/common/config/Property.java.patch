--- ../src-base/minecraft/net/minecraftforge/common/config/Property.java
+++ ../src-work/minecraft/net/minecraftforge/common/config/Property.java
@@ -19,58 +19,18 @@
 
 package net.minecraftforge.common.config;
 
+import net.minecraftforge.fml.client.config.*;
+import net.minecraftforge.fml.client.config.GuiConfigEntries.IConfigEntry;
+import net.minecraftforge.fml.client.config.GuiEditArrayEntries.IArrayEntry;
+
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.regex.Pattern;
 
-import net.minecraftforge.fml.client.config.GuiConfig;
-import net.minecraftforge.fml.client.config.GuiConfigEntries;
-import net.minecraftforge.fml.client.config.GuiConfigEntries.IConfigEntry;
-import net.minecraftforge.fml.client.config.GuiEditArray;
-import net.minecraftforge.fml.client.config.GuiEditArrayEntries;
-import net.minecraftforge.fml.client.config.GuiEditArrayEntries.IArrayEntry;
-import net.minecraftforge.fml.client.config.IConfigElement;
-
-public class Property
-{
-    public String getComment()
-    {
-        return comment;
-    }
-
-    public void setComment(String comment)
-    {
-        this.comment = comment;
-    }
-
-    public enum Type
-    {
-        STRING,
-        INTEGER,
-        BOOLEAN,
-        DOUBLE,
-        COLOR,
-        MOD_ID;
-
-        public static Type tryParse(char id)
-        {
-            for (int x = 0; x < values().length; x++)
-            {
-                if (values()[x].getID() == id)
-                {
-                    return values()[x];
-                }
-            }
-
-            return STRING;
-        }
-
-        public char getID()
-        {
-            return name().charAt(0);
-        }
-    }
-
+public class Property {
+    private final boolean wasRead;
+    private final boolean isList;
+    private final Type type;
     private String name;
     private String value;
     private String defaultValue;
@@ -92,61 +52,46 @@
     private boolean showInGui = true;
     private boolean requiresMcRestart = false;
     private Pattern validationPattern;
-    private final boolean wasRead;
-    private final boolean isList;
     private boolean isListLengthFixed = false;
     private int maxListLength = -1;
-    private final Type type;
     private boolean changed = false;
-
-    public Property(String name, String value, Type type)
-    {
+    public Property(String name, String value, Type type) {
         this(name, value, type, false, new String[0], new String[0], name);
     }
-
-    public Property(String name, String value, Type type, boolean read)
-    {
+    public Property(String name, String value, Type type, boolean read) {
         this(name, value, type, read, new String[0], new String[0], name);
     }
-
-    public Property(String name, String value, Type type, String[] validValues)
-    {
+    public Property(String name, String value, Type type, String[] validValues) {
         this(name, value, type, false, validValues, new String[0], name);
     }
 
-    public Property(String name, String value, Type type, String[] validValues, String[] validValuesDisplay)
-    {
+    public Property(String name, String value, Type type, String[] validValues, String[] validValuesDisplay) {
         this(name, value, type, false, validValues, validValuesDisplay, name);
     }
 
-    public Property(String name, String value, Type type, String langKey)
-    {
+    public Property(String name, String value, Type type, String langKey) {
         this(name, value, type, false, new String[0], new String[0], langKey);
     }
 
-    public Property(String name, String value, Type type, boolean read, String langKey)
-    {
+    public Property(String name, String value, Type type, boolean read, String langKey) {
         this(name, value, type, read, new String[0], new String[0], langKey);
     }
 
-    public Property(String name, String value, Type type, String[] validValues, String langKey)
-    {
+    public Property(String name, String value, Type type, String[] validValues, String langKey) {
         this(name, value, type, false, validValues, new String[0], langKey);
     }
 
-    public Property(String name, String value, Type type, String[] validValues, String[] validValuesDisplay, String langKey)
-    {
+    public Property(String name, String value, Type type, String[] validValues, String[] validValuesDisplay, String langKey) {
         this(name, value, type, false, validValues, validValuesDisplay, langKey);
     }
 
-    Property(String name, String value, Type type, boolean read, String[] validValues, String[] validValuesDisplay, String langKey)
-    {
+    Property(String name, String value, Type type, boolean read, String[] validValues, String[] validValuesDisplay, String langKey) {
         setName(name);
         this.value = value;
         this.values = new String[0];
-        this.type  = type;
-        wasRead    = read;
-        isList     = false;
+        this.type = type;
+        wasRead = read;
+        isList = false;
         this.defaultValue = value;
         this.defaultValues = new String[0];
         this.validValues = validValues;
@@ -159,38 +104,32 @@
         this.setComment("");
     }
 
-    public Property(String name, String[] values, Type type)
-    {
+    public Property(String name, String[] values, Type type) {
         this(name, values, type, false);
     }
 
-    Property(String name, String[] values, Type type, boolean read)
-    {
+    Property(String name, String[] values, Type type, boolean read) {
         this(name, values, type, read, new String[0], name);
     }
 
-    public Property(String name, String[] values, Type type, String langKey)
-    {
+    public Property(String name, String[] values, Type type, String langKey) {
         this(name, values, type, false, langKey);
     }
 
-    Property(String name, String[] values, Type type, boolean read, String langKey)
-    {
+    Property(String name, String[] values, Type type, boolean read, String langKey) {
         this(name, values, type, read, new String[0], langKey);
     }
 
-    Property(String name, String[] values, Type type, boolean read, String[] validValues, String langKey)
-    {
+    Property(String name, String[] values, Type type, boolean read, String[] validValues, String langKey) {
         this(name, values, type, read, validValues, new String[0], langKey);
     }
 
-    Property(String name, String[] values, Type type, boolean read, String[] validValues, String[] validValuesDisplay, String langKey)
-    {
+    Property(String name, String[] values, Type type, boolean read, String[] validValues, String[] validValuesDisplay, String langKey) {
         setName(name);
-        this.type   = type;
+        this.type = type;
         this.values = Arrays.copyOf(values, values.length);
-        wasRead     = read;
-        isList      = true;
+        wasRead = read;
+        isList = true;
         this.value = "";
         this.defaultValue = "";
         for (String s : values)
@@ -207,66 +146,61 @@
         this.setComment("");
     }
 
+    public String getComment() {
+        return comment;
+    }
+
+    public void setComment(String comment) {
+        this.comment = comment;
+    }
+
     /**
      * Returns whether or not this Property is defaulted.
      *
      * @return true if the current value(s) is(are) deeply equal to the default value(s)
      */
-    public boolean isDefault()
-    {
-        if (this.isBooleanList())
-        {
-            if (values.length == defaultValues.length)
-            {
+    public boolean isDefault() {
+        if (this.isBooleanList()) {
+            if (values.length == defaultValues.length) {
                 for (int i = 0; i < values.length; i++)
                     if (Boolean.parseBoolean(values[i]) != Boolean.parseBoolean(defaultValues[i]))
                         return false;
 
                 return true;
-            }
-            else
+            } else
                 return false;
         }
 
-        if (this.isIntList())
-        {
-            if (values.length == defaultValues.length)
-            {
+        if (this.isIntList()) {
+            if (values.length == defaultValues.length) {
                 for (int i = 0; i < values.length; i++)
                     if (Integer.parseInt(values[i]) != Integer.parseInt(defaultValues[i]))
                         return false;
 
                 return true;
-            }
-            else
+            } else
                 return false;
         }
 
-        if (this.isDoubleList())
-        {
-            if (values.length == defaultValues.length)
-            {
+        if (this.isDoubleList()) {
+            if (values.length == defaultValues.length) {
                 for (int i = 0; i < values.length; i++)
                     if (Double.parseDouble(values[i]) != Double.parseDouble(defaultValues[i]))
                         return false;
 
                 return true;
-            }
-            else
+            } else
                 return false;
         }
 
-        if (this.isList())
-        {
-            if (values.length == defaultValues.length)
-            {
+        if (this.isList()) {
+            if (values.length == defaultValues.length) {
                 for (int i = 0; i < values.length; i++)
                     if (!values[i].equals(defaultValues[i]))
                         return false;
 
                 return true;
-            }
-            else
+            } else
                 return false;
         }
 
@@ -285,8 +219,7 @@
     /**
      * Sets the current value(s) of this Property to the default value(s).
      */
-    public Property setToDefault()
-    {
+    public Property setToDefault() {
         this.value = this.defaultValue;
         this.values = Arrays.copyOf(this.defaultValues, this.defaultValues.length);
         return this;
@@ -297,8 +230,7 @@
      *
      * @return the default value String
      */
-    public String getDefault()
-    {
+    public String getDefault() {
         return defaultValue;
     }
 
@@ -307,8 +239,7 @@
      *
      * @return the default values String[]
      */
-    public String[] getDefaults()
-    {
+    public String[] getDefaults() {
         return Arrays.copyOf(this.defaultValues, this.defaultValues.length);
     }
 
@@ -318,8 +249,7 @@
      * editable from both the main menu Mods list config screen and the in-game Mod Options config screen. When set to true the Property
      * will only be editable from the main menu Mods list config screen.
      */
-    public Property setRequiresWorldRestart(boolean requiresWorldRestart)
-    {
+    public Property setRequiresWorldRestart(boolean requiresWorldRestart) {
         this.requiresWorldRestart = requiresWorldRestart;
         return this;
     }
@@ -329,8 +259,7 @@
      * as well as the Mods list screen, or only from the Mods list screen. Setting this flag to true will disable editing of
      * this property while a world is running.
      */
-    public boolean requiresWorldRestart()
-    {
+    public boolean requiresWorldRestart() {
         return this.requiresWorldRestart;
     }
 
@@ -338,8 +267,7 @@
      * Sets whether or not this Property should be allowed to show on config GUIs.
      * Defaults to true.
      */
-    public Property setShowInGui(boolean showInGui)
-    {
+    public Property setShowInGui(boolean showInGui) {
         this.showInGui = showInGui;
         return this;
     }
@@ -348,8 +276,7 @@
      * Gets whether or not this Property should be allowed to show on config GUIs.
      * Defaults to true unless set to false.
      */
-    public boolean showInGui()
-    {
+    public boolean showInGui() {
         return showInGui;
     }
 
@@ -358,8 +285,7 @@
      * Defaults to false. Setting this flag to true will also disable editing of
      * this property while a world is running.
      */
-    public Property setRequiresMcRestart(boolean requiresMcRestart)
-    {
+    public Property setRequiresMcRestart(boolean requiresMcRestart) {
         this.requiresMcRestart = this.requiresWorldRestart = requiresMcRestart;
         return this;
     }
@@ -368,21 +294,25 @@
      * Gets whether or not this Property requires Minecraft to be restarted when changed.
      * Defaults to false unless set to true.
      */
-    public boolean requiresMcRestart()
-    {
+    public boolean requiresMcRestart() {
         return this.requiresMcRestart;
     }
 
     /**
+     * Gets the maximum length of this list/array Property. Only important if isList() == true.
+     */
+    public int getMaxListLength() {
+        return this.maxListLength;
+    }
+
+    /**
      * Sets the maximum length of this list/array Property. Only important if isList() == true. If the current values array or default
      * values array is longer than the new maximum it will be resized. If calling both this method and setIsListLengthFixed(true), this
      * method should be called afterwards (but is not required).
      */
-    public Property setMaxListLength(int max)
-    {
+    public Property setMaxListLength(int max) {
         this.maxListLength = max;
-        if (this.maxListLength != -1)
-        {
+        if (this.maxListLength != -1) {
             if (values != null && values.length != maxListLength)
                 if (this.isListLengthFixed || values.length > maxListLength)
                     values = Arrays.copyOf(values, maxListLength);
@@ -395,19 +325,10 @@
     }
 
     /**
-     * Gets the maximum length of this list/array Property. Only important if isList() == true.
-     */
-    public int getMaxListLength()
-    {
-        return this.maxListLength;
-    }
-
-    /**
      * Sets the flag for whether this list/array Property has a fixed length. Only important if isList() == true. If calling both this
      * method and setMaxListLength(), this method should be called first (but is not required).
      */
-    public Property setIsListLengthFixed(boolean isListLengthFixed)
-    {
+    public Property setIsListLengthFixed(boolean isListLengthFixed) {
         this.isListLengthFixed = isListLengthFixed;
         return this;
     }
@@ -415,12 +336,21 @@
     /**
      * Returns whether or not this list/array has a fixed length. Only important if isList() == true.
      */
-    public boolean isListLengthFixed()
-    {
+    public boolean isListLengthFixed() {
         return this.isListLengthFixed;
     }
 
     /**
+     * Gets the custom IConfigEntry class that should be used in place of the standard entry class for this Property type, or null if
+     * none has been set.
+     *
+     * @return a class that implements IConfigEntry
+     */
+    public Class<? extends IConfigEntry> getConfigEntryClass() {
+        return this.configEntryClass;
+    }
+
+    /**
      * Sets a custom IConfigEntry class that should be used in place of the standard entry class for this Property type. This class
      * MUST provide a constructor with the following parameter types: {@link GuiConfig} (the owning GuiConfig screen will be provided),
      * {@link GuiConfigEntries} (the owning GuiConfigEntries will be provided), {@link IConfigElement} (the IConfigElement for this Property
@@ -432,21 +362,19 @@
      * @see GuiConfigEntries.DoubleEntry
      * @see GuiConfigEntries.IntegerEntry
      */
-    public Property setConfigEntryClass(Class<? extends IConfigEntry> clazz)
-    {
+    public Property setConfigEntryClass(Class<? extends IConfigEntry> clazz) {
         this.configEntryClass = clazz;
         return this;
     }
 
     /**
-     * Gets the custom IConfigEntry class that should be used in place of the standard entry class for this Property type, or null if
+     * Gets the custom IArrayEntry class that should be used in place of the standard entry class for this Property type, or null if
      * none has been set.
      *
-     * @return a class that implements IConfigEntry
+     * @return a class that implements IArrayEntry
      */
-    public Class<? extends IConfigEntry> getConfigEntryClass()
-    {
-        return this.configEntryClass;
+    public Class<? extends IArrayEntry> getArrayEntryClass() {
+        return this.arrayEntryClass;
     }
 
     /**
@@ -461,21 +389,18 @@
      * @see GuiEditArrayEntries.DoubleEntry
      * @see GuiEditArrayEntries.IntegerEntry
      */
-    public Property setArrayEntryClass(Class<? extends IArrayEntry> clazz)
-    {
+    public Property setArrayEntryClass(Class<? extends IArrayEntry> clazz) {
         this.arrayEntryClass = clazz;
         return this;
     }
 
     /**
-     * Gets the custom IArrayEntry class that should be used in place of the standard entry class for this Property type, or null if
-     * none has been set.
+     * Gets the Pattern object used to validate user input for this Property.
      *
-     * @return a class that implements IArrayEntry
+     * @return the user input validation Pattern object, or null if none is set
      */
-    public Class<? extends IArrayEntry> getArrayEntryClass()
-    {
-        return this.arrayEntryClass;
+    public Pattern getValidationPattern() {
+        return this.validationPattern;
     }
 
     /**
@@ -483,20 +408,18 @@
      *
      * @param validationPattern
      */
-    public Property setValidationPattern(Pattern validationPattern)
-    {
+    public Property setValidationPattern(Pattern validationPattern) {
         this.validationPattern = validationPattern;
         return this;
     }
 
     /**
-     * Gets the Pattern object used to validate user input for this Property.
+     * Gets the language key string for this Property.
      *
-     * @return the user input validation Pattern object, or null if none is set
+     * @return the language key
      */
-    public Pattern getValidationPattern()
-    {
-        return this.validationPattern;
+    public String getLanguageKey() {
+        return this.langKey;
     }
 
     /**
@@ -505,29 +428,17 @@
      *
      * @param langKey a string language key such as myawesomemod.config.myPropName
      */
-    public Property setLanguageKey(String langKey)
-    {
+    public Property setLanguageKey(String langKey) {
         this.langKey = langKey;
         return this;
     }
 
     /**
-     * Gets the language key string for this Property.
-     *
-     * @return the language key
-     */
-    public String getLanguageKey()
-    {
-        return this.langKey;
-    }
-
-    /**
      * Sets the default string value of this Property.
      *
      * @param defaultValue a String value
      */
-    public Property setDefaultValue(String defaultValue)
-    {
+    public Property setDefaultValue(String defaultValue) {
         this.defaultValue = defaultValue;
         return this;
     }
@@ -537,8 +448,7 @@
      *
      * @param defaultValues an array of String values
      */
-    public Property setDefaultValues(String[] defaultValues)
-    {
+    public Property setDefaultValues(String[] defaultValues) {
         this.defaultValue = "";
         for (String s : defaultValues)
             this.defaultValue += ", [" + s + "]";
@@ -552,8 +462,7 @@
      *
      * @param defaultValue an int value
      */
-    public Property setDefaultValue(int defaultValue)
-    {
+    public Property setDefaultValue(int defaultValue) {
         setDefaultValue(Integer.toString(defaultValue));
         return this;
     }
@@ -563,8 +472,7 @@
      *
      * @param defaultValues an array of int values
      */
-    public Property setDefaultValues(int[] defaultValues)
-    {
+    public Property setDefaultValues(int[] defaultValues) {
         String[] temp = new String[defaultValues.length];
         for (int i = 0; i < defaultValues.length; i++)
             temp[i] = Integer.toString(defaultValues[i]);
@@ -578,8 +486,7 @@
      *
      * @param defaultValue a double value
      */
-    public Property setDefaultValue(double defaultValue)
-    {
+    public Property setDefaultValue(double defaultValue) {
         setDefaultValue(Double.toString(defaultValue));
         return this;
     }
@@ -589,8 +496,7 @@
      *
      * @param defaultValues an array of double values
      */
-    public Property setDefaultValues(double[] defaultValues)
-    {
+    public Property setDefaultValues(double[] defaultValues) {
         String[] temp = new String[defaultValues.length];
         for (int i = 0; i < defaultValues.length; i++)
             temp[i] = Double.toString(defaultValues[i]);
@@ -604,8 +510,7 @@
      *
      * @param defaultValue a boolean value
      */
-    public Property setDefaultValue(boolean defaultValue)
-    {
+    public Property setDefaultValue(boolean defaultValue) {
         setDefaultValue(Boolean.toString(defaultValue));
         return this;
     }
@@ -615,8 +520,7 @@
      *
      * @param defaultValues an array of boolean values
      */
-    public Property setDefaultValues(boolean[] defaultValues)
-    {
+    public Property setDefaultValues(boolean[] defaultValues) {
         String[] temp = new String[defaultValues.length];
         for (int i = 0; i < defaultValues.length; i++)
             temp[i] = Boolean.toString(defaultValues[i]);
@@ -630,8 +534,7 @@
      *
      * @param minValue an int value
      */
-    public Property setMinValue(int minValue)
-    {
+    public Property setMinValue(int minValue) {
         this.minValue = Integer.toString(minValue);
         return this;
     }
@@ -641,52 +544,47 @@
      *
      * @param maxValue an int value
      */
-    public Property setMaxValue(int maxValue)
-    {
+    public Property setMaxValue(int maxValue) {
         this.maxValue = Integer.toString(maxValue);
         return this;
     }
 
     /**
-     * Sets the minimum double value of this Property.
+     * Gets the minimum value.
      *
-     * @param minValue a double value
+     * @return the minimum value bound
      */
-    public Property setMinValue(double minValue)
-    {
-        this.minValue = Double.toString(minValue);
-        return this;
+    public String getMinValue() {
+        return minValue;
     }
 
     /**
-     * Sets the maximum double value of this Property.
+     * Sets the minimum double value of this Property.
      *
-     * @param maxValue a double value
+     * @param minValue a double value
      */
-    public Property setMaxValue(double maxValue)
-    {
-        this.maxValue = Double.toString(maxValue);
+    public Property setMinValue(double minValue) {
+        this.minValue = Double.toString(minValue);
         return this;
     }
 
     /**
-     * Gets the minimum value.
+     * Gets the maximum value.
      *
-     * @return the minimum value bound
+     * @return the maximum value bound
      */
-    public String getMinValue()
-    {
-        return minValue;
+    public String getMaxValue() {
+        return maxValue;
     }
 
     /**
-     * Gets the maximum value.
+     * Sets the maximum double value of this Property.
      *
-     * @return the maximum value bound
+     * @param maxValue a double value
      */
-    public String getMaxValue()
-    {
-        return maxValue;
+    public Property setMaxValue(double maxValue) {
+        this.maxValue = Double.toString(maxValue);
+        return this;
     }
 
     /**
@@ -694,31 +592,37 @@
      *
      * @return current value
      */
-    public String getString()
-    {
+    public String getString() {
         return value;
     }
 
     /**
+     * Gets the array of valid values that this String Property can be set to, or null or empty if not defined.
+     *
+     * @return a String array of valid values
+     */
+    public String[] getValidValues() {
+        return this.validValues;
+    }
+
+    /**
      * Sets the array of valid values that this String Property can be set to. When an array of valid values is defined for a Property the
      * GUI control for that property will be a value cycle button.
      *
      * @param validValues a String array of valid values
      */
-    public Property setValidValues(String[] validValues)
-    {
+    public Property setValidValues(String[] validValues) {
         this.validValues = validValues;
         return this;
     }
 
     /**
-     * Gets the array of valid values that this String Property can be set to, or null or empty if not defined.
+     * Gets the array of the config GUI display versions of the valid values that this String Property can be set to, or null or empty if not defined.
      *
-     * @return a String array of valid values
+     * @return a String array of the aliases of the valid values
      */
-    public String[] getValidValues()
-    {
-        return this.validValues;
+    public String[] getValidValuesDisplay() {
+        return this.validValuesDisplay;
     }
 
     /**
@@ -727,30 +631,18 @@
      *
      * @param validValueAliases a String array of the aliases of valid values
      */
-    public Property setValidValuesDisplay(String[] validValuesDisplay)
-    {
+    public Property setValidValuesDisplay(String[] validValuesDisplay) {
         this.validValuesDisplay = validValuesDisplay;
         return this;
     }
 
     /**
-     * Gets the array of the config GUI display versions of the valid values that this String Property can be set to, or null or empty if not defined.
-     *
-     * @return a String array of the aliases of the valid values
-     */
-    public String[] getValidValuesDisplay()
-    {
-        return this.validValuesDisplay;
-    }
-
-    /**
      * Returns the value in this property as an integer,
      * if the value is not a valid integer, it will return the initially provided default.
      *
      * @return The value
      */
-    public int getInt()
-    {
+    public int getInt() {
         return getInt(Integer.parseInt(defaultValue));
     }
 
@@ -762,14 +654,10 @@
      * @param _default The default to provide if the current value is not a valid integer
      * @return The value
      */
-    public int getInt(int _default)
-    {
-        try
-        {
+    public int getInt(int _default) {
+        try {
             return Integer.parseInt(value);
-        }
-        catch (NumberFormatException e)
-        {
+        } catch (NumberFormatException e) {
             return _default;
         }
     }
@@ -778,15 +666,11 @@
      * Checks if the current value stored in this property can be converted to an integer.
      * @return True if the type of the Property is an Integer
      */
-    public boolean isIntValue()
-    {
-        try
-        {
+    public boolean isIntValue() {
+        try {
             Integer.parseInt(value);
             return true;
-        }
-        catch (NumberFormatException e)
-        {
+        } catch (NumberFormatException e) {
             return false;
         }
     }
@@ -797,8 +681,7 @@
      *
      * @return The value
      */
-    public long getLong()
-    {
+    public long getLong() {
         return getLong(Long.parseLong(defaultValue));
     }
 
@@ -810,14 +693,10 @@
      * @param _default The default to provide if the current value is not a validlong
      * @return The value
      */
-    public long getLong(long _default)
-    {
-        try
-        {
+    public long getLong(long _default) {
+        try {
             return Long.parseLong(value);
-        }
-        catch (NumberFormatException e)
-        {
+        } catch (NumberFormatException e) {
             return _default;
         }
     }
@@ -826,15 +705,11 @@
      * Checks if the current value stored in this property can be converted to a long.
      * @return True if the type of the Property is an Long
      */
-    public boolean isLongValue()
-    {
-        try
-        {
+    public boolean isLongValue() {
+        try {
             Long.parseLong(value);
             return true;
-        }
-        catch (NumberFormatException e)
-        {
+        } catch (NumberFormatException e) {
             return false;
         }
     }
@@ -847,14 +722,10 @@
      * @param _default The default to provide
      * @return The value as a boolean, or the default
      */
-    public boolean getBoolean(boolean _default)
-    {
-        if (isBooleanValue())
-        {
+    public boolean getBoolean(boolean _default) {
+        if (isBooleanValue()) {
             return Boolean.parseBoolean(value);
-        }
-        else
-        {
+        } else {
             return _default;
         }
     }
@@ -864,14 +735,10 @@
      *
      * @return The value as a boolean, or the default
      */
-    public boolean getBoolean()
-    {
-        if (isBooleanValue())
-        {
+    public boolean getBoolean() {
+        if (isBooleanValue()) {
             return Boolean.parseBoolean(value);
-        }
-        else
-        {
+        } else {
             return Boolean.parseBoolean(defaultValue);
         }
     }
@@ -881,8 +748,7 @@
      *
      * @return True if it is a boolean value
      */
-    public boolean isBooleanValue()
-    {
+    public boolean isBooleanValue() {
         return ("true".equals(value.toLowerCase()) || "false".equals(value.toLowerCase()));
     }
 
@@ -890,15 +756,11 @@
      * Checks if the current value held by this property is a valid double value.
      * @return True if the value can be converted to an double
      */
-    public boolean isDoubleValue()
-    {
-        try
-        {
+    public boolean isDoubleValue() {
+        try {
             Double.parseDouble(value);
             return true;
-        }
-        catch (NumberFormatException e)
-        {
+        } catch (NumberFormatException e) {
             return false;
         }
     }
@@ -911,14 +773,10 @@
      * @param _default The default to provide if the current value is not a valid double
      * @return The value
      */
-    public double getDouble(double _default)
-    {
-        try
-        {
+    public double getDouble(double _default) {
+        try {
             return Double.parseDouble(value);
-        }
-        catch (NumberFormatException e)
-        {
+        } catch (NumberFormatException e) {
             return _default;
         }
     }
@@ -928,20 +786,15 @@
      *
      * @return The value
      */
-    public double getDouble()
-    {
-        try
-        {
+    public double getDouble() {
+        try {
             return Double.parseDouble(value);
-        }
-        catch (NumberFormatException e)
-        {
+        } catch (NumberFormatException e) {
             return Double.parseDouble(defaultValue);
         }
     }
 
-    public String[] getStringList()
-    {
+    public String[] getStringList() {
         return values;
     }
 
@@ -951,23 +804,19 @@
      *
      * @return Array of length 0 if none of the values could be parsed.
      */
-    public int[] getIntList()
-    {
+    public int[] getIntList() {
         ArrayList<Integer> nums = new ArrayList<Integer>();
 
-        for (String value : values)
-        {
-            try
-            {
+        for (String value : values) {
+            try {
                 nums.add(Integer.parseInt(value));
+            } catch (NumberFormatException e) {
             }
-            catch (NumberFormatException e){}
         }
 
         int[] primitives = new int[nums.size()];
 
-        for (int i = 0; i < nums.size(); i++)
-        {
+        for (int i = 0; i < nums.size(); i++) {
             primitives[i] = nums.get(i);
         }
 
@@ -978,17 +827,12 @@
      * Checks if all of the current values stored in this property can be converted to an integer.
      * @return True if the type of the Property is an Integer List
      */
-    public boolean isIntList()
-    {
+    public boolean isIntList() {
         if (isList && type == Type.INTEGER)
-            for (String value : values)
-            {
-                try
-                {
+            for (String value : values) {
+                try {
                     Integer.parseInt(value);
-                }
-                catch (NumberFormatException e)
-                {
+                } catch (NumberFormatException e) {
                     return false;
                 }
             }
@@ -1001,22 +845,18 @@
      *
      * @return Array of length 0 if none of the values could be parsed.
      */
-    public boolean[] getBooleanList()
-    {
+    public boolean[] getBooleanList() {
         ArrayList<Boolean> tmp = new ArrayList<Boolean>();
-        for (String value : values)
-        {
-            try
-            {
+        for (String value : values) {
+            try {
                 tmp.add(Boolean.parseBoolean(value));
+            } catch (NumberFormatException e) {
             }
-            catch (NumberFormatException e){}
         }
 
         boolean[] primitives = new boolean[tmp.size()];
 
-        for (int i = 0; i < tmp.size(); i++)
-        {
+        for (int i = 0; i < tmp.size(); i++) {
             primitives[i] = tmp.get(i);
         }
 
@@ -1027,13 +867,10 @@
      * Checks if all of current values stored in this property can be converted to a boolean.
      * @return True if it is a boolean value
      */
-    public boolean isBooleanList()
-    {
+    public boolean isBooleanList() {
         if (isList && type == Type.BOOLEAN)
-            for (String value : values)
-            {
-                if (!"true".equalsIgnoreCase(value) && !"false".equalsIgnoreCase(value))
-                {
+            for (String value : values) {
+                if (!"true".equalsIgnoreCase(value) && !"false".equalsIgnoreCase(value)) {
                     return false;
                 }
             }
@@ -1047,22 +884,18 @@
      *
      * @return Array of length 0 if none of the values could be parsed.
      */
-    public double[] getDoubleList()
-    {
+    public double[] getDoubleList() {
         ArrayList<Double> tmp = new ArrayList<Double>();
-        for (String value : values)
-        {
-            try
-            {
+        for (String value : values) {
+            try {
                 tmp.add(Double.parseDouble(value));
+            } catch (NumberFormatException e) {
             }
-            catch (NumberFormatException e) {}
         }
 
         double[] primitives = new double[tmp.size()];
 
-        for (int i = 0; i < tmp.size(); i++)
-        {
+        for (int i = 0; i < tmp.size(); i++) {
             primitives[i] = tmp.get(i);
         }
 
@@ -1073,17 +906,12 @@
      * Checks if all of the current values stored in this property can be converted to a double.
      * @return True if the type of the Property is a double List
      */
-    public boolean isDoubleList()
-    {
+    public boolean isDoubleList() {
         if (isList && type == Type.DOUBLE)
-            for (String value : values)
-            {
-                try
-                {
+            for (String value : values) {
+                try {
                     Double.parseDouble(value);
-                }
-                catch (NumberFormatException e)
-                {
+                } catch (NumberFormatException e) {
                     return false;
                 }
             }
@@ -1096,8 +924,7 @@
      *
      * @return the Property name
      */
-    public String getName()
-    {
+    public String getName() {
         return name;
     }
 
@@ -1106,8 +933,7 @@
      *
      * @param name a name
      */
-    public void setName(String name)
-    {
+    public void setName(String name) {
         this.name = name;
     }
 
@@ -1118,8 +944,7 @@
      *
      * @return True if this property was loaded from the config file with a value
      */
-    public boolean wasRead()
-    {
+    public boolean wasRead() {
         return wasRead;
     }
 
@@ -1128,8 +953,7 @@
      *
      * @return the Property's type
      */
-    public Type getType()
-    {
+    public Type getType() {
         return type;
     }
 
@@ -1138,8 +962,7 @@
      *
      * @return true if this Property is a list/array, false otherwise
      */
-    public boolean isList()
-    {
+    public boolean isList() {
         return isList;
     }
 
@@ -1148,44 +971,44 @@
      *
      * @return true if this Property has changed, false otherwise
      */
-    public boolean hasChanged(){ return changed; }
-    void resetChangedState(){ changed = false; }
+    public boolean hasChanged() {
+        return changed;
+    }
 
+    void resetChangedState() {
+        changed = false;
+    }
+
     /**
      * Sets the value of this Property to the provided String value.
      */
-    public Property setValue(String value)
-    {
+    public Property setValue(String value) {
         this.value = value;
         changed = true;
         return this;
     }
 
-    public void set(String value)
-    {
+    public void set(String value) {
         this.setValue(value);
     }
 
     /**
      * Sets the values of this Property to the provided String[] values.
      */
-    public Property setValues(String[] values)
-    {
+    public Property setValues(String[] values) {
         this.values = Arrays.copyOf(values, values.length);
         changed = true;
         return this;
     }
 
-    public void set(String[] values)
-    {
+    public void set(String[] values) {
         this.setValues(values);
     }
 
     /**
      * Sets the value of this Property to the provided int value.
      */
-    public Property setValue(int value)
-    {
+    public Property setValue(int value) {
         setValue(Integer.toString(value));
         return this;
     }
@@ -1193,8 +1016,7 @@
     /**
      * Sets the value of this Property to the provided boolean value.
      */
-    public Property setValue(boolean value)
-    {
+    public Property setValue(boolean value) {
         setValue(Boolean.toString(value));
         return this;
     }
@@ -1202,8 +1024,7 @@
     /**
      * Sets the value of this Property to the provided double value.
      */
-    public Property setValue(double value)
-    {
+    public Property setValue(double value) {
         setValue(Double.toString(value));
         return this;
     }
@@ -1211,8 +1032,7 @@
     /**
      * Sets the values of this Property to the provided boolean[] values.
      */
-    public Property setValues(boolean[] values)
-    {
+    public Property setValues(boolean[] values) {
         this.values = new String[values.length];
         for (int i = 0; i < values.length; i++)
             this.values[i] = String.valueOf(values[i]);
@@ -1220,16 +1040,14 @@
         return this;
     }
 
-    public void set(boolean[] values)
-    {
+    public void set(boolean[] values) {
         this.setValues(values);
     }
 
     /**
      * Sets the values of this Property to the provided int[] values.
      */
-    public Property setValues(int[] values)
-    {
+    public Property setValues(int[] values) {
         this.values = new String[values.length];
         for (int i = 0; i < values.length; i++)
             this.values[i] = String.valueOf(values[i]);
@@ -1237,16 +1055,14 @@
         return this;
     }
 
-    public void set(int[] values)
-    {
+    public void set(int[] values) {
         this.setValues(values);
     }
 
     /**
      * Sets the values of this Property to the provided double[] values.
      */
-    public Property setValues(double[] values)
-    {
+    public Property setValues(double[] values) {
         this.values = new String[values.length];
         for (int i = 0; i < values.length; i++)
             this.values[i] = String.valueOf(values[i]);
@@ -1254,22 +1070,54 @@
         return this;
     }
 
-    public void set(double[] values)
-    {
+    public void set(double[] values) {
         this.setValues(values);
     }
-    public void set(int     value){ set(Integer.toString(value)); }
-    public void set(long    value){ set(Long.toString(value));    }
-    public void set(boolean value){ set(Boolean.toString(value)); }
-    public void set(double  value){ set(Double.toString(value));  }
 
-    public boolean hasSlidingControl()
-    {
+    public void set(int value) {
+        set(Integer.toString(value));
+    }
+
+    public void set(long value) {
+        set(Long.toString(value));
+    }
+
+    public void set(boolean value) {
+        set(Boolean.toString(value));
+    }
+
+    public void set(double value) {
+        set(Double.toString(value));
+    }
+
+    public boolean hasSlidingControl() {
         return hasSlidingControl;
     }
 
-    public void setHasSlidingControl(boolean b)
-    {
-        hasSlidingControl=b;
+    public void setHasSlidingControl(boolean b) {
+        hasSlidingControl = b;
     }
+
+    public enum Type {
+        STRING,
+        INTEGER,
+        BOOLEAN,
+        DOUBLE,
+        COLOR,
+        MOD_ID;
+
+        public static Type tryParse(char id) {
+            for (int x = 0; x < values().length; x++) {
+                if (values()[x].getID() == id) {
+                    return values()[x];
+                }
+            }
+
+            return STRING;
+        }
+
+        public char getID() {
+            return name().charAt(0);
+        }
+    }
 }
