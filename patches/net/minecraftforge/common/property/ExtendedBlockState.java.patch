--- ../src-base/minecraft/net/minecraftforge/common/property/ExtendedBlockState.java
+++ ../src-work/minecraft/net/minecraftforge/common/property/ExtendedBlockState.java
@@ -19,12 +19,6 @@
 
 package net.minecraftforge.common.property;
 
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-import java.util.Collection;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Optional;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.ImmutableTable;
@@ -33,51 +27,50 @@
 import net.minecraft.block.state.BlockStateContainer;
 import net.minecraft.block.state.IBlockState;
 
-public class ExtendedBlockState extends BlockStateContainer
-{
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.util.Collection;
+import java.util.Map;
+import java.util.Objects;
+import java.util.Optional;
+
+public class ExtendedBlockState extends BlockStateContainer {
     private final ImmutableSet<IUnlistedProperty<?>> unlistedProperties;
 
-    public ExtendedBlockState(Block blockIn, IProperty<?>[] properties, IUnlistedProperty<?>[] unlistedProperties)
-    {
+    public ExtendedBlockState(Block blockIn, IProperty<?>[] properties, IUnlistedProperty<?>[] unlistedProperties) {
         super(blockIn, properties, buildUnlistedMap(unlistedProperties));
         ImmutableSet.Builder<IUnlistedProperty<?>> builder = ImmutableSet.builder();
-        for(IUnlistedProperty<?> property : unlistedProperties)
-        {
+        for (IUnlistedProperty<?> property : unlistedProperties) {
             builder.add(property);
         }
         this.unlistedProperties = builder.build();
     }
 
-    public Collection<IUnlistedProperty<?>> getUnlistedProperties()
-    {
-        return unlistedProperties;
-    }
-
-    private static ImmutableMap<IUnlistedProperty<?>, Optional<?>> buildUnlistedMap(IUnlistedProperty<?>[] unlistedProperties)
-    {
+    private static ImmutableMap<IUnlistedProperty<?>, Optional<?>> buildUnlistedMap(IUnlistedProperty<?>[] unlistedProperties) {
         ImmutableMap.Builder<IUnlistedProperty<?>, Optional<?>> builder = ImmutableMap.builder();
-        for(IUnlistedProperty<?> p : unlistedProperties)
-        {
+        for (IUnlistedProperty<?> p : unlistedProperties) {
             builder.put(p, Optional.empty());
         }
         return builder.build();
     }
 
+    public Collection<IUnlistedProperty<?>> getUnlistedProperties() {
+        return unlistedProperties;
+    }
+
     @Override
     @Nonnull
-    protected StateImplementation createState(@Nonnull Block block, @Nonnull  ImmutableMap<IProperty<?>, Comparable<?>> properties, @Nullable ImmutableMap<IUnlistedProperty<?>, Optional<?>> unlistedProperties)
-    {
-        if (unlistedProperties == null || unlistedProperties.isEmpty()) return super.createState(block, properties, unlistedProperties);
+    protected StateImplementation createState(@Nonnull Block block, @Nonnull ImmutableMap<IProperty<?>, Comparable<?>> properties, @Nullable ImmutableMap<IUnlistedProperty<?>, Optional<?>> unlistedProperties) {
+        if (unlistedProperties == null || unlistedProperties.isEmpty())
+            return super.createState(block, properties, unlistedProperties);
         return new ExtendedStateImplementation(block, properties, unlistedProperties, null, null);
     }
 
-    protected static class ExtendedStateImplementation extends StateImplementation implements IExtendedBlockState
-    {
+    protected static class ExtendedStateImplementation extends StateImplementation implements IExtendedBlockState {
         private final ImmutableMap<IUnlistedProperty<?>, Optional<?>> unlistedProperties;
         private IBlockState cleanState;
 
-        protected ExtendedStateImplementation(Block block, ImmutableMap<IProperty<?>, Comparable<?>> properties, ImmutableMap<IUnlistedProperty<?>, Optional<?>> unlistedProperties, @Nullable ImmutableTable<IProperty<?>, Comparable<?>, IBlockState> table, IBlockState clean)
-        {
+        protected ExtendedStateImplementation(Block block, ImmutableMap<IProperty<?>, Comparable<?>> properties, ImmutableMap<IUnlistedProperty<?>, Optional<?>> unlistedProperties, @Nullable ImmutableTable<IProperty<?>, Comparable<?>, IBlockState> table, IBlockState clean) {
             super(block, properties, table);
             this.unlistedProperties = unlistedProperties;
             this.cleanState = clean == null ? this : clean;
@@ -85,79 +78,66 @@
 
         @Override
         @Nonnull
-        public <T extends Comparable<T>, V extends T> IBlockState withProperty(@Nonnull IProperty<T> property, @Nonnull V value)
-        {
+        public <T extends Comparable<T>, V extends T> IBlockState withProperty(@Nonnull IProperty<T> property, @Nonnull V value) {
             IBlockState clean = super.withProperty(property, value);
             if (clean == this.cleanState) {
                 return this;
             }
 
-            if (this == this.cleanState)
-            { // no dynamic properties present, looking up in the normal table
+            if (this == this.cleanState) { // no dynamic properties present, looking up in the normal table
                 return clean;
             }
 
-            return new ExtendedStateImplementation(getBlock(), clean.getProperties(), unlistedProperties, ((StateImplementation)clean).getPropertyValueTable(), this.cleanState);
+            return new ExtendedStateImplementation(getBlock(), clean.getProperties(), unlistedProperties, ((StateImplementation) clean).getPropertyValueTable(), this.cleanState);
         }
 
         @Override
-        public <V> IExtendedBlockState withProperty(IUnlistedProperty<V> property, @Nullable V value)
-        {
+        public <V> IExtendedBlockState withProperty(IUnlistedProperty<V> property, @Nullable V value) {
             Optional<?> oldValue = unlistedProperties.get(property);
-            if (oldValue == null)
-            {
+            if (oldValue == null) {
                 throw new IllegalArgumentException("Cannot set unlisted property " + property + " as it does not exist in " + getBlock().getBlockState());
             }
-            if (Objects.equals(oldValue.orElse(null), value))
-            {
+            if (Objects.equals(oldValue.orElse(null), value)) {
                 return this;
             }
-            if (!property.isValid(value))
-            {
+            if (!property.isValid(value)) {
                 throw new IllegalArgumentException("Cannot set unlisted property " + property + " to " + value + " on block " + Block.REGISTRY.getNameForObject(getBlock()) + ", it is not an allowed value");
             }
             boolean clean = true;
             ImmutableMap.Builder<IUnlistedProperty<?>, Optional<?>> builder = ImmutableMap.builder();
-            for (Map.Entry<IUnlistedProperty<?>, Optional<?>> entry : unlistedProperties.entrySet())
-            {
+            for (Map.Entry<IUnlistedProperty<?>, Optional<?>> entry : unlistedProperties.entrySet()) {
                 IUnlistedProperty<?> key = entry.getKey();
                 Optional<?> newValue = key.equals(property) ? Optional.ofNullable(value) : entry.getValue();
                 if (newValue.isPresent()) clean = false;
                 builder.put(key, newValue);
             }
-            if (clean)
-            { // no dynamic properties, lookup normal state
+            if (clean) { // no dynamic properties, lookup normal state
                 return (IExtendedBlockState) cleanState;
             }
             return new ExtendedStateImplementation(getBlock(), getProperties(), builder.build(), propertyValueTable, this.cleanState);
         }
 
         @Override
-        public Collection<IUnlistedProperty<?>> getUnlistedNames()
-        {
+        public Collection<IUnlistedProperty<?>> getUnlistedNames() {
             return unlistedProperties.keySet();
         }
 
         @Override
         @Nullable
-        public <V> V getValue(IUnlistedProperty<V> property)
-        {
+        public <V> V getValue(IUnlistedProperty<V> property) {
             Optional<?> value = unlistedProperties.get(property);
-            if (value == null)
-            {
+            if (value == null) {
                 throw new IllegalArgumentException("Cannot get unlisted property " + property + " as it does not exist in " + getBlock().getBlockState());
             }
             return property.getType().cast(value.orElse(null));
         }
 
-        public ImmutableMap<IUnlistedProperty<?>, Optional<?>> getUnlistedProperties()
-        {
+        public ImmutableMap<IUnlistedProperty<?>, Optional<?>> getUnlistedProperties() {
             return unlistedProperties;
         }
 
         @Override
-        public IBlockState getClean()
-        {
+        public IBlockState getClean() {
             return cleanState;
         }
     }
