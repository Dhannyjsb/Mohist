--- ../src-base/minecraft/net/minecraftforge/common/network/ForgeMessage.java
+++ ../src-work/minecraft/net/minecraftforge/common/network/ForgeMessage.java
@@ -19,38 +19,40 @@
 
 package net.minecraftforge.common.network;
 
-import java.nio.charset.StandardCharsets;
-import java.util.Map;
-import java.util.Set;
-
-import net.minecraftforge.fluids.Fluid;
-import net.minecraftforge.fluids.FluidRegistry;
-
 import com.google.common.collect.BiMap;
 import com.google.common.collect.HashBiMap;
 import com.google.common.collect.Sets;
-
+import io.netty.buffer.ByteBuf;
+import net.minecraftforge.fluids.Fluid;
+import net.minecraftforge.fluids.FluidRegistry;
 import net.minecraftforge.fml.common.FMLLog;
 import net.minecraftforge.fml.common.network.ByteBufUtils;
-import io.netty.buffer.ByteBuf;
 
+import java.nio.charset.StandardCharsets;
+import java.util.Map;
+import java.util.Set;
+
 public abstract class ForgeMessage {
+    abstract void toBytes(ByteBuf bytes);
+
+    abstract void fromBytes(ByteBuf bytes);
+
     public static class DimensionRegisterMessage extends ForgeMessage {
         /** The dimension ID to register on client */
         int dimensionId;
         /** The provider ID to register with dimension on client */
         String providerId;
 
-        public DimensionRegisterMessage(){}
-        public DimensionRegisterMessage(int dimensionId, String providerId)
-        {
+        public DimensionRegisterMessage() {
+        }
+
+        public DimensionRegisterMessage(int dimensionId, String providerId) {
             this.dimensionId = dimensionId;
             this.providerId = providerId;
         }
 
         @Override
-        void toBytes(ByteBuf bytes)
-        {
+        void toBytes(ByteBuf bytes) {
             bytes.writeInt(this.dimensionId);
             byte[] data = this.providerId.getBytes(StandardCharsets.UTF_8);
             bytes.writeShort(data.length);
@@ -58,8 +60,7 @@
         }
 
         @Override
-        void fromBytes(ByteBuf bytes)
-        {
+        void fromBytes(ByteBuf bytes) {
             dimensionId = bytes.readInt();
             byte[] data = new byte[bytes.readShort()];
             bytes.readBytes(data);
@@ -70,27 +71,24 @@
     public static class FluidIdMapMessage extends ForgeMessage {
         BiMap<Fluid, Integer> fluidIds = HashBiMap.create();
         Set<String> defaultFluids = Sets.newHashSet();
+
         @SuppressWarnings("deprecation")
         @Override
-        void toBytes(ByteBuf bytes)
-        {
+        void toBytes(ByteBuf bytes) {
             Map<Fluid, Integer> ids = FluidRegistry.getRegisteredFluidIDs();
             bytes.writeInt(ids.size());
-            for (Map.Entry<Fluid, Integer> entry : ids.entrySet())
-            {
-                ByteBufUtils.writeUTF8String(bytes,entry.getKey().getName());
+            for (Map.Entry<Fluid, Integer> entry : ids.entrySet()) {
+                ByteBufUtils.writeUTF8String(bytes, entry.getKey().getName());
                 bytes.writeInt(entry.getValue());
             }
-            for (Map.Entry<Fluid, Integer> entry : ids.entrySet())
-            {
+            for (Map.Entry<Fluid, Integer> entry : ids.entrySet()) {
                 String defaultName = FluidRegistry.getDefaultFluidName(entry.getKey());
                 ByteBufUtils.writeUTF8String(bytes, defaultName);
             }
         }
 
         @Override
-        void fromBytes(ByteBuf bytes)
-        {
+        void fromBytes(ByteBuf bytes) {
             int listSize = bytes.readInt();
             for (int i = 0; i < listSize; i++) {
                 String fluidName = ByteBufUtils.readUTF8String(bytes);
@@ -99,21 +97,14 @@
             }
             // do we have a defaults list?
 
-            if (bytes.isReadable())
-            {
-                for (int i = 0; i < listSize; i++)
-                {
+            if (bytes.isReadable()) {
+                for (int i = 0; i < listSize; i++) {
                     defaultFluids.add(ByteBufUtils.readUTF8String(bytes));
                 }
-            }
-            else
-            {
+            } else {
                 FMLLog.log.info("Legacy server message contains no default fluid list - there may be problems with fluids");
                 defaultFluids.clear();
             }
         }
     }
-
-    abstract void toBytes(ByteBuf bytes);
-    abstract void fromBytes(ByteBuf bytes);
 }
