--- ../src-base/minecraft/net/minecraftforge/common/capabilities/CapabilityManager.java
+++ ../src-work/minecraft/net/minecraftforge/common/capabilities/CapabilityManager.java
@@ -19,28 +19,29 @@
 
 package net.minecraftforge.common.capabilities;
 
+import com.google.common.base.Preconditions;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import net.minecraftforge.common.util.EnumHelper;
+import net.minecraftforge.fml.common.FMLLog;
+import net.minecraftforge.fml.common.discovery.ASMDataTable;
+import org.objectweb.asm.Type;
+
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.util.IdentityHashMap;
 import java.util.List;
 import java.util.concurrent.Callable;
-
-import org.objectweb.asm.Type;
-
 import java.util.function.Function;
-import com.google.common.base.Preconditions;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
 
-import net.minecraftforge.common.util.EnumHelper;
-import net.minecraftforge.fml.common.FMLLog;
-import net.minecraftforge.fml.common.discovery.ASMDataTable;
-
-public enum CapabilityManager
-{
+public enum CapabilityManager {
     INSTANCE;
 
+    // INTERNAL
+    private IdentityHashMap<String, Capability<?>> providers = Maps.newIdentityHashMap();
+    private IdentityHashMap<String, List<Function<Capability<?>, Object>>> callbacks = Maps.newIdentityHashMap();
+
     /**
      * Registers a capability to be consumed by others.
      * APIs who define the capability should call this.
@@ -54,8 +55,7 @@
      *  (MyImpl::new instead of MyImpl.class). TODO remove in 1.13.
      */
     @Deprecated
-    public <T> void register(Class<T> type, Capability.IStorage<T> storage, final Class<? extends T> implementation)
-    {
+    public <T> void register(Class<T> type, Capability.IStorage<T> storage, final Class<? extends T> implementation) {
         Preconditions.checkArgument(implementation != null, "Attempted to register a capability with no default implementation");
         register(type, storage, () ->
         {
@@ -76,9 +76,8 @@
      * @param storage A default implementation of the storage handler.
      * @param factory A Factory that will produce new instances of the default implementation.
      */
-    public <T> void register(Class<T> type, Capability.IStorage<T> storage, Callable<? extends T> factory)
-    {
-        Preconditions.checkArgument(type    != null, "Attempted to register a capability with invalid type");
+    public <T> void register(Class<T> type, Capability.IStorage<T> storage, Callable<? extends T> factory) {
+        Preconditions.checkArgument(type != null, "Attempted to register a capability with invalid type");
         Preconditions.checkArgument(storage != null, "Attempted to register a capability with no storage implementation");
         Preconditions.checkArgument(factory != null, "Attempted to register a capability with no default implementation factory");
         String realName = type.getName().intern();
@@ -88,27 +87,19 @@
         providers.put(realName, cap);
 
         List<Function<Capability<?>, Object>> list = callbacks.get(realName);
-        if (list != null)
-        {
-            for (Function<Capability<?>, Object> func : list)
-            {
+        if (list != null) {
+            for (Function<Capability<?>, Object> func : list) {
                 func.apply(cap);
             }
         }
     }
 
-    // INTERNAL
-    private IdentityHashMap<String, Capability<?>> providers = Maps.newIdentityHashMap();
-    private IdentityHashMap<String, List<Function<Capability<?>, Object>>> callbacks = Maps.newIdentityHashMap();
-    public void injectCapabilities(ASMDataTable data)
-    {
-        for (ASMDataTable.ASMData entry : data.getAll(CapabilityInject.class.getName()))
-        {
+    public void injectCapabilities(ASMDataTable data) {
+        for (ASMDataTable.ASMData entry : data.getAll(CapabilityInject.class.getName())) {
             final String targetClass = entry.getClassName();
             final String targetName = entry.getObjectName();
-            Type type = (Type)entry.getAnnotationInfo().get("value");
-            if (type == null)
-            {
+            Type type = (Type) entry.getAnnotationInfo().get("value");
+            if (type == null) {
                 FMLLog.log.warn("Unable to inject capability at {}.{} (Invalid Annotation)", targetClass, targetName);
                 continue;
             }
@@ -116,21 +107,14 @@
 
             List<Function<Capability<?>, Object>> list = callbacks.computeIfAbsent(capabilityName, k -> Lists.newArrayList());
 
-            if (entry.getObjectName().indexOf('(') > 0)
-            {
-                list.add(new Function<Capability<?>, Object>()
-                {
+            if (entry.getObjectName().indexOf('(') > 0) {
+                list.add(new Function<Capability<?>, Object>() {
                     @Override
-                    public Object apply(Capability<?> input)
-                    {
-                        try
-                        {
-                            for (Method mtd : Class.forName(targetClass).getDeclaredMethods())
-                            {
-                                if (targetName.equals(mtd.getName() + Type.getMethodDescriptor(mtd)))
-                                {
-                                    if ((mtd.getModifiers() & Modifier.STATIC) != Modifier.STATIC)
-                                    {
+                    public Object apply(Capability<?> input) {
+                        try {
+                            for (Method mtd : Class.forName(targetClass).getDeclaredMethods()) {
+                                if (targetName.equals(mtd.getName() + Type.getMethodDescriptor(mtd))) {
+                                    if ((mtd.getModifiers() & Modifier.STATIC) != Modifier.STATIC) {
                                         FMLLog.log.warn("Unable to inject capability {} at {}.{} (Non-Static)", capabilityName, targetClass, targetName);
                                         return null;
                                     }
@@ -141,34 +125,24 @@
                                 }
                             }
                             FMLLog.log.warn("Unable to inject capability {} at {}.{} (Method Not Found)", capabilityName, targetClass, targetName);
-                        }
-                        catch (Exception e)
-                        {
+                        } catch (Exception e) {
                             FMLLog.log.warn("Unable to inject capability {} at {}.{}", capabilityName, targetClass, targetName, e);
                         }
                         return null;
                     }
                 });
-            }
-            else
-            {
-                list.add(new Function<Capability<?>, Object>()
-                {
+            } else {
+                list.add(new Function<Capability<?>, Object>() {
                     @Override
-                    public Object apply(Capability<?> input)
-                    {
-                        try
-                        {
+                    public Object apply(Capability<?> input) {
+                        try {
                             Field field = Class.forName(targetClass).getDeclaredField(targetName);
-                            if ((field.getModifiers() & Modifier.STATIC) != Modifier.STATIC)
-                            {
+                            if ((field.getModifiers() & Modifier.STATIC) != Modifier.STATIC) {
                                 FMLLog.log.warn("Unable to inject capability {} at {}.{} (Non-Static)", capabilityName, targetClass, targetName);
                                 return null;
                             }
                             EnumHelper.setFailsafeFieldValue(field, null, input);
-                        }
-                        catch (Exception e)
-                        {
+                        } catch (Exception e) {
                             FMLLog.log.warn("Unable to inject capability {} at {}.{}", capabilityName, targetClass, targetName, e);
                         }
                         return null;
