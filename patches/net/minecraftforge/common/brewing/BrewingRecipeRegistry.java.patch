--- ../src-base/minecraft/net/minecraftforge/common/brewing/BrewingRecipeRegistry.java
+++ ../src-work/minecraft/net/minecraftforge/common/brewing/BrewingRecipeRegistry.java
@@ -19,20 +19,19 @@
 
 package net.minecraftforge.common.brewing;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.NonNullList;
 
 import javax.annotation.Nonnull;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
 
 public class BrewingRecipeRegistry {
 
     private static List<IBrewingRecipe> recipes = new ArrayList<IBrewingRecipe>();
 
-    static
-    {
+    static {
         addRecipe(new VanillaBrewingRecipe());
     }
 
@@ -50,8 +49,7 @@
      *            done.
      * @return true if the recipe was added.
      */
-    public static boolean addRecipe(@Nonnull ItemStack input, @Nonnull ItemStack ingredient, @Nonnull ItemStack output)
-    {
+    public static boolean addRecipe(@Nonnull ItemStack input, @Nonnull ItemStack ingredient, @Nonnull ItemStack output) {
         return addRecipe(new BrewingRecipe(input, ingredient, output));
     }
 
@@ -69,8 +67,7 @@
      *            done.
      * @return true if the recipe was added.
      */
-    public static boolean addRecipe(@Nonnull ItemStack input, @Nonnull String ingredient, @Nonnull ItemStack output)
-    {
+    public static boolean addRecipe(@Nonnull ItemStack input, @Nonnull String ingredient, @Nonnull ItemStack output) {
         return addRecipe(new BrewingOreRecipe(input, ingredient, output));
     }
 
@@ -78,8 +75,7 @@
      * Adds a recipe to the registry. Due to the nature of the brewing stand
      * inputs that stack (a.k.a max stack size > 1) are not allowed.
      */
-    public static boolean addRecipe(IBrewingRecipe recipe)
-    {
+    public static boolean addRecipe(IBrewingRecipe recipe) {
         return recipes.add(recipe);
     }
 
@@ -88,16 +84,13 @@
      * ingredient.
      */
     @Nonnull
-    public static ItemStack getOutput(@Nonnull ItemStack input, @Nonnull ItemStack ingredient)
-    {
+    public static ItemStack getOutput(@Nonnull ItemStack input, @Nonnull ItemStack ingredient) {
         if (input.isEmpty() || input.getCount() != 1) return ItemStack.EMPTY;
         if (ingredient.isEmpty()) return ItemStack.EMPTY;
 
-        for (IBrewingRecipe recipe : recipes)
-        {
+        for (IBrewingRecipe recipe : recipes) {
             ItemStack output = recipe.getOutput(input, ingredient);
-            if (!output.isEmpty())
-            {
+            if (!output.isEmpty()) {
                 return output;
             }
         }
@@ -107,8 +100,7 @@
     /**
      * Returns true if the passed input and ingredient have an output
      */
-    public static boolean hasOutput(@Nonnull ItemStack input, @Nonnull ItemStack ingredient)
-    {
+    public static boolean hasOutput(@Nonnull ItemStack input, @Nonnull ItemStack ingredient) {
         return !getOutput(input, ingredient).isEmpty();
     }
 
@@ -117,14 +109,11 @@
      * Extra parameters exist to allow modders to create bigger brewing stands
      * without much hassle
      */
-    public static boolean canBrew(NonNullList<ItemStack> inputs, @Nonnull ItemStack ingredient, int[] inputIndexes)
-    {
+    public static boolean canBrew(NonNullList<ItemStack> inputs, @Nonnull ItemStack ingredient, int[] inputIndexes) {
         if (ingredient.isEmpty()) return false;
 
-        for (int i : inputIndexes)
-        {
-            if (hasOutput(inputs.get(i), ingredient))
-            {
+        for (int i : inputIndexes) {
+            if (hasOutput(inputs.get(i), ingredient)) {
                 return true;
             }
         }
@@ -136,13 +125,10 @@
      * Used by the brewing stand to brew its inventory Extra parameters exist to
      * allow modders to create bigger brewing stands without much hassle
      */
-    public static void brewPotions(NonNullList<ItemStack> inputs, @Nonnull ItemStack ingredient, int[] inputIndexes)
-    {
-        for (int i : inputIndexes)
-        {
+    public static void brewPotions(NonNullList<ItemStack> inputs, @Nonnull ItemStack ingredient, int[] inputIndexes) {
+        for (int i : inputIndexes) {
             ItemStack output = getOutput(inputs.get(i), ingredient);
-            if (!output.isEmpty())
-            {
+            if (!output.isEmpty()) {
                 inputs.set(i, output);
             }
         }
@@ -152,14 +138,11 @@
      * Returns true if the passed ItemStack is a valid ingredient for any of the
      * recipes in the registry.
      */
-    public static boolean isValidIngredient(@Nonnull ItemStack stack)
-    {
+    public static boolean isValidIngredient(@Nonnull ItemStack stack) {
         if (stack.isEmpty()) return false;
 
-        for (IBrewingRecipe recipe : recipes)
-        {
-            if (recipe.isIngredient(stack))
-            {
+        for (IBrewingRecipe recipe : recipes) {
+            if (recipe.isIngredient(stack)) {
                 return true;
             }
         }
@@ -170,14 +153,11 @@
      * Returns true if the passed ItemStack is a valid input for any of the
      * recipes in the registry.
      */
-    public static boolean isValidInput(@Nonnull ItemStack stack)
-    {
+    public static boolean isValidInput(@Nonnull ItemStack stack) {
         if (stack.getCount() != 1) return false;
 
-        for (IBrewingRecipe recipe : recipes)
-        {
-            if (recipe.isInput(stack))
-            {
+        for (IBrewingRecipe recipe : recipes) {
+            if (recipe.isInput(stack)) {
                 return true;
             }
         }
@@ -187,8 +167,7 @@
     /**
      * Returns an unmodifiable list containing all the recipes in the registry
      */
-    public static List<IBrewingRecipe> getRecipes()
-    {
+    public static List<IBrewingRecipe> getRecipes() {
         return Collections.unmodifiableList(recipes);
     }
 }
