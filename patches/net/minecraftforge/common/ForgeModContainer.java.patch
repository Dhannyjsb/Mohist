--- ../src-base/minecraft/net/minecraftforge/common/ForgeModContainer.java
+++ ../src-work/minecraft/net/minecraftforge/common/ForgeModContainer.java
@@ -19,40 +19,23 @@
 
 package net.minecraftforge.common;
 
-import net.minecraft.util.ResourceLocation;
-import net.minecraft.world.biome.Biome;
-import static net.minecraftforge.common.config.Configuration.CATEGORY_CLIENT;
-import static net.minecraftforge.common.config.Configuration.CATEGORY_GENERAL;
-
-import java.io.File;
-import java.io.InputStream;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.security.cert.Certificate;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.Lists;
+import com.google.common.eventbus.EventBus;
+import com.google.common.eventbus.Subscribe;
 import net.minecraft.crash.ICrashReportDetail;
 import net.minecraft.item.Item;
 import net.minecraft.item.crafting.Ingredient;
 import net.minecraft.nbt.NBTBase;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.stats.StatList;
+import net.minecraft.util.ResourceLocation;
+import net.minecraft.world.biome.Biome;
 import net.minecraft.world.storage.SaveHandler;
 import net.minecraft.world.storage.WorldInfo;
 import net.minecraftforge.classloading.FMLForgePlugin;
 import net.minecraftforge.client.ForgeClientHandler;
-import net.minecraftforge.common.config.Config;
-import net.minecraftforge.common.config.ConfigCategory;
-import net.minecraftforge.common.config.ConfigManager;
-import net.minecraftforge.common.config.Configuration;
-import net.minecraftforge.common.config.Property;
+import net.minecraftforge.common.config.*;
 import net.minecraftforge.common.model.animation.CapabilityAnimation;
 import net.minecraftforge.common.network.ForgeNetworkHandler;
 import net.minecraftforge.energy.CapabilityEnergy;
@@ -60,57 +43,49 @@
 import net.minecraftforge.event.RegistryEvent.MissingMappings;
 import net.minecraftforge.event.terraingen.DeferredBiomeDecorator;
 import net.minecraftforge.fluids.FluidRegistry;
-import net.minecraftforge.fluids.capability.CapabilityFluidHandler;
-import net.minecraftforge.fml.common.registry.ForgeRegistries;
-import net.minecraftforge.items.CapabilityItemHandler;
 import net.minecraftforge.fluids.UniversalBucket;
-import net.minecraftforge.oredict.OreDictionary;
-import net.minecraftforge.oredict.RecipeSorter;
-import net.minecraftforge.server.command.ForgeCommand;
-
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.Lists;
-import com.google.common.eventbus.EventBus;
-import com.google.common.eventbus.Subscribe;
-
+import net.minecraftforge.fluids.capability.CapabilityFluidHandler;
 import net.minecraftforge.fml.client.FMLFileResourcePack;
 import net.minecraftforge.fml.client.FMLFolderResourcePack;
 import net.minecraftforge.fml.client.event.ConfigChangedEvent.OnConfigChangedEvent;
-import net.minecraftforge.fml.common.DummyModContainer;
-import net.minecraftforge.fml.common.FMLCommonHandler;
-import net.minecraftforge.fml.common.FMLLog;
-import net.minecraftforge.fml.common.ICrashCallable;
-import net.minecraftforge.fml.common.LoadController;
-import net.minecraftforge.fml.common.Loader;
+import net.minecraftforge.fml.common.*;
 import net.minecraftforge.fml.common.Mod.EventBusSubscriber;
-import net.minecraftforge.fml.common.ModMetadata;
-import net.minecraftforge.fml.common.WorldAccessContainer;
 import net.minecraftforge.fml.common.discovery.ASMDataTable.ASMData;
 import net.minecraftforge.fml.common.discovery.json.JsonAnnotationLoader;
-import net.minecraftforge.fml.common.event.FMLConstructionEvent;
-import net.minecraftforge.fml.common.event.FMLLoadCompleteEvent;
-import net.minecraftforge.fml.common.event.FMLModIdMappingEvent;
-import net.minecraftforge.fml.common.event.FMLPostInitializationEvent;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
-import net.minecraftforge.fml.common.event.FMLServerStartingEvent;
-import net.minecraftforge.fml.common.event.FMLServerStoppingEvent;
+import net.minecraftforge.fml.common.event.*;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 import net.minecraftforge.fml.common.gameevent.PlayerEvent;
 import net.minecraftforge.fml.common.network.NetworkRegistry;
+import net.minecraftforge.fml.common.registry.ForgeRegistries;
 import net.minecraftforge.fml.relauncher.Side;
+import net.minecraftforge.items.CapabilityItemHandler;
+import net.minecraftforge.oredict.OreDictionary;
+import net.minecraftforge.oredict.RecipeSorter;
+import net.minecraftforge.server.command.ForgeCommand;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
 import javax.annotation.Nullable;
+import java.io.File;
+import java.io.InputStream;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.security.cert.Certificate;
+import java.util.*;
 
+import static net.minecraftforge.common.config.Configuration.CATEGORY_CLIENT;
+import static net.minecraftforge.common.config.Configuration.CATEGORY_GENERAL;
+
 @EventBusSubscriber(modid = "forge")
-public class ForgeModContainer extends DummyModContainer implements WorldAccessContainer
-{
+public class ForgeModContainer extends DummyModContainer implements WorldAccessContainer {
     public static final String VERSION_CHECK_CAT = "version_checking";
+    static final Logger log = LogManager.getLogger(ForgeVersion.MOD_ID);
     public static int clumpingThreshold = 64;
     public static boolean removeErroringEntities = false;
     public static boolean removeErroringTileEntities = false;
     public static boolean fullBoundingBoxLadders = false;
     public static double zombieSummonBaseChance = 0.1;
-    public static int[] blendRanges = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34 };
+    public static int[] blendRanges = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34};
     public static float zombieBabyChance = 0.05f;
     public static boolean shouldSortRecipies = true;
     public static boolean disableVersionCheck = false;
@@ -125,39 +100,30 @@
     public static boolean allowEmissiveItems; // see RenderItem#renderModel(IBakedModel, int, ItemStack)
     public static int dimensionUnloadQueueDelay = 0;
     public static boolean logCascadingWorldGeneration = true; // see Chunk#logCascadingWorldGeneration()
+    // DO NOT contact Forge about worldgen not 'matching' vanilla if this flag is set.
     public static boolean fixVanillaCascading = false; // There are various places in vanilla that cause cascading worldgen. Enabling this WILL change where blocks are placed to prevent this.
-                                                       // DO NOT contact Forge about worldgen not 'matching' vanilla if this flag is set.
-
-    static final Logger log = LogManager.getLogger(ForgeVersion.MOD_ID);
-
     private static Configuration config;
     private static ForgeModContainer INSTANCE;
-    public static ForgeModContainer getInstance()
-    {
-        return INSTANCE;
-    }
-
-    private URL updateJSONUrl = null;
     public UniversalBucket universalBucket;
-
-    public ForgeModContainer()
-    {
+    private URL updateJSONUrl = null;
+    public ForgeModContainer() {
         super(new ModMetadata());
         ModMetadata meta = getMetadata();
-        meta.modId       = ForgeVersion.MOD_ID;
-        meta.name        = "Minecraft Forge";
-        meta.version     = ForgeVersion.getVersion();
-        meta.credits     = "Made possible with help from many people";
-        meta.authorList  = Arrays.asList("LexManos", "cpw", "fry");
+        meta.modId = ForgeVersion.MOD_ID;
+        meta.name = "Minecraft Forge";
+        meta.version = ForgeVersion.getVersion();
+        meta.credits = "Made possible with help from many people";
+        meta.authorList = Arrays.asList("LexManos", "cpw", "fry");
         meta.description = "Minecraft Forge is a common open source API allowing a broad range of mods " +
-                           "to work cooperatively together. It allows many mods to be created without " +
-                           "them editing the main Minecraft code.";
-        meta.url         = "http://minecraftforge.net";
+                "to work cooperatively together. It allows many mods to be created without " +
+                "them editing the main Minecraft code.";
+        meta.url = "http://minecraftforge.net";
         meta.screenshots = new String[0];
-        meta.logoFile    = "/forge_logo.png";
+        meta.logoFile = "/forge_logo.png";
         try {
-            updateJSONUrl    = new URL("http://files.minecraftforge.net/maven/net/minecraftforge/forge/promotions_slim.json");
-        } catch (MalformedURLException e) {}
+            updateJSONUrl = new URL("http://files.minecraftforge.net/maven/net/minecraftforge/forge/promotions_slim.json");
+        } catch (MalformedURLException e) {
+        }
 
         config = null;
         File cfgFile = new File(Loader.instance().getConfigDir(), "forge.cfg");
@@ -168,22 +134,17 @@
         INSTANCE = this;
     }
 
-    @Override
-    public String getGuiClassName()
-    {
-        return "net.minecraftforge.client.gui.ForgeGuiFactory";
+    public static ForgeModContainer getInstance() {
+        return INSTANCE;
     }
 
-    public static Configuration getConfig()
-    {
+    public static Configuration getConfig() {
         return config;
     }
 
-    private static void remapGeneralPropertyToClient(String key)
-    {
+    private static void remapGeneralPropertyToClient(String key) {
         ConfigCategory GENERAL = config.getCategory(CATEGORY_GENERAL);
-        if (GENERAL.containsKey(key))
-        {
+        if (GENERAL.containsKey(key)) {
             FMLLog.log.debug("Remapping property {} from category general to client", key);
             Property property = GENERAL.get(key);
             GENERAL.remove(key);
@@ -194,21 +155,17 @@
     /**
      * Synchronizes the local fields with the values in the Configuration object.
      */
-    private static void syncConfig(boolean load)
-    {
+    private static void syncConfig(boolean load) {
         // By adding a property order list we are defining the order that the properties will appear both in the config file and on the GUIs.
         // Property order lists are defined per-ConfigCategory.
         List<String> propOrder = new ArrayList<String>();
 
-        if (!config.isChild)
-        {
-            if (load)
-            {
+        if (!config.isChild) {
+            if (load) {
                 config.load();
             }
             Property enableGlobalCfg = config.get(Configuration.CATEGORY_GENERAL, "enableGlobalConfig", false).setShowInGui(false);
-            if (enableGlobalCfg.getBoolean(false))
-            {
+            if (enableGlobalCfg.getBoolean(false)) {
                 Configuration.enableGlobalConfig();
             }
         }
@@ -216,11 +173,16 @@
         Property prop;
 
         // clean up old properties that are not used anymore
-        if (config.getCategory(CATEGORY_GENERAL).containsKey("defaultSpawnFuzz")) config.getCategory(CATEGORY_GENERAL).remove("defaultSpawnFuzz");
-        if (config.getCategory(CATEGORY_GENERAL).containsKey("spawnHasFuzz")) config.getCategory(CATEGORY_GENERAL).remove("spawnHasFuzz");
-        if (config.getCategory(CATEGORY_GENERAL).containsKey("disableStitchedFileSaving")) config.getCategory(CATEGORY_GENERAL).remove("disableStitchedFileSaving");
-        if (config.getCategory(CATEGORY_CLIENT).containsKey("java8Reminder")) config.getCategory(CATEGORY_CLIENT).remove("java8Reminder");
-        if (config.getCategory(CATEGORY_CLIENT).containsKey("replaceVanillaBucketModel")) config.getCategory(CATEGORY_CLIENT).remove("replaceVanillaBucketModel");
+        if (config.getCategory(CATEGORY_GENERAL).containsKey("defaultSpawnFuzz"))
+            config.getCategory(CATEGORY_GENERAL).remove("defaultSpawnFuzz");
+        if (config.getCategory(CATEGORY_GENERAL).containsKey("spawnHasFuzz"))
+            config.getCategory(CATEGORY_GENERAL).remove("spawnHasFuzz");
+        if (config.getCategory(CATEGORY_GENERAL).containsKey("disableStitchedFileSaving"))
+            config.getCategory(CATEGORY_GENERAL).remove("disableStitchedFileSaving");
+        if (config.getCategory(CATEGORY_CLIENT).containsKey("java8Reminder"))
+            config.getCategory(CATEGORY_CLIENT).remove("java8Reminder");
+        if (config.getCategory(CATEGORY_CLIENT).containsKey("replaceVanillaBucketModel"))
+            config.getCategory(CATEGORY_CLIENT).remove("replaceVanillaBucketModel");
 
         // remap properties wrongly listed as general properties to client properties
         remapGeneralPropertyToClient("biomeSkyBlendRange");
@@ -240,8 +202,7 @@
                 "Controls the number threshold at which Packet51 is preferred over Packet52, default and minimum 64, maximum 1024", 64, 1024);
         prop.setLanguageKey("forge.configgui.clumpingThreshold").setRequiresWorldRestart(true);
         clumpingThreshold = prop.getInt(64);
-        if (clumpingThreshold > 1024 || clumpingThreshold < 64)
-        {
+        if (clumpingThreshold > 1024 || clumpingThreshold < 64) {
             clumpingThreshold = 64;
             prop.set(64);
         }
@@ -259,8 +220,7 @@
         removeErroringEntities = prop.getBoolean(false);
         propOrder.add(prop.getName());
 
-        if (removeErroringEntities)
-        {
+        if (removeErroringEntities) {
             FMLLog.log.warn("Enabling removal of erroring Entities - USE AT YOUR OWN RISK");
         }
 
@@ -270,8 +230,7 @@
         removeErroringTileEntities = prop.getBoolean(false);
         propOrder.add(prop.getName());
 
-        if (removeErroringTileEntities)
-        {
+        if (removeErroringTileEntities) {
             FMLLog.log.warn("Enabling removal of erroring Tile Entities - USE AT YOUR OWN RISK");
         }
 
@@ -324,7 +283,7 @@
         propOrder = new ArrayList<String>();
 
         prop = config.get(Configuration.CATEGORY_CLIENT, "zoomInMissingModelTextInGui", false,
-        "Toggle off to make missing model text in the gui fit inside the slot.");
+                "Toggle off to make missing model text in the gui fit inside the slot.");
         zoomInMissingModelTextInGui = prop.getBoolean(false);
         prop.setLanguageKey("forge.configgui.zoomInMissingModelTextInGui");
         propOrder.add(prop.getName());
@@ -343,18 +302,18 @@
 
         prop = config.get(Configuration.CATEGORY_CLIENT, "alwaysSetupTerrainOffThread", false,
                 "Enable forge to queue all chunk updates to the Chunk Update thread. May increase FPS significantly, but may also cause weird rendering lag. Not recommended for computers " +
-                "without a significant number of cores available.");
+                        "without a significant number of cores available.");
         alwaysSetupTerrainOffThread = prop.getBoolean(false);
         prop.setLanguageKey("forge.configgui.alwaysSetupTerrainOffThread");
         propOrder.add(prop.getName());
-        
+
         prop = config.get(Configuration.CATEGORY_CLIENT, "allowEmissiveItems", true,
                 "Allow item rendering to detect emissive quads and draw them properly. This allows glowing blocks to look the same in item form, but incurs a very slight performance hit.");
         allowEmissiveItems = prop.getBoolean(true);
         prop.setLanguageKey("forge.configgui.allowEmissiveItems");
         propOrder.add(prop.getName());
 
-        prop = config.get(Configuration.CATEGORY_CLIENT, "biomeSkyBlendRange", new int[] { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34 });
+        prop = config.get(Configuration.CATEGORY_CLIENT, "biomeSkyBlendRange", new int[]{2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34});
         prop.setComment("Control the range of sky blending for colored skies in biomes.");
         prop.setLanguageKey("forge.configgui.biomeSkyBlendRange");
         blendRanges = prop.getIntList();
@@ -374,34 +333,43 @@
 
         config.setCategoryPropertyOrder(CATEGORY_CLIENT, propOrder);
 
-        if (config.hasChanged())
-        {
+        if (config.hasChanged()) {
             config.save();
         }
     }
 
+    private static void registerAllBiomesAndGenerateEvents() {
+        for (Biome biome : ForgeRegistries.BIOMES.getValuesCollection()) {
+            if (biome.decorator instanceof DeferredBiomeDecorator) {
+                DeferredBiomeDecorator decorator = (DeferredBiomeDecorator) biome.decorator;
+                decorator.fireCreateEventAndReplace(biome);
+            }
+
+            BiomeDictionary.ensureHasTypes(biome);
+        }
+    }
+
+    @Override
+    public String getGuiClassName() {
+        return "net.minecraftforge.client.gui.ForgeGuiFactory";
+    }
+
     /**
      * By subscribing to the OnConfigChangedEvent we are able to execute code when our config screens are closed.
      * This implementation uses the optional configID string to handle multiple Configurations using one event handler.
      */
     @SubscribeEvent
-    public void onConfigChanged(OnConfigChangedEvent event)
-    {
-        if (getMetadata().modId.equals(event.getModID()))
-        {
-            if ("chunkLoader".equals(event.getConfigID()))
-            {
+    public void onConfigChanged(OnConfigChangedEvent event) {
+        if (getMetadata().modId.equals(event.getModID())) {
+            if ("chunkLoader".equals(event.getConfigID())) {
                 ForgeChunkManager.syncConfigDefaults();
                 ForgeChunkManager.loadConfiguration();
-            }
-            else
-            {
+            } else {
                 boolean tmpStairs = disableStairSlabCulling;
 
                 syncConfig(false);
 
-                if (event.isWorldRunning() && tmpStairs != disableStairSlabCulling)
-                {
+                if (event.isWorldRunning() && tmpStairs != disableStairSlabCulling) {
                     FMLCommonHandler.instance().reloadRenderers();
                 }
 
@@ -410,10 +378,8 @@
     }
 
     @SubscribeEvent
-    public void missingMapping(RegistryEvent.MissingMappings<Item> event)
-    {
-        for (MissingMappings.Mapping<Item> entry : event.getAllMappings())
-        {
+    public void missingMapping(RegistryEvent.MissingMappings<Item> event) {
+        for (MissingMappings.Mapping<Item> entry : event.getAllMappings()) {
             if (entry.key.toString().equals("minecraft:totem")) //This item changed from 1.11 -> 1.11.2
             {
                 ResourceLocation newTotem = new ResourceLocation("minecraft:totem_of_undying");
@@ -423,21 +389,18 @@
     }
 
     @SubscribeEvent
-    public void playerLogin(PlayerEvent.PlayerLoggedInEvent event)
-    {
+    public void playerLogin(PlayerEvent.PlayerLoggedInEvent event) {
         UsernameCache.setUsername(event.player.getPersistentID(), event.player.getGameProfile().getName());
     }
 
     @Override
-    public boolean registerBus(EventBus bus, LoadController controller)
-    {
+    public boolean registerBus(EventBus bus, LoadController controller) {
         bus.register(this);
         return true;
     }
 
     @Subscribe
-    public void modConstruction(FMLConstructionEvent evt)
-    {
+    public void modConstruction(FMLConstructionEvent evt) {
         InputStream is = ForgeModContainer.class.getResourceAsStream("/META-INF/vanilla_annotations.json");
         if (is != null)
             JsonAnnotationLoader.loadJson(is, null, evt.getASMHarvestedData());
@@ -458,15 +421,11 @@
 
         log.debug("Preloading CrashReport Classes");
         Collections.sort(all); //Sort it because I like pretty output ;)
-        for (String name : all)
-        {
+        for (String name : all) {
             log.debug("\t{}", name);
-            try
-            {
+            try {
                 Class.forName(name.replace('/', '.'), false, MinecraftForge.class.getClassLoader());
-            }
-            catch (Exception e)
-            {
+            } catch (Exception e) {
                 log.error("Could not find class for name '{}'.", name, e);
             }
         }
@@ -478,32 +437,24 @@
     }
 
     @Subscribe
-    public void preInit(FMLPreInitializationEvent evt)
-    {
+    public void preInit(FMLPreInitializationEvent evt) {
         CapabilityItemHandler.register();
         CapabilityFluidHandler.register();
         CapabilityAnimation.register();
         CapabilityEnergy.register();
         MinecraftForge.EVENT_BUS.register(MinecraftForge.INTERNAL_HANDLER);
-        if (FMLCommonHandler.instance().getSide() == Side.CLIENT)
-        {
+        if (FMLCommonHandler.instance().getSide() == Side.CLIENT) {
             MinecraftForge.EVENT_BUS.register(ForgeClientHandler.class);
         }
         ForgeChunkManager.captureConfig(evt.getModConfigurationDirectory());
         MinecraftForge.EVENT_BUS.register(this);
 
-        if (!ForgeModContainer.disableVersionCheck)
-        {
-            ForgeVersion.startVersionCheck();
-        }
     }
 
     @SubscribeEvent
-    public void registrItems(RegistryEvent.Register<Item> event)
-    {
+    public void registrItems(RegistryEvent.Register<Item> event) {
         // Add and register the forge universal bucket, if it's enabled
-        if(FluidRegistry.isUniversalBucketEnabled())
-        {
+        if (FluidRegistry.isUniversalBucketEnabled()) {
             universalBucket = new UniversalBucket();
             universalBucket.setUnlocalizedName("forge.bucketFilled");
             event.getRegistry().register(universalBucket.setRegistryName(ForgeVersion.MOD_ID, "bucketFilled"));
@@ -512,51 +463,31 @@
     }
 
     @Subscribe
-    public void postInit(FMLPostInitializationEvent evt)
-    {
+    public void postInit(FMLPostInitializationEvent evt) {
         registerAllBiomesAndGenerateEvents();
         ForgeChunkManager.loadConfiguration();
     }
 
-    private static void registerAllBiomesAndGenerateEvents()
-    {
-        for (Biome biome : ForgeRegistries.BIOMES.getValuesCollection())
-        {
-            if (biome.decorator instanceof DeferredBiomeDecorator)
-            {
-                DeferredBiomeDecorator decorator = (DeferredBiomeDecorator)biome.decorator;
-                decorator.fireCreateEventAndReplace(biome);
-            }
-
-            BiomeDictionary.ensureHasTypes(biome);
-        }
-    }
-
     @Subscribe
-    public void onAvailable(FMLLoadCompleteEvent evt)
-    {
-        if (shouldSortRecipies)
-        {
+    public void onAvailable(FMLLoadCompleteEvent evt) {
+        if (shouldSortRecipies) {
             RecipeSorter.sortCraftManager();
         }
         FluidRegistry.validateFluidRegistry();
     }
 
     @Subscribe
-    public void serverStarting(FMLServerStartingEvent evt)
-    {
+    public void serverStarting(FMLServerStartingEvent evt) {
         evt.registerServerCommand(new ForgeCommand());
     }
 
     @Subscribe
-    public void serverStopping(FMLServerStoppingEvent evt)
-    {
+    public void serverStopping(FMLServerStoppingEvent evt) {
         WorldWorkerManager.clear();
     }
 
     @Override
-    public NBTTagCompound getDataForWriting(SaveHandler handler, WorldInfo info)
-    {
+    public NBTTagCompound getDataForWriting(SaveHandler handler, WorldInfo info) {
         NBTTagCompound forgeData = new NBTTagCompound();
         NBTTagCompound dimData = DimensionManager.saveDimensionDataMap();
         forgeData.setTag("DimensionData", dimData);
@@ -565,15 +496,13 @@
     }
 
     @Override
-    public void readData(SaveHandler handler, WorldInfo info, Map<String, NBTBase> propertyMap, NBTTagCompound tag)
-    {
+    public void readData(SaveHandler handler, WorldInfo info, Map<String, NBTBase> propertyMap, NBTTagCompound tag) {
         DimensionManager.loadDimensionDataMap(tag.hasKey("DimensionData") ? tag.getCompoundTag("DimensionData") : null);
         FluidRegistry.loadFluidDefaults(tag);
     }
 
     @Subscribe
-    public void mappingChanged(FMLModIdMappingEvent evt)
-    {
+    public void mappingChanged(FMLModIdMappingEvent evt) {
         OreDictionary.rebakeMap();
         StatList.reinit();
         Ingredient.invalidateAll();
@@ -584,26 +513,21 @@
 
 
     @Override
-    public File getSource()
-    {
+    public File getSource() {
         return FMLForgePlugin.forgeLocation;
     }
+
     @Override
-    public Class<?> getCustomResourcePackClass()
-    {
-        if (getSource().isDirectory())
-        {
+    public Class<?> getCustomResourcePackClass() {
+        if (getSource().isDirectory()) {
             return FMLFolderResourcePack.class;
-        }
-        else
-        {
+        } else {
             return FMLFileResourcePack.class;
         }
     }
 
     @Override
-    public List<String> getOwnedPackages()
-    {
+    public List<String> getOwnedPackages() {
         // All the packages which are part of forge. Only needs updating if new logic is added
         // that requires event handlers
         return ImmutableList.of(
@@ -632,22 +556,19 @@
                 "net.minecraftforge.server",
                 "net.minecraftforge.server.command",
                 "net.minecraftforge.transformers"
-                );
+        );
     }
 
 
-
     @Override
     @Nullable
-    public Certificate getSigningCertificate()
-    {
+    public Certificate getSigningCertificate() {
         Certificate[] certificates = getClass().getProtectionDomain().getCodeSource().getCertificates();
         return certificates != null ? certificates[0] : null;
     }
 
     @Override
-    public URL getUpdateUrl()
-    {
+    public URL getUpdateUrl() {
         return updateJSONUrl;
     }
 
