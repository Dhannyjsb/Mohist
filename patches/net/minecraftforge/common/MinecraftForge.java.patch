--- ../src-base/minecraft/net/minecraftforge/common/MinecraftForge.java
+++ ../src-work/minecraft/net/minecraftforge/common/MinecraftForge.java
@@ -19,32 +19,26 @@
 
 package net.minecraftforge.common;
 
+import com.google.common.collect.Lists;
+import net.minecraft.crash.CrashReport;
+import net.minecraft.crash.ICrashReportDetail;
+import net.minecraft.item.ItemStack;
+import net.minecraftforge.common.ForgeHooks.SeedEntry;
+import net.minecraftforge.fluids.FluidRegistry;
 import net.minecraftforge.fml.common.FMLLog;
 import net.minecraftforge.fml.common.ICrashCallable;
 import net.minecraftforge.fml.common.Loader;
 import net.minecraftforge.fml.common.discovery.ASMDataTable;
 import net.minecraftforge.fml.common.discovery.ASMDataTable.ASMData;
 import net.minecraftforge.fml.common.eventhandler.EventBus;
+import net.minecraftforge.oredict.OreDictionary;
 
+import javax.annotation.Nonnull;
 import java.util.Collections;
 import java.util.List;
 import java.util.Set;
 
-import org.apache.logging.log4j.Level;
-
-import com.google.common.collect.Lists;
-
-import net.minecraft.crash.CrashReport;
-import net.minecraft.crash.ICrashReportDetail;
-import net.minecraft.item.ItemStack;
-import net.minecraftforge.common.ForgeHooks.SeedEntry;
-import net.minecraftforge.fluids.FluidRegistry;
-import net.minecraftforge.oredict.OreDictionary;
-
-import javax.annotation.Nonnull;
-
-public class MinecraftForge
-{
+public class MinecraftForge {
     /**
      * The core Forge EventBusses, all events for Forge will be fired on these,
      * you should use this to register all your listeners.
@@ -69,63 +63,54 @@
      *
      * Note: These functions may be going away soon, we're looking into loot tables....
      */
-    public static void addGrassSeed(@Nonnull ItemStack seed, int weight)
-    {
+    public static void addGrassSeed(@Nonnull ItemStack seed, int weight) {
         addGrassSeed(new SeedEntry(seed, weight));
     }
-    public static void addGrassSeed(SeedEntry seed)
-    {
+
+    public static void addGrassSeed(SeedEntry seed) {
         ForgeHooks.seedList.add(seed);
     }
 
-   /**
-    * Method invoked by FML before any other mods are loaded.
-    */
-   public static void initialize()
-   {
-       FMLLog.log.info("MinecraftForge v{} Initialized", ForgeVersion.getVersion());
+    /**
+     * Method invoked by FML before any other mods are loaded.
+     */
+    public static void initialize() {
+        FMLLog.log.info("MinecraftForge v{} Initialized", ForgeVersion.getVersion());
 
-       OreDictionary.getOreName(0);
+        OreDictionary.getOreName(0);
 
-       UsernameCache.load();
-       // Load before all the mods, so MC owns the MC fluids
-       FluidRegistry.validateFluidRegistry();
-       ForgeHooks.initTools();
+        UsernameCache.load();
+        // Load before all the mods, so MC owns the MC fluids
+        FluidRegistry.validateFluidRegistry();
+        ForgeHooks.initTools();
 
-       //For all the normal CrashReport classes to be defined. We're in MC's classloader so this should all be fine
-       new CrashReport("ThisIsFake", new Exception("Not real"));
-   }
+        //For all the normal CrashReport classes to be defined. We're in MC's classloader so this should all be fine
+        new CrashReport("ThisIsFake", new Exception("Not real"));
+    }
 
 
+    public static void preloadCrashClasses(ASMDataTable table, String modID, Set<String> classes) {
+        //Find all ICrashReportDetail's handlers and preload them.
+        List<String> all = Lists.newArrayList();
+        for (ASMData asm : table.getAll(ICrashReportDetail.class.getName().replace('.', '/')))
+            all.add(asm.getClassName());
+        for (ASMData asm : table.getAll(ICrashCallable.class.getName().replace('.', '/')))
+            all.add(asm.getClassName());
 
+        all.retainAll(classes);
 
-   public static void preloadCrashClasses(ASMDataTable table, String modID, Set<String> classes)
-   {
-       //Find all ICrashReportDetail's handlers and preload them.
-       List<String> all = Lists.newArrayList();
-       for (ASMData asm : table.getAll(ICrashReportDetail.class.getName().replace('.', '/')))
-           all.add(asm.getClassName());
-       for (ASMData asm : table.getAll(ICrashCallable.class.getName().replace('.', '/')))
-           all.add(asm.getClassName());
+        if (all.size() == 0)
+            return;
 
-       all.retainAll(classes);
-
-       if (all.size() == 0)
-        return;
-
-       ForgeModContainer.log.debug("Preloading CrashReport Classes");
-       Collections.sort(all); //Sort it because I like pretty output ;)
-       for (String name : all)
-       {
-           ForgeModContainer.log.debug("\t{}", name);
-           try
-           {
-               Class.forName(name.replace('/', '.'), false, MinecraftForge.class.getClassLoader());
-           }
-           catch (Exception e)
-           {
-               FMLLog.log.error("Could not find class for name '{}'.", name, e);
-           }
-       }
-   }
+        ForgeModContainer.log.debug("Preloading CrashReport Classes");
+        Collections.sort(all); //Sort it because I like pretty output ;)
+        for (String name : all) {
+            ForgeModContainer.log.debug("\t{}", name);
+            try {
+                Class.forName(name.replace('/', '.'), false, MinecraftForge.class.getClassLoader());
+            } catch (Exception e) {
+                FMLLog.log.error("Could not find class for name '{}'.", name, e);
+            }
+        }
+    }
 }
