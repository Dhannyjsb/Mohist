--- ../src-base/minecraft/net/minecraftforge/common/UsernameCache.java
+++ ../src-work/minecraft/net/minecraftforge/common/UsernameCache.java
@@ -19,8 +19,18 @@
 
 package net.minecraftforge.common;
 
-import static com.google.common.base.Preconditions.checkNotNull;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Maps;
+import com.google.common.io.Files;
+import com.google.common.reflect.TypeToken;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.JsonSyntaxException;
+import net.minecraftforge.fml.relauncher.FMLInjectionData;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
+import javax.annotation.Nullable;
 import java.io.File;
 import java.io.IOException;
 import java.lang.reflect.Type;
@@ -29,21 +39,8 @@
 import java.util.Map;
 import java.util.UUID;
 
-import javax.annotation.Nullable;
+import static com.google.common.base.Preconditions.checkNotNull;
 
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-
-import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.Maps;
-import com.google.common.io.Files;
-import com.google.common.reflect.TypeToken;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonSyntaxException;
-
-import net.minecraftforge.fml.relauncher.FMLInjectionData;
-
 /**
  * Caches player's last known usernames
  * <p>
@@ -54,16 +51,14 @@
  */
 public final class UsernameCache {
 
-    private static Map<UUID, String> map = Maps.newHashMap();
-
     private static final Charset charset = StandardCharsets.UTF_8;
-
     private static final File saveFile = new File( /* The minecraft dir */(File) FMLInjectionData.data()[6], "usernamecache.json");
     private static final Gson gson = new GsonBuilder().setPrettyPrinting().create();
-
     private static final Logger log = LogManager.getLogger(ForgeVersion.MOD_ID + ".UsernameCache");
+    private static Map<UUID, String> map = Maps.newHashMap();
 
-    private UsernameCache() {}
+    private UsernameCache() {
+    }
 
     /**
      * Set a player's current username
@@ -73,8 +68,7 @@
      * @param username
      *            the player's username
      */
-    protected static void setUsername(UUID uuid, String username)
-    {
+    protected static void setUsername(UUID uuid, String username) {
         checkNotNull(uuid);
         checkNotNull(username);
 
@@ -91,12 +85,10 @@
      *            the player's {@link java.util.UUID UUID}
      * @return if the cache contained the user
      */
-    protected static boolean removeUsername(UUID uuid)
-    {
+    protected static boolean removeUsername(UUID uuid) {
         checkNotNull(uuid);
 
-        if (map.remove(uuid) != null)
-        {
+        if (map.remove(uuid) != null) {
             save();
             return true;
         }
@@ -115,8 +107,7 @@
      *         cache doesn't have a record of the last username
      */
     @Nullable
-    public static String getLastKnownUsername(UUID uuid)
-    {
+    public static String getLastKnownUsername(UUID uuid) {
         checkNotNull(uuid);
         return map.get(uuid);
     }
@@ -128,8 +119,7 @@
      *            the player's {@link java.util.UUID UUID}
      * @return if the cache contains a username for the given player
      */
-    public static boolean containsUUID(UUID uuid)
-    {
+    public static boolean containsUUID(UUID uuid) {
         checkNotNull(uuid);
         return map.containsKey(uuid);
     }
@@ -139,49 +129,40 @@
      *
      * @return the map
      */
-    public static Map<UUID, String> getMap()
-    {
+    public static Map<UUID, String> getMap() {
         return ImmutableMap.copyOf(map);
     }
 
     /**
      * Save the cache to file
      */
-    protected static void save()
-    {
+    protected static void save() {
         new SaveThread(gson.toJson(map)).start();
     }
 
     /**
      * Load the cache from file
      */
-    protected static void load()
-    {
+    protected static void load() {
         if (!saveFile.exists()) return;
 
-        try
-        {
+        try {
 
             String json = Files.toString(saveFile, charset);
-            Type type = new TypeToken<Map<UUID, String>>() { private static final long serialVersionUID = 1L; }.getType();
+            Type type = new TypeToken<Map<UUID, String>>() {
+                private static final long serialVersionUID = 1L;
+            }.getType();
 
             map = gson.fromJson(json, type);
-        }
-        catch (JsonSyntaxException e)
-        {
+        } catch (JsonSyntaxException e) {
             log.error("Could not parse username cache file as valid json, deleting file", e);
             saveFile.delete();
-        }
-        catch (IOException e)
-        {
+        } catch (IOException e) {
             log.error("Failed to read username cache file from disk, deleting file", e);
             saveFile.delete();
-        }
-        finally
-        {
+        } finally {
             // Can sometimes occur when the json file is malformed
-            if (map == null)
-            {
+            if (map == null) {
                 map = Maps.newHashMap();
             }
         }
@@ -196,24 +177,18 @@
         /** The data that will be saved to disk */
         private final String data;
 
-        public SaveThread(String data)
-        {
+        public SaveThread(String data) {
             this.data = data;
         }
 
         @Override
-        public void run()
-        {
-            try
-            {
+        public void run() {
+            try {
                 // Make sure we don't save when another thread is still saving
-                synchronized (saveFile)
-                {
+                synchronized (saveFile) {
                     Files.write(data, saveFile, charset);
                 }
-            }
-            catch (IOException e)
-            {
+            } catch (IOException e) {
                 log.error("Failed to save username cache to file!", e);
             }
         }
