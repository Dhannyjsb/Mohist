--- ../src-base/minecraft/net/minecraftforge/event/entity/living/LivingEntityUseItemEvent.java
+++ ../src-work/minecraft/net/minecraftforge/event/entity/living/LivingEntityUseItemEvent.java
@@ -25,31 +25,26 @@
 
 import javax.annotation.Nonnull;
 
-public class LivingEntityUseItemEvent extends LivingEvent
-{
+public class LivingEntityUseItemEvent extends LivingEvent {
     private final ItemStack item;
     private int duration;
 
-    private LivingEntityUseItemEvent(EntityLivingBase entity, @Nonnull ItemStack item, int duration)
-    {
+    private LivingEntityUseItemEvent(EntityLivingBase entity, @Nonnull ItemStack item, int duration) {
         super(entity);
         this.item = item;
         this.setDuration(duration);
     }
 
     @Nonnull
-    public ItemStack getItem()
-    {
+    public ItemStack getItem() {
         return item;
     }
 
-    public int getDuration()
-    {
+    public int getDuration() {
         return duration;
     }
 
-    public void setDuration(int duration)
-    {
+    public void setDuration(int duration) {
         this.duration = duration;
     }
 
@@ -65,10 +60,8 @@
      *
      */
     @Cancelable
-    public static class Start extends LivingEntityUseItemEvent
-    {
-        public Start(EntityLivingBase entity, @Nonnull ItemStack item, int duration)
-        {
+    public static class Start extends LivingEntityUseItemEvent {
+        public Start(EntityLivingBase entity, @Nonnull ItemStack item, int duration) {
             super(entity, item, duration);
         }
     }
@@ -80,10 +73,8 @@
      *
      */
     @Cancelable
-    public static class Tick extends LivingEntityUseItemEvent
-    {
-        public Tick(EntityLivingBase entity, @Nonnull ItemStack item, int duration)
-        {
+    public static class Tick extends LivingEntityUseItemEvent {
+        public Tick(EntityLivingBase entity, @Nonnull ItemStack item, int duration) {
             super(entity, item, duration);
         }
     }
@@ -101,10 +92,8 @@
      * The only vanilla item this would effect are bows, and it would cause them NOT to fire there arrow.
      */
     @Cancelable
-    public static class Stop extends LivingEntityUseItemEvent
-    {
-        public Stop(EntityLivingBase entity, @Nonnull ItemStack item, int duration)
-        {
+    public static class Stop extends LivingEntityUseItemEvent {
+        public Stop(EntityLivingBase entity, @Nonnull ItemStack item, int duration) {
             super(entity, item, duration);
         }
     }
@@ -113,7 +102,7 @@
      * Fired after an item has fully finished being used.
      * The item has been notified that it was used, and the item/result stacks reflect after that state.
      * This means that when this is fired for a Potion, the potion effect has already been applied.
-     * 
+     *
      * {@link LivingEntityUseItemEvent#item} is a copy of the item BEFORE it was used.
      *
      * If you wish to cancel those effects, you should cancel one of the above events.
@@ -121,23 +110,20 @@
      * The result item stack is the stack that is placed in the player's inventory in replacement of the stack that is currently being used.
      *
      */
-    public static class Finish extends LivingEntityUseItemEvent
-    {
+    public static class Finish extends LivingEntityUseItemEvent {
         private ItemStack result;
-        public Finish(EntityLivingBase entity, @Nonnull ItemStack item, int duration, @Nonnull ItemStack result)
-        {
+
+        public Finish(EntityLivingBase entity, @Nonnull ItemStack item, int duration, @Nonnull ItemStack result) {
             super(entity, item, duration);
             this.setResultStack(result);
         }
 
         @Nonnull
-        public ItemStack getResultStack()
-        {
+        public ItemStack getResultStack() {
             return result;
         }
 
-        public void setResultStack(@Nonnull ItemStack result)
-        {
+        public void setResultStack(@Nonnull ItemStack result) {
             this.result = result;
         }
     }
