--- ../src-base/minecraft/net/minecraftforge/client/settings/KeyModifier.java
+++ ../src-work/minecraft/net/minecraftforge/client/settings/KeyModifier.java
@@ -19,44 +19,37 @@
 
 package net.minecraftforge.client.settings;
 
-import javax.annotation.Nullable;
-
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.GuiScreen;
 import net.minecraft.client.resources.I18n;
 import net.minecraft.client.settings.GameSettings;
 import org.lwjgl.input.Keyboard;
 
+import javax.annotation.Nullable;
+
 public enum KeyModifier {
     CONTROL {
         @Override
-        public boolean matches(int keyCode)
-        {
-            if (Minecraft.IS_RUNNING_ON_MAC)
-            {
+        public boolean matches(int keyCode) {
+            if (Minecraft.IS_RUNNING_ON_MAC) {
                 return keyCode == Keyboard.KEY_LMETA || keyCode == Keyboard.KEY_RMETA;
-            }
-            else
-            {
+            } else {
                 return keyCode == Keyboard.KEY_LCONTROL || keyCode == Keyboard.KEY_RCONTROL;
             }
         }
 
         @Override
-        public boolean isActive()
-        {
+        public boolean isActive() {
             return GuiScreen.isCtrlKeyDown();
         }
 
         @Override
-        public boolean isActive(@Nullable IKeyConflictContext conflictContext)
-        {
+        public boolean isActive(@Nullable IKeyConflictContext conflictContext) {
             return GuiScreen.isCtrlKeyDown();
         }
 
         @Override
-        public String getLocalizedComboName(int keyCode)
-        {
+        public String getLocalizedComboName(int keyCode) {
             String keyName = GameSettings.getKeyDisplayString(keyCode);
             String localizationFormatKey = Minecraft.IS_RUNNING_ON_MAC ? "forge.controlsgui.control.mac" : "forge.controlsgui.control";
             return I18n.format(localizationFormatKey, keyName);
@@ -64,78 +57,64 @@
     },
     SHIFT {
         @Override
-        public boolean matches(int keyCode)
-        {
+        public boolean matches(int keyCode) {
             return keyCode == Keyboard.KEY_LSHIFT || keyCode == Keyboard.KEY_RSHIFT;
         }
 
         @Override
-        public boolean isActive()
-        {
+        public boolean isActive() {
             return GuiScreen.isShiftKeyDown();
         }
 
         @Override
-        public boolean isActive(@Nullable IKeyConflictContext conflictContext)
-        {
+        public boolean isActive(@Nullable IKeyConflictContext conflictContext) {
             return GuiScreen.isShiftKeyDown();
         }
 
         @Override
-        public String getLocalizedComboName(int keyCode)
-        {
+        public String getLocalizedComboName(int keyCode) {
             String keyName = GameSettings.getKeyDisplayString(keyCode);
             return I18n.format("forge.controlsgui.shift", keyName);
         }
     },
     ALT {
         @Override
-        public boolean matches(int keyCode)
-        {
+        public boolean matches(int keyCode) {
             return keyCode == Keyboard.KEY_LMENU || keyCode == Keyboard.KEY_RMENU;
         }
 
         @Override
-        public boolean isActive()
-        {
+        public boolean isActive() {
             return GuiScreen.isAltKeyDown();
         }
 
         @Override
-        public boolean isActive(@Nullable IKeyConflictContext conflictContext)
-        {
+        public boolean isActive(@Nullable IKeyConflictContext conflictContext) {
             return GuiScreen.isAltKeyDown();
         }
 
         @Override
-        public String getLocalizedComboName(int keyCode)
-        {
+        public String getLocalizedComboName(int keyCode) {
             String keyName = GameSettings.getKeyDisplayString(keyCode);
             return I18n.format("forge.controlsgui.alt", keyName);
         }
     },
     NONE {
         @Override
-        public boolean matches(int keyCode)
-        {
+        public boolean matches(int keyCode) {
             return false;
         }
 
         @Override
-        public boolean isActive()
-        {
+        public boolean isActive() {
             return true;
         }
 
         @Override
-        public boolean isActive(@Nullable IKeyConflictContext conflictContext)
-        {
-            if (conflictContext != null && !conflictContext.conflicts(KeyConflictContext.IN_GAME))
-            {
-                for (KeyModifier keyModifier : MODIFIER_VALUES)
-                {
-                    if (keyModifier.isActive(conflictContext))
-                    {
+        public boolean isActive(@Nullable IKeyConflictContext conflictContext) {
+            if (conflictContext != null && !conflictContext.conflicts(KeyConflictContext.IN_GAME)) {
+                for (KeyModifier keyModifier : MODIFIER_VALUES) {
+                    if (keyModifier.isActive(conflictContext)) {
                         return false;
                     }
                 }
@@ -144,46 +123,35 @@
         }
 
         @Override
-        public String getLocalizedComboName(int keyCode)
-        {
+        public String getLocalizedComboName(int keyCode) {
             return GameSettings.getKeyDisplayString(keyCode);
         }
     };
 
     public static final KeyModifier[] MODIFIER_VALUES = {SHIFT, CONTROL, ALT};
 
-    public static KeyModifier getActiveModifier()
-    {
-        for (KeyModifier keyModifier : MODIFIER_VALUES)
-        {
-            if (keyModifier.isActive(null))
-            {
+    public static KeyModifier getActiveModifier() {
+        for (KeyModifier keyModifier : MODIFIER_VALUES) {
+            if (keyModifier.isActive(null)) {
                 return keyModifier;
             }
         }
         return NONE;
     }
 
-    public static boolean isKeyCodeModifier(int keyCode)
-    {
-        for (KeyModifier keyModifier : MODIFIER_VALUES)
-        {
-            if (keyModifier.matches(keyCode))
-            {
+    public static boolean isKeyCodeModifier(int keyCode) {
+        for (KeyModifier keyModifier : MODIFIER_VALUES) {
+            if (keyModifier.matches(keyCode)) {
                 return true;
             }
         }
         return false;
     }
 
-    public static KeyModifier valueFromString(String stringValue)
-    {
-        try
-        {
+    public static KeyModifier valueFromString(String stringValue) {
+        try {
             return valueOf(stringValue);
-        }
-        catch (NullPointerException | IllegalArgumentException ignored)
-        {
+        } catch (NullPointerException | IllegalArgumentException ignored) {
             return NONE;
         }
     }
