--- ../src-base/minecraft/net/minecraftforge/client/model/SimpleModelFontRenderer.java
+++ ../src-work/minecraft/net/minecraftforge/client/model/SimpleModelFontRenderer.java
@@ -19,15 +19,7 @@
 
 package net.minecraftforge.client.model;
 
-import javax.vecmath.Matrix4f;
-import javax.vecmath.Vector3f;
-import javax.vecmath.Vector4f;
-
-import net.minecraftforge.client.model.pipeline.UnpackedBakedQuad;
-import net.minecraftforge.common.model.TRSRTransformation;
-
 import com.google.common.collect.ImmutableList;
-
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.FontRenderer;
 import net.minecraft.client.renderer.block.model.BakedQuad;
@@ -38,21 +30,26 @@
 import net.minecraft.client.settings.GameSettings;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.ResourceLocation;
+import net.minecraftforge.client.model.pipeline.UnpackedBakedQuad;
+import net.minecraftforge.common.model.TRSRTransformation;
 
+import javax.vecmath.Matrix4f;
+import javax.vecmath.Vector3f;
+import javax.vecmath.Vector4f;
+
 public abstract class SimpleModelFontRenderer extends FontRenderer {
 
-    private float r, g, b, a;
     private final TRSRTransformation transform;
-    private ImmutableList.Builder<BakedQuad> builder = ImmutableList.builder();
     private final VertexFormat format;
     private final Vector3f normal = new Vector3f(0, 0, 1);
     private final EnumFacing orientation;
+    private final Vector4f vec = new Vector4f();
+    private float r, g, b, a;
+    private ImmutableList.Builder<BakedQuad> builder = ImmutableList.builder();
     private boolean fillBlanks = false;
-
     private TextureAtlasSprite sprite;
 
-    public SimpleModelFontRenderer(GameSettings settings, ResourceLocation font, TextureManager manager, boolean isUnicode, Matrix4f matrix, VertexFormat format)
-    {
+    public SimpleModelFontRenderer(GameSettings settings, ResourceLocation font, TextureManager manager, boolean isUnicode, Matrix4f matrix, VertexFormat format) {
         super(settings, font, manager, isUnicode);
         this.transform = new TRSRTransformation(matrix);
         this.format = format;
@@ -60,73 +57,64 @@
         orientation = EnumFacing.getFacingFromVector(normal.x, normal.y, normal.z);
     }
 
-    public void setSprite(TextureAtlasSprite sprite)
-    {
+    public void setSprite(TextureAtlasSprite sprite) {
         this.sprite = sprite;
         super.onResourceManagerReload(null);
     }
 
-    public void setFillBlanks(boolean fillBlanks)
-    {
+    public void setFillBlanks(boolean fillBlanks) {
         this.fillBlanks = fillBlanks;
     }
 
     @Override
-    protected float renderDefaultChar(int pos, boolean italic)
-    {
+    protected float renderDefaultChar(int pos, boolean italic) {
         float x = (pos % 16) / 16f;
         float y = (pos / 16) / 16f;
         float sh = italic ? 1f : 0f;
         float w = charWidth[pos] - 1.01f;
         float h = FONT_HEIGHT - 1.01f;
-        float wt = w  / 128f;
-        float ht = h  / 128f;
+        float wt = w / 128f;
+        float ht = h / 128f;
 
         UnpackedBakedQuad.Builder quadBuilder = new UnpackedBakedQuad.Builder(format);
         quadBuilder.setTexture(sprite);
         quadBuilder.setQuadOrientation(orientation);
 
-        addVertex(quadBuilder, posX + sh,     posY,     x,      y);
-        addVertex(quadBuilder, posX - sh,     posY + h, x,      y + ht);
+        addVertex(quadBuilder, posX + sh, posY, x, y);
+        addVertex(quadBuilder, posX - sh, posY + h, x, y + ht);
         addVertex(quadBuilder, posX + w + sh, posY + h, x + wt, y + ht);
-        addVertex(quadBuilder, posX + w - sh, posY,     x + wt, y);
+        addVertex(quadBuilder, posX + w - sh, posY, x + wt, y);
         builder.add(quadBuilder.build());
 
-        if(fillBlanks)
-        {
+        if (fillBlanks) {
             float cuv = 15f / 16f;
 
             quadBuilder = new UnpackedBakedQuad.Builder(format);
             quadBuilder.setTexture(sprite);
             quadBuilder.setQuadOrientation(orientation);
 
-            addVertex(quadBuilder, posX + w + sh,              posY,     cuv, cuv);
-            addVertex(quadBuilder, posX + w - sh,              posY + h, cuv, cuv);
+            addVertex(quadBuilder, posX + w + sh, posY, cuv, cuv);
+            addVertex(quadBuilder, posX + w - sh, posY + h, cuv, cuv);
             addVertex(quadBuilder, posX + charWidth[pos] + sh, posY + h, cuv, cuv);
-            addVertex(quadBuilder, posX + charWidth[pos] - sh, posY,     cuv, cuv);
+            addVertex(quadBuilder, posX + charWidth[pos] - sh, posY, cuv, cuv);
             builder.add(quadBuilder.build());
 
             quadBuilder = new UnpackedBakedQuad.Builder(format);
             quadBuilder.setTexture(sprite);
             quadBuilder.setQuadOrientation(orientation);
 
-            addVertex(quadBuilder, posX + sh,                  posY + h,           cuv, cuv);
-            addVertex(quadBuilder, posX - sh,                  posY + FONT_HEIGHT, cuv, cuv);
+            addVertex(quadBuilder, posX + sh, posY + h, cuv, cuv);
+            addVertex(quadBuilder, posX - sh, posY + FONT_HEIGHT, cuv, cuv);
             addVertex(quadBuilder, posX + charWidth[pos] + sh, posY + FONT_HEIGHT, cuv, cuv);
-            addVertex(quadBuilder, posX + charWidth[pos] - sh, posY + h,           cuv, cuv);
+            addVertex(quadBuilder, posX + charWidth[pos] - sh, posY + h, cuv, cuv);
             builder.add(quadBuilder.build());
         }
         return charWidth[pos];
     }
 
-    private final Vector4f vec = new Vector4f();
-
-    private void addVertex(UnpackedBakedQuad.Builder quadBuilder, float x, float y, float u, float v)
-    {
-        for(int e = 0; e < format.getElementCount(); e++)
-        {
-            switch(format.getElement(e).getUsage())
-            {
+    private void addVertex(UnpackedBakedQuad.Builder quadBuilder, float x, float y, float u, float v) {
+        for (int e = 0; e < format.getElementCount(); e++) {
+            switch (format.getElement(e).getUsage()) {
                 case POSITION:
                     vec.set(x, y, 0f, 1f);
                     transform.transformPosition(vec);
@@ -140,8 +128,7 @@
                     quadBuilder.put(e, 0, 0, 1, 1);
                     break;
                 case UV:
-                    if(format.getElement(e).getIndex() == 0)
-                    {
+                    if (format.getElement(e).getIndex() == 0) {
                         quadBuilder.put(e, sprite.getInterpolatedU(u * 16), sprite.getInterpolatedV(v * 16), 0, 1);
                         break;
                     }
@@ -154,12 +141,11 @@
     }
 
     @Override
-    public void onResourceManagerReload(IResourceManager resourceManager)
-    {
+    public void onResourceManagerReload(IResourceManager resourceManager) {
         super.onResourceManagerReload(resourceManager);
         String p = locationFontTexture.getResourcePath();
-        if(p.startsWith("textures/")) p = p.substring("textures/".length(), p.length());
-        if(p.endsWith(".png")) p = p.substring(0, p.length() - ".png".length());
+        if (p.startsWith("textures/")) p = p.substring("textures/".length(), p.length());
+        if (p.endsWith(".png")) p = p.substring(0, p.length() - ".png".length());
         String f = locationFontTexture.getResourceDomain() + ":" + p;
         sprite = Minecraft.getMinecraft().getTextureMapBlocks().getAtlasSprite(f);
     }
@@ -168,31 +154,27 @@
     protected abstract float renderUnicodeChar(char c, boolean italic);
 
     @Override
-    protected void doDraw(float shift)
-    {
-        posX += (int)shift;
+    protected void doDraw(float shift) {
+        posX += (int) shift;
     }
 
     @Override
-    protected void setColor(float r, float g, float b, float a)
-    {
+    protected void setColor(float r, float g, float b, float a) {
         this.r = r;
         this.g = g;
         this.b = b;
         this.a = a;
     }
 
-    @Override public void enableAlpha()
-    {
+    @Override
+    public void enableAlpha() {
     }
 
     @Override
-    protected void bindTexture(ResourceLocation location)
-    {
+    protected void bindTexture(ResourceLocation location) {
     }
 
-    public ImmutableList<BakedQuad> build()
-    {
+    public ImmutableList<BakedQuad> build() {
         ImmutableList<BakedQuad> ret = builder.build();
         builder = ImmutableList.builder();
         return ret;
