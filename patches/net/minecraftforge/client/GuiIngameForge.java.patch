--- ../src-base/minecraft/net/minecraftforge/client/GuiIngameForge.java
+++ ../src-work/minecraft/net/minecraftforge/client/GuiIngameForge.java
@@ -19,19 +19,9 @@
 
 package net.minecraftforge.client;
 
-import static net.minecraftforge.client.event.RenderGameOverlayEvent.ElementType.*;
-
-import java.awt.Color;
-import java.util.ArrayList;
-import java.util.List;
-
 import net.minecraft.block.material.Material;
 import net.minecraft.client.Minecraft;
-import net.minecraft.client.gui.FontRenderer;
-import net.minecraft.client.gui.Gui;
-import net.minecraft.client.gui.GuiIngame;
-import net.minecraft.client.gui.GuiOverlayDebug;
-import net.minecraft.client.gui.ScaledResolution;
+import net.minecraft.client.gui.*;
 import net.minecraft.client.network.NetHandlerPlayClient;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.OpenGlHelper;
@@ -58,11 +48,15 @@
 import net.minecraftforge.client.event.RenderGameOverlayEvent.ElementType;
 import net.minecraftforge.common.ForgeHooks;
 import net.minecraftforge.common.MinecraftForge;
-
 import org.lwjgl.opengl.GL11;
 
-public class GuiIngameForge extends GuiIngame
-{
+import java.awt.*;
+import java.util.ArrayList;
+import java.util.List;
+
+import static net.minecraftforge.client.event.RenderGameOverlayEvent.ElementType.*;
+
+public class GuiIngameForge extends GuiIngame {
     //private static final ResourceLocation VIGNETTE     = new ResourceLocation("textures/misc/vignette.png");
     //private static final ResourceLocation WIDGITS      = new ResourceLocation("textures/gui/widgets.png");
     //private static final ResourceLocation PUMPKIN_BLUR = new ResourceLocation("textures/misc/pumpkinblur.png");
@@ -96,15 +90,13 @@
     //private static final String MC_VERSION = MinecraftForge.MC_VERSION;
     private GuiOverlayDebugForge debugOverlay;
 
-    public GuiIngameForge(Minecraft mc)
-    {
+    public GuiIngameForge(Minecraft mc) {
         super(mc);
         debugOverlay = new GuiOverlayDebugForge(mc);
     }
 
     @Override
-    public void renderGameOverlay(float partialTicks)
-    {
+    public void renderGameOverlay(float partialTicks) {
         res = new ScaledResolution(mc);
         eventParent = new RenderGameOverlayEvent(partialTicks, res);
         int width = res.getScaledWidth();
@@ -122,20 +114,16 @@
         mc.entityRenderer.setupOverlayRendering();
         GlStateManager.enableBlend();
 
-        if (renderVignette && Minecraft.isFancyGraphicsEnabled())
-        {
+        if (renderVignette && Minecraft.isFancyGraphicsEnabled()) {
             renderVignette(mc.player.getBrightness(), res);
-        }
-        else
-        {
+        } else {
             GlStateManager.enableDepth();
             GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
         }
 
         if (renderHelmet) renderHelmet(res, partialTicks);
 
-        if (renderPortal && !mc.player.isPotionActive(MobEffects.NAUSEA))
-        {
+        if (renderPortal && !mc.player.isPotionActive(MobEffects.NAUSEA)) {
             renderPortal(res, partialTicks);
         }
 
@@ -143,29 +131,25 @@
 
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         zLevel = -90.0F;
-        rand.setSeed((long)(updateCounter * 312871));
+        rand.setSeed((long) (updateCounter * 312871));
 
         if (renderCrosshairs) renderCrosshairs(partialTicks);
         if (renderBossHealth) renderBossHealth();
 
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
-        if (this.mc.playerController.shouldDrawHUD() && this.mc.getRenderViewEntity() instanceof EntityPlayer)
-        {
+        if (this.mc.playerController.shouldDrawHUD() && this.mc.getRenderViewEntity() instanceof EntityPlayer) {
             if (renderHealth) renderHealth(width, height);
-            if (renderArmor)  renderArmor(width, height);
-            if (renderFood)   renderFood(width, height);
+            if (renderArmor) renderArmor(width, height);
+            if (renderFood) renderFood(width, height);
             if (renderHealthMount) renderHealthMount(width, height);
-            if (renderAir)    renderAir(width, height);
+            if (renderAir) renderAir(width, height);
         }
 
         renderSleepFade(width, height);
 
-        if (renderJumpBar)
-        {
+        if (renderJumpBar) {
             renderJumpBar(width, height);
-        }
-        else if (renderExperiance)
-        {
+        } else if (renderExperiance) {
             renderExperience(width, height);
         }
 
@@ -181,14 +165,12 @@
         Scoreboard scoreboard = this.mc.world.getScoreboard();
         ScoreObjective objective = null;
         ScorePlayerTeam scoreplayerteam = scoreboard.getPlayersTeam(mc.player.getName());
-        if (scoreplayerteam != null)
-        {
+        if (scoreplayerteam != null) {
             int slot = scoreplayerteam.getColor().getColorIndex();
             if (slot >= 0) objective = scoreboard.getObjectiveInDisplaySlot(3 + slot);
         }
         ScoreObjective scoreobjective1 = objective != null ? objective : scoreboard.getObjectiveInDisplaySlot(1);
-        if (renderObjective && scoreobjective1 != null)
-        {
+        if (renderObjective && scoreobjective1 != null) {
             this.renderScoreboard(scoreobjective1, res);
         }
 
@@ -207,13 +189,11 @@
         post(ALL);
     }
 
-    public ScaledResolution getResolution()
-    {
+    public ScaledResolution getResolution() {
         return res;
     }
 
-    protected void renderCrosshairs(float partialTicks)
-    {
+    protected void renderCrosshairs(float partialTicks) {
         if (pre(CROSSHAIRS)) return;
         bind(Gui.ICONS);
         GlStateManager.enableBlend();
@@ -221,23 +201,20 @@
         post(CROSSHAIRS);
     }
 
-    protected void renderPotionIcons(ScaledResolution resolution)
-    {
+    protected void renderPotionIcons(ScaledResolution resolution) {
         if (pre(POTION_ICONS)) return;
         super.renderPotionEffects(resolution);
         post(POTION_ICONS);
     }
 
-    protected void renderSubtitles(ScaledResolution resolution)
-    {
+    protected void renderSubtitles(ScaledResolution resolution) {
         if (pre(SUBTITLES)) return;
         this.overlaySubtitle.renderSubtitles(res);
         post(SUBTITLES);
     }
 
     //@Override
-    protected void renderBossHealth()
-    {
+    protected void renderBossHealth() {
         if (pre(BOSSHEALTH)) return;
         bind(Gui.ICONS);
         GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
@@ -250,10 +227,8 @@
     }
 
     @Override
-    protected void renderVignette(float lightLevel, ScaledResolution scaledRes)
-    {
-        if (pre(VIGNETTE))
-        {
+    protected void renderVignette(float lightLevel, ScaledResolution scaledRes) {
+        if (pre(VIGNETTE)) {
             // Need to put this here, since Vanilla assumes this state after the vignette was rendered.
             GlStateManager.enableDepth();
             GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
@@ -263,21 +238,16 @@
         post(VIGNETTE);
     }
 
-    private void renderHelmet(ScaledResolution res, float partialTicks)
-    {
+    private void renderHelmet(ScaledResolution res, float partialTicks) {
         if (pre(HELMET)) return;
 
         ItemStack itemstack = this.mc.player.inventory.armorItemInSlot(3);
 
-        if (this.mc.gameSettings.thirdPersonView == 0 && !itemstack.isEmpty())
-        {
+        if (this.mc.gameSettings.thirdPersonView == 0 && !itemstack.isEmpty()) {
             Item item = itemstack.getItem();
-            if (item == Item.getItemFromBlock(Blocks.PUMPKIN))
-            {
+            if (item == Item.getItemFromBlock(Blocks.PUMPKIN)) {
                 renderPumpkinOverlay(res);
-            }
-            else
-            {
+            } else {
                 item.renderHelmetOverlay(itemstack, mc.player, res, partialTicks);
             }
         }
@@ -285,8 +255,7 @@
         post(HELMET);
     }
 
-    protected void renderArmor(int width, int height)
-    {
+    protected void renderArmor(int width, int height) {
         if (pre(ARMOR)) return;
         mc.mcProfiler.startSection("armor");
 
@@ -295,18 +264,12 @@
         int top = height - left_height;
 
         int level = ForgeHooks.getTotalArmorValue(mc.player);
-        for (int i = 1; level > 0 && i < 20; i += 2)
-        {
-            if (i < level)
-            {
+        for (int i = 1; level > 0 && i < 20; i += 2) {
+            if (i < level) {
                 drawTexturedModalRect(left, top, 34, 9, 9, 9);
-            }
-            else if (i == level)
-            {
+            } else if (i == level) {
                 drawTexturedModalRect(left, top, 25, 9, 9, 9);
-            }
-            else if (i > level)
-            {
+            } else if (i > level) {
                 drawTexturedModalRect(left, top, 16, 9, 9, 9);
             }
             left += 8;
@@ -318,14 +281,12 @@
         post(ARMOR);
     }
 
-    protected void renderPortal(ScaledResolution res, float partialTicks)
-    {
+    protected void renderPortal(ScaledResolution res, float partialTicks) {
         if (pre(PORTAL)) return;
 
         float f1 = mc.player.prevTimeInPortal + (mc.player.timeInPortal - mc.player.prevTimeInPortal) * partialTicks;
 
-        if (f1 > 0.0F)
-        {
+        if (f1 > 0.0F) {
             renderPortal(f1, res);
         }
 
@@ -333,16 +294,12 @@
     }
 
     @Override
-    protected void renderHotbar(ScaledResolution res, float partialTicks)
-    {
+    protected void renderHotbar(ScaledResolution res, float partialTicks) {
         if (pre(HOTBAR)) return;
 
-        if (mc.playerController.isSpectator())
-        {
+        if (mc.playerController.isSpectator()) {
             this.spectatorGui.renderTooltip(res, partialTicks);
-        }
-        else
-        {
+        } else {
             super.renderHotbar(res, partialTicks);
         }
 
@@ -350,28 +307,24 @@
     }
 
     @Override
-    public void setOverlayMessage(ITextComponent component, boolean animateColor)
-    {
+    public void setOverlayMessage(ITextComponent component, boolean animateColor) {
         this.setOverlayMessage(component.getFormattedText(), animateColor);
     }
 
-    protected void renderAir(int width, int height)
-    {
+    protected void renderAir(int width, int height) {
         if (pre(AIR)) return;
         mc.mcProfiler.startSection("air");
-        EntityPlayer player = (EntityPlayer)this.mc.getRenderViewEntity();
+        EntityPlayer player = (EntityPlayer) this.mc.getRenderViewEntity();
         GlStateManager.enableBlend();
         int left = width / 2 + 91;
         int top = height - right_height;
 
-        if (player.isInsideOfMaterial(Material.WATER))
-        {
+        if (player.isInsideOfMaterial(Material.WATER)) {
             int air = player.getAir();
-            int full = MathHelper.ceil((double)(air - 2) * 10.0D / 300.0D);
-            int partial = MathHelper.ceil((double)air * 10.0D / 300.0D) - full;
+            int full = MathHelper.ceil((double) (air - 2) * 10.0D / 300.0D);
+            int partial = MathHelper.ceil((double) air * 10.0D / 300.0D) - full;
 
-            for (int i = 0; i < full + partial; ++i)
-            {
+            for (int i = 0; i < full + partial; ++i) {
                 drawTexturedModalRect(left - i * 8 - 9, top, (i < full ? 16 : 25), 18, 9, 9);
             }
             right_height += 10;
@@ -382,30 +335,25 @@
         post(AIR);
     }
 
-    public void renderHealth(int width, int height)
-    {
+    public void renderHealth(int width, int height) {
         bind(ICONS);
         if (pre(HEALTH)) return;
         mc.mcProfiler.startSection("health");
         GlStateManager.enableBlend();
 
-        EntityPlayer player = (EntityPlayer)this.mc.getRenderViewEntity();
+        EntityPlayer player = (EntityPlayer) this.mc.getRenderViewEntity();
         int health = MathHelper.ceil(player.getHealth());
-        boolean highlight = healthUpdateCounter > (long)updateCounter && (healthUpdateCounter - (long)updateCounter) / 3L %2L == 1L;
+        boolean highlight = healthUpdateCounter > (long) updateCounter && (healthUpdateCounter - (long) updateCounter) / 3L % 2L == 1L;
 
-        if (health < this.playerHealth && player.hurtResistantTime > 0)
-        {
+        if (health < this.playerHealth && player.hurtResistantTime > 0) {
             this.lastSystemTime = Minecraft.getSystemTime();
-            this.healthUpdateCounter = (long)(this.updateCounter + 20);
-        }
-        else if (health > this.playerHealth && player.hurtResistantTime > 0)
-        {
+            this.healthUpdateCounter = (long) (this.updateCounter + 20);
+        } else if (health > this.playerHealth && player.hurtResistantTime > 0) {
             this.lastSystemTime = Minecraft.getSystemTime();
-            this.healthUpdateCounter = (long)(this.updateCounter + 10);
+            this.healthUpdateCounter = (long) (this.updateCounter + 10);
         }
 
-        if (Minecraft.getSystemTime() - this.lastSystemTime > 1000L)
-        {
+        if (Minecraft.getSystemTime() - this.lastSystemTime > 1000L) {
             this.playerHealth = health;
             this.lastPlayerHealth = health;
             this.lastSystemTime = Minecraft.getSystemTime();
@@ -415,13 +363,13 @@
         int healthLast = this.lastPlayerHealth;
 
         IAttributeInstance attrMaxHealth = player.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH);
-        float healthMax = (float)attrMaxHealth.getAttributeValue();
+        float healthMax = (float) attrMaxHealth.getAttributeValue();
         float absorb = MathHelper.ceil(player.getAbsorptionAmount());
 
         int healthRows = MathHelper.ceil((healthMax + absorb) / 2.0F / 10.0F);
         int rowHeight = Math.max(10 - (healthRows - 2), 3);
 
-        this.rand.setSeed((long)(updateCounter * 312871));
+        this.rand.setSeed((long) (updateCounter * 312871));
 
         int left = width / 2 - 91;
         int top = height - left_height;
@@ -429,22 +377,20 @@
         if (rowHeight != 10) left_height += 10 - rowHeight;
 
         int regen = -1;
-        if (player.isPotionActive(MobEffects.REGENERATION))
-        {
+        if (player.isPotionActive(MobEffects.REGENERATION)) {
             regen = updateCounter % 25;
         }
 
-        final int TOP =  9 * (mc.world.getWorldInfo().isHardcoreModeEnabled() ? 5 : 0);
+        final int TOP = 9 * (mc.world.getWorldInfo().isHardcoreModeEnabled() ? 5 : 0);
         final int BACKGROUND = (highlight ? 25 : 16);
         int MARGIN = 16;
-        if (player.isPotionActive(MobEffects.POISON))      MARGIN += 36;
+        if (player.isPotionActive(MobEffects.POISON)) MARGIN += 36;
         else if (player.isPotionActive(MobEffects.WITHER)) MARGIN += 72;
         float absorbRemaining = absorb;
 
-        for (int i = MathHelper.ceil((healthMax + absorb) / 2.0F) - 1; i >= 0; --i)
-        {
+        for (int i = MathHelper.ceil((healthMax + absorb) / 2.0F) - 1; i >= 0; --i) {
             //int b0 = (highlight ? 1 : 0);
-            int row = MathHelper.ceil((float)(i + 1) / 10.0F) - 1;
+            int row = MathHelper.ceil((float) (i + 1) / 10.0F) - 1;
             int x = left + i % 10 * 8;
             int y = top - row * rowHeight;
 
@@ -453,29 +399,22 @@
 
             drawTexturedModalRect(x, y, BACKGROUND, TOP, 9, 9);
 
-            if (highlight)
-            {
+            if (highlight) {
                 if (i * 2 + 1 < healthLast)
                     drawTexturedModalRect(x, y, MARGIN + 54, TOP, 9, 9); //6
                 else if (i * 2 + 1 == healthLast)
                     drawTexturedModalRect(x, y, MARGIN + 63, TOP, 9, 9); //7
             }
 
-            if (absorbRemaining > 0.0F)
-            {
-                if (absorbRemaining == absorb && absorb % 2.0F == 1.0F)
-                {
+            if (absorbRemaining > 0.0F) {
+                if (absorbRemaining == absorb && absorb % 2.0F == 1.0F) {
                     drawTexturedModalRect(x, y, MARGIN + 153, TOP, 9, 9); //17
                     absorbRemaining -= 1.0F;
-                }
-                else
-                {
+                } else {
                     drawTexturedModalRect(x, y, MARGIN + 144, TOP, 9, 9); //16
                     absorbRemaining -= 2.0F;
                 }
-            }
-            else
-            {
+            } else {
                 if (i * 2 + 1 < health)
                     drawTexturedModalRect(x, y, MARGIN + 36, TOP, 9, 9); //4
                 else if (i * 2 + 1 == health)
@@ -488,12 +427,11 @@
         post(HEALTH);
     }
 
-    public void renderFood(int width, int height)
-    {
+    public void renderFood(int width, int height) {
         if (pre(FOOD)) return;
         mc.mcProfiler.startSection("food");
 
-        EntityPlayer player = (EntityPlayer)this.mc.getRenderViewEntity();
+        EntityPlayer player = (EntityPlayer) this.mc.getRenderViewEntity();
         GlStateManager.enableBlend();
         int left = width / 2 + 91;
         int top = height - right_height;
@@ -503,23 +441,20 @@
         FoodStats stats = mc.player.getFoodStats();
         int level = stats.getFoodLevel();
 
-        for (int i = 0; i < 10; ++i)
-        {
+        for (int i = 0; i < 10; ++i) {
             int idx = i * 2 + 1;
             int x = left - i * 8 - 9;
             int y = top;
             int icon = 16;
             byte background = 0;
 
-            if (mc.player.isPotionActive(MobEffects.HUNGER))
-            {
+            if (mc.player.isPotionActive(MobEffects.HUNGER)) {
                 icon += 36;
                 background = 13;
             }
             if (unused) background = 1; //Probably should be a += 1 but vanilla never uses this
 
-            if (player.getFoodStats().getSaturationLevel() <= 0.0F && updateCounter % (level * 3 + 1) == 0)
-            {
+            if (player.getFoodStats().getSaturationLevel() <= 0.0F && updateCounter % (level * 3 + 1) == 0) {
                 y = top + (rand.nextInt(3) - 1);
             }
 
@@ -535,22 +470,19 @@
         post(FOOD);
     }
 
-    protected void renderSleepFade(int width, int height)
-    {
-        if (mc.player.getSleepTimer() > 0)
-        {
+    protected void renderSleepFade(int width, int height) {
+        if (mc.player.getSleepTimer() > 0) {
             mc.mcProfiler.startSection("sleep");
             GlStateManager.disableDepth();
             GlStateManager.disableAlpha();
             int sleepTime = mc.player.getSleepTimer();
-            float opacity = (float)sleepTime / 100.0F;
+            float opacity = (float) sleepTime / 100.0F;
 
-            if (opacity > 1.0F)
-            {
-                opacity = 1.0F - (float)(sleepTime - 100) / 10.0F;
+            if (opacity > 1.0F) {
+                opacity = 1.0F - (float) (sleepTime - 100) / 10.0F;
             }
 
-            int color = (int)(220.0F * opacity) << 24 | 1052704;
+            int color = (int) (220.0F * opacity) << 24 | 1052704;
             drawRect(0, 0, width, height, color);
             GlStateManager.enableAlpha();
             GlStateManager.enableDepth();
@@ -558,28 +490,24 @@
         }
     }
 
-    protected void renderExperience(int width, int height)
-    {
+    protected void renderExperience(int width, int height) {
         bind(ICONS);
         if (pre(EXPERIENCE)) return;
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         GlStateManager.disableBlend();
 
-        if (mc.playerController.gameIsSurvivalOrAdventure())
-        {
+        if (mc.playerController.gameIsSurvivalOrAdventure()) {
             mc.mcProfiler.startSection("expBar");
             int cap = this.mc.player.xpBarCap();
             int left = width / 2 - 91;
 
-            if (cap > 0)
-            {
+            if (cap > 0) {
                 short barWidth = 182;
-                int filled = (int)(mc.player.experience * (float)(barWidth + 1));
+                int filled = (int) (mc.player.experience * (float) (barWidth + 1));
                 int top = height - 32 + 3;
                 drawTexturedModalRect(left, top, 0, 64, barWidth, 5);
 
-                if (filled > 0)
-                {
+                if (filled > 0) {
                     drawTexturedModalRect(left, top, 0, 69, filled, 5);
                 }
             }
@@ -587,8 +515,7 @@
             this.mc.mcProfiler.endSection();
 
 
-            if (mc.playerController.gameIsSurvivalOrAdventure() && mc.player.experienceLevel > 0)
-            {
+            if (mc.playerController.gameIsSurvivalOrAdventure() && mc.player.experienceLevel > 0) {
                 mc.mcProfiler.startSection("expLevel");
                 boolean flag1 = false;
                 int color = flag1 ? 16777215 : 8453920;
@@ -609,8 +536,7 @@
         post(EXPERIENCE);
     }
 
-    protected void renderJumpBar(int width, int height)
-    {
+    protected void renderJumpBar(int width, int height) {
         bind(ICONS);
         if (pre(JUMPBAR)) return;
         GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
@@ -620,13 +546,12 @@
         float charge = mc.player.getHorseJumpPower();
         final int barWidth = 182;
         int x = (width / 2) - (barWidth / 2);
-        int filled = (int)(charge * (float)(barWidth + 1));
+        int filled = (int) (charge * (float) (barWidth + 1));
         int top = height - 32 + 3;
 
         drawTexturedModalRect(x, top, 0, 84, barWidth, 5);
 
-        if (filled > 0)
-        {
+        if (filled > 0) {
             this.drawTexturedModalRect(x, top, 0, 89, filled, 5);
         }
 
@@ -637,25 +562,21 @@
         post(JUMPBAR);
     }
 
-    protected void renderToolHighlight(ScaledResolution res)
-    {
-        if (this.mc.gameSettings.heldItemTooltips && !this.mc.playerController.isSpectator())
-        {
+    protected void renderToolHighlight(ScaledResolution res) {
+        if (this.mc.gameSettings.heldItemTooltips && !this.mc.playerController.isSpectator()) {
             mc.mcProfiler.startSection("toolHighlight");
 
-            if (this.remainingHighlightTicks > 0 && !this.highlightingItemStack.isEmpty())
-            {
+            if (this.remainingHighlightTicks > 0 && !this.highlightingItemStack.isEmpty()) {
                 String name = this.highlightingItemStack.getDisplayName();
                 if (this.highlightingItemStack.hasDisplayName())
                     name = TextFormatting.ITALIC + name;
 
                 name = this.highlightingItemStack.getItem().getHighlightTip(this.highlightingItemStack, name);
 
-                int opacity = (int)((float)this.remainingHighlightTicks * 256.0F / 10.0F);
+                int opacity = (int) ((float) this.remainingHighlightTicks * 256.0F / 10.0F);
                 if (opacity > 255) opacity = 255;
 
-                if (opacity > 0)
-                {
+                if (opacity > 0) {
                     int y = res.getScaledHeight() - 59;
                     if (!mc.playerController.shouldDrawHUD()) y += 14;
 
@@ -663,13 +584,10 @@
                     GlStateManager.enableBlend();
                     GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
                     FontRenderer font = highlightingItemStack.getItem().getFontRenderer(highlightingItemStack);
-                    if (font != null)
-                    {
+                    if (font != null) {
                         int x = (res.getScaledWidth() - font.getStringWidth(name)) / 2;
                         font.drawStringWithShadow(name, x, y, WHITE | (opacity << 24));
-                    }
-                    else
-                    {
+                    } else {
                         int x = (res.getScaledWidth() - fontrenderer.getStringWidth(name)) / 2;
                         fontrenderer.drawStringWithShadow(name, x, y, WHITE | (opacity << 24));
                     }
@@ -679,46 +597,36 @@
             }
 
             mc.mcProfiler.endSection();
-        }
-        else if (this.mc.player.isSpectator())
-        {
+        } else if (this.mc.player.isSpectator()) {
             this.spectatorGui.renderSelectedItem(res);
         }
     }
 
-    protected void renderHUDText(int width, int height)
-    {
+    protected void renderHUDText(int width, int height) {
         mc.mcProfiler.startSection("forgeHudText");
         OpenGlHelper.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA, 1, 0);
         ArrayList<String> listL = new ArrayList<String>();
         ArrayList<String> listR = new ArrayList<String>();
 
-        if (mc.isDemo())
-        {
+        if (mc.isDemo()) {
             long time = mc.world.getTotalWorldTime();
-            if (time >= 120500L)
-            {
+            if (time >= 120500L) {
                 listR.add(I18n.format("demo.demoExpired"));
+            } else {
+                listR.add(I18n.format("demo.remainingTime", StringUtils.ticksToElapsedTime((int) (120500L - time))));
             }
-            else
-            {
-                listR.add(I18n.format("demo.remainingTime", StringUtils.ticksToElapsedTime((int)(120500L - time))));
-            }
         }
 
-        if (this.mc.gameSettings.showDebugInfo && !pre(DEBUG))
-        {
+        if (this.mc.gameSettings.showDebugInfo && !pre(DEBUG)) {
             listL.addAll(debugOverlay.getLeft());
             listR.addAll(debugOverlay.getRight());
             post(DEBUG);
         }
 
         RenderGameOverlayEvent.Text event = new RenderGameOverlayEvent.Text(eventParent, listL, listR);
-        if (!MinecraftForge.EVENT_BUS.post(event))
-        {
+        if (!MinecraftForge.EVENT_BUS.post(event)) {
             int top = 2;
-            for (String msg : listL)
-            {
+            for (String msg : listL) {
                 if (msg == null) continue;
                 drawRect(1, top - 1, 2 + fontrenderer.getStringWidth(msg) + 1, top + fontrenderer.FONT_HEIGHT - 1, -1873784752);
                 fontrenderer.drawString(msg, 2, top, 14737632);
@@ -726,8 +634,7 @@
             }
 
             top = 2;
-            for (String msg : listR)
-            {
+            for (String msg : listR) {
                 if (msg == null) continue;
                 int w = fontrenderer.getStringWidth(msg);
                 int left = width - 2 - w;
@@ -741,28 +648,23 @@
         post(TEXT);
     }
 
-    protected void renderFPSGraph()
-    {
-        if (this.mc.gameSettings.showDebugInfo && this.mc.gameSettings.showLagometer && !pre(FPS_GRAPH))
-        {
+    protected void renderFPSGraph() {
+        if (this.mc.gameSettings.showDebugInfo && this.mc.gameSettings.showLagometer && !pre(FPS_GRAPH)) {
             this.debugOverlay.renderLagometer();
             post(FPS_GRAPH);
         }
     }
 
-    protected void renderRecordOverlay(int width, int height, float partialTicks)
-    {
-        if (overlayMessageTime > 0)
-        {
+    protected void renderRecordOverlay(int width, int height, float partialTicks) {
+        if (overlayMessageTime > 0) {
             mc.mcProfiler.startSection("overlayMessage");
-            float hue = (float)overlayMessageTime - partialTicks;
-            int opacity = (int)(hue * 256.0F / 20.0F);
+            float hue = (float) overlayMessageTime - partialTicks;
+            int opacity = (int) (hue * 256.0F / 20.0F);
             if (opacity > 255) opacity = 255;
 
-            if (opacity > 0)
-            {
+            if (opacity > 0) {
                 GlStateManager.pushMatrix();
-                GlStateManager.translate((float)(width / 2), (float)(height - 68), 0.0F);
+                GlStateManager.translate((float) (width / 2), (float) (height - 68), 0.0F);
                 GlStateManager.enableBlend();
                 GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
                 int color = (animateOverlayMessageColor ? Color.HSBtoRGB(hue / 50.0F, 0.7F, 0.6F) & WHITE : WHITE);
@@ -775,37 +677,33 @@
         }
     }
 
-    protected void renderTitle(int width, int height, float partialTicks)
-    {
-        if (titlesTimer > 0)
-        {
+    protected void renderTitle(int width, int height, float partialTicks) {
+        if (titlesTimer > 0) {
             mc.mcProfiler.startSection("titleAndSubtitle");
-            float age = (float)this.titlesTimer - partialTicks;
+            float age = (float) this.titlesTimer - partialTicks;
             int opacity = 255;
 
-            if (titlesTimer > titleFadeOut + titleDisplayTime)
-            {
-                float f3 = (float)(titleFadeIn + titleDisplayTime + titleFadeOut) - age;
-                opacity = (int)(f3 * 255.0F / (float)titleFadeIn);
+            if (titlesTimer > titleFadeOut + titleDisplayTime) {
+                float f3 = (float) (titleFadeIn + titleDisplayTime + titleFadeOut) - age;
+                opacity = (int) (f3 * 255.0F / (float) titleFadeIn);
             }
-            if (titlesTimer <= titleFadeOut) opacity = (int)(age * 255.0F / (float)this.titleFadeOut);
+            if (titlesTimer <= titleFadeOut) opacity = (int) (age * 255.0F / (float) this.titleFadeOut);
 
             opacity = MathHelper.clamp(opacity, 0, 255);
 
-            if (opacity > 8)
-            {
+            if (opacity > 8) {
                 GlStateManager.pushMatrix();
-                GlStateManager.translate((float)(width / 2), (float)(height / 2), 0.0F);
+                GlStateManager.translate((float) (width / 2), (float) (height / 2), 0.0F);
                 GlStateManager.enableBlend();
                 GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
                 GlStateManager.pushMatrix();
                 GlStateManager.scale(4.0F, 4.0F, 4.0F);
                 int l = opacity << 24 & -16777216;
-                this.getFontRenderer().drawString(this.displayedTitle, (float)(-this.getFontRenderer().getStringWidth(this.displayedTitle) / 2), -10.0F, 16777215 | l, true);
+                this.getFontRenderer().drawString(this.displayedTitle, (float) (-this.getFontRenderer().getStringWidth(this.displayedTitle) / 2), -10.0F, 16777215 | l, true);
                 GlStateManager.popMatrix();
                 GlStateManager.pushMatrix();
                 GlStateManager.scale(2.0F, 2.0F, 2.0F);
-                this.getFontRenderer().drawString(this.displayedSubTitle, (float)(-this.getFontRenderer().getStringWidth(this.displayedSubTitle) / 2), 5.0F, 16777215 | l, true);
+                this.getFontRenderer().drawString(this.displayedSubTitle, (float) (-this.getFontRenderer().getStringWidth(this.displayedSubTitle) / 2), 5.0F, 16777215 | l, true);
                 GlStateManager.popMatrix();
                 GlStateManager.disableBlend();
                 GlStateManager.popMatrix();
@@ -815,8 +713,7 @@
         }
     }
 
-    protected void renderChat(int width, int height)
-    {
+    protected void renderChat(int width, int height) {
         mc.mcProfiler.startSection("chat");
 
         RenderGameOverlayEvent.Chat event = new RenderGameOverlayEvent.Chat(eventParent, 0, height - 48);
@@ -832,27 +729,22 @@
         mc.mcProfiler.endSection();
     }
 
-    protected void renderPlayerList(int width, int height)
-    {
+    protected void renderPlayerList(int width, int height) {
         ScoreObjective scoreobjective = this.mc.world.getScoreboard().getObjectiveInDisplaySlot(0);
         NetHandlerPlayClient handler = mc.player.connection;
 
-        if (mc.gameSettings.keyBindPlayerList.isKeyDown() && (!mc.isIntegratedServerRunning() || handler.getPlayerInfoMap().size() > 1 || scoreobjective != null))
-        {
+        if (mc.gameSettings.keyBindPlayerList.isKeyDown() && (!mc.isIntegratedServerRunning() || handler.getPlayerInfoMap().size() > 1 || scoreobjective != null)) {
             this.overlayPlayerList.updatePlayerList(true);
             if (pre(PLAYER_LIST)) return;
             this.overlayPlayerList.renderPlayerlist(width, this.mc.world.getScoreboard(), scoreobjective);
             post(PLAYER_LIST);
-        }
-        else
-        {
+        } else {
             this.overlayPlayerList.updatePlayerList(false);
         }
     }
 
-    protected void renderHealthMount(int width, int height)
-    {
-        EntityPlayer player = (EntityPlayer)mc.getRenderViewEntity();
+    protected void renderHealthMount(int width, int height) {
+        EntityPlayer player = (EntityPlayer) mc.getRenderViewEntity();
         Entity tmp = player.getRidingEntity();
         if (!(tmp instanceof EntityLivingBase)) return;
 
@@ -865,10 +757,10 @@
 
         mc.mcProfiler.endStartSection("mountHealth");
         GlStateManager.enableBlend();
-        EntityLivingBase mount = (EntityLivingBase)tmp;
-        int health = (int)Math.ceil((double)mount.getHealth());
+        EntityLivingBase mount = (EntityLivingBase) tmp;
+        int health = (int) Math.ceil((double) mount.getHealth());
         float healthMax = mount.getMaxHealth();
-        int hearts = (int)(healthMax + 0.5F) / 2;
+        int hearts = (int) (healthMax + 0.5F) / 2;
 
         if (hearts > 30) hearts = 30;
 
@@ -877,15 +769,13 @@
         final int HALF = MARGIN + 45;
         final int FULL = MARGIN + 36;
 
-        for (int heart = 0; hearts > 0; heart += 20)
-        {
+        for (int heart = 0; hearts > 0; heart += 20) {
             int top = height - right_height;
 
             int rowCount = Math.min(hearts, 10);
             hearts -= rowCount;
 
-            for (int i = 0; i < rowCount; ++i)
-            {
+            for (int i = 0; i < rowCount; ++i) {
                 int x = left_align - i * 8 - 9;
                 drawTexturedModalRect(x, top, BACKGROUND, 9, 9, 9);
 
@@ -902,37 +792,44 @@
     }
 
     //Helper macros
-    private boolean pre(ElementType type)
-    {
+    private boolean pre(ElementType type) {
         return MinecraftForge.EVENT_BUS.post(new RenderGameOverlayEvent.Pre(eventParent, type));
     }
-    private void post(ElementType type)
-    {
+
+    private void post(ElementType type) {
         MinecraftForge.EVENT_BUS.post(new RenderGameOverlayEvent.Post(eventParent, type));
     }
-    private void bind(ResourceLocation res)
-    {
+
+    private void bind(ResourceLocation res) {
         mc.getTextureManager().bindTexture(res);
     }
 
-    private class GuiOverlayDebugForge extends GuiOverlayDebug
-    {
+    private class GuiOverlayDebugForge extends GuiOverlayDebug {
         private Minecraft mc;
-        private GuiOverlayDebugForge(Minecraft mc)
-        {
+
+        private GuiOverlayDebugForge(Minecraft mc) {
             super(mc);
             this.mc = mc;
         }
-        @Override protected void renderDebugInfoLeft(){}
-        @Override protected void renderDebugInfoRight(ScaledResolution res){}
-        private List<String> getLeft()
-        {
+
+        @Override
+        protected void renderDebugInfoLeft() {
+        }
+
+        @Override
+        protected void renderDebugInfoRight(ScaledResolution res) {
+        }
+
+        private List<String> getLeft() {
             List<String> ret = this.call();
             ret.add("");
             ret.add("Debug: Pie [shift]: " + (this.mc.gameSettings.showDebugProfilerChart ? "visible" : "hidden") + " FPS [alt]: " + (this.mc.gameSettings.showLagometer ? "visible" : "hidden"));
             ret.add("For help: press F3 + Q");
             return ret;
         }
-        private List<String> getRight(){ return this.getDebugInfoRight(); }
+
+        private List<String> getRight() {
+            return this.getDebugInfoRight();
+        }
     }
 }
