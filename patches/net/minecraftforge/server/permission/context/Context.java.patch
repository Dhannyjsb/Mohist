--- ../src-base/minecraft/net/minecraftforge/server/permission/context/Context.java
+++ ../src-work/minecraft/net/minecraftforge/server/permission/context/Context.java
@@ -26,34 +26,29 @@
 import java.util.HashMap;
 import java.util.Map;
 
-public class Context implements IContext
-{
+public class Context implements IContext {
     private Map<ContextKey<?>, Object> map;
 
     @Override
     @Nullable
-    public World getWorld()
-    {
+    public World getWorld() {
         return null;
     }
 
     @Override
     @Nullable
-    public EntityPlayer getPlayer()
-    {
+    public EntityPlayer getPlayer() {
         return null;
     }
 
     @Override
     @Nullable
-    public <T> T get(ContextKey<T> key)
-    {
+    public <T> T get(ContextKey<T> key) {
         return map == null || map.isEmpty() ? null : (T) map.get(key);
     }
 
     @Override
-    public boolean has(ContextKey<?> key)
-    {
+    public boolean has(ContextKey<?> key) {
         return covers(key) || (map != null && !map.isEmpty() && map.containsKey(key));
     }
 
@@ -64,15 +59,12 @@
      * @param obj Context object. Can be null
      * @return itself, for easy context chaining
      */
-    public <T> Context set(ContextKey<T> key, @Nullable T obj)
-    {
-        if(covers(key))
-        {
+    public <T> Context set(ContextKey<T> key, @Nullable T obj) {
+        if (covers(key)) {
             return this;
         }
 
-        if(map == null)
-        {
+        if (map == null) {
             map = new HashMap<ContextKey<?>, Object>();
         }
 
@@ -80,8 +72,7 @@
         return this;
     }
 
-    protected boolean covers(ContextKey<?> key)
-    {
+    protected boolean covers(ContextKey<?> key) {
         return false;
     }
 }
