--- ../src-base/minecraft/net/minecraftforge/server/permission/PermissionAPI.java
+++ ../src-work/minecraft/net/minecraftforge/server/permission/PermissionAPI.java
@@ -27,30 +27,26 @@
 import net.minecraftforge.fml.common.LoaderState;
 import net.minecraftforge.server.permission.context.IContext;
 import net.minecraftforge.server.permission.context.PlayerContext;
-import org.apache.logging.log4j.Level;
 
 import javax.annotation.Nullable;
 
-public class PermissionAPI
-{
+public class PermissionAPI {
     private static IPermissionHandler permissionHandler = DefaultPermissionHandler.INSTANCE;
 
+    public static IPermissionHandler getPermissionHandler() {
+        return permissionHandler;
+    }
+
     /**
      * <b>Only use this in PreInit state!</b>
      */
-    public static void setPermissionHandler(IPermissionHandler handler)
-    {
+    public static void setPermissionHandler(IPermissionHandler handler) {
         Preconditions.checkNotNull(handler, "Permission handler can't be null!");
         Preconditions.checkState(Loader.instance().getLoaderState().ordinal() <= LoaderState.PREINITIALIZATION.ordinal(), "Can't register after IPermissionHandler PreInit!");
         FMLLog.log.warn("Replacing {} with {}", permissionHandler.getClass().getName(), handler.getClass().getName());
         permissionHandler = handler;
     }
 
-    public static IPermissionHandler getPermissionHandler()
-    {
-        return permissionHandler;
-    }
-
     /**
      * <b>Only use this after PreInit state!</b>
      *
@@ -58,8 +54,7 @@
      * @param level Default permission level for this node. If not isn't registered, it's level is going to be 'NONE'
      * @param desc  Optional description of the node
      */
-    public static String registerNode(String node, DefaultPermissionLevel level, String desc)
-    {
+    public static String registerNode(String node, DefaultPermissionLevel level, String desc) {
         Preconditions.checkNotNull(node, "Permission node can't be null!");
         Preconditions.checkNotNull(level, "Permission level can't be null!");
         Preconditions.checkNotNull(desc, "Permission description can't be null!");
@@ -76,8 +71,7 @@
      * @return true, if player has permission, false if he does not.
      * @see DefaultPermissionHandler
      */
-    public static boolean hasPermission(GameProfile profile, String node, @Nullable IContext context)
-    {
+    public static boolean hasPermission(GameProfile profile, String node, @Nullable IContext context) {
         Preconditions.checkNotNull(profile, "GameProfile can't be null!");
         Preconditions.checkNotNull(node, "Permission node can't be null!");
         Preconditions.checkArgument(!node.isEmpty(), "Permission node can't be empty!");
@@ -89,8 +83,7 @@
      *
      * @see PermissionAPI#hasPermission(GameProfile, String, IContext)
      */
-    public static boolean hasPermission(EntityPlayer player, String node)
-    {
+    public static boolean hasPermission(EntityPlayer player, String node) {
         Preconditions.checkNotNull(player, "Player can't be null!");
         return hasPermission(player.getGameProfile(), node, new PlayerContext(player));
     }
