--- ../src-base/minecraft/net/minecraftforge/server/terminalconsole/MinecraftFormattingConverter.java
+++ ../src-work/minecraft/net/minecraftforge/server/terminalconsole/MinecraftFormattingConverter.java
@@ -42,7 +42,7 @@
 /**
  * Replaces Minecraft formatting codes in the result of a pattern with
  * appropriate ANSI escape codes. The implementation will only replace valid
- * color codes using the section sign (§).
+ * color codes using the section sign (&).
  *
  * <p>The {@link MinecraftFormattingConverter} can be only used together with
  * {@link TerminalConsoleAppender} to detect if the current console supports
@@ -76,38 +76,38 @@
      * {@code true}, all Minecraft formatting codes will be replaced
      * or stripped from the console output.</p>
      */
-    public static final String KEEP_FORMATTING_PROPERTY = TerminalConsoleAppender.PROPERTY_PREFIX + ".keepMinecraftFormatting";
+    public static final String KEEP_FORMATTING_PROPERTY = "terminal.keepMinecraftFormatting";
 
     private static final boolean KEEP_FORMATTING = PropertiesUtil.getProperties().getBooleanProperty(KEEP_FORMATTING_PROPERTY);
 
     private static final String ANSI_RESET = "\u001B[39;0m";
 
-    private static final char COLOR_CHAR = '\u00A7'; // §
+    private static final char COLOR_CHAR = '\u00A7'; // &
     private static final String LOOKUP = "0123456789abcdefklmnor";
 
     private static final String[] ansiCodes = new String[] {
-            "\u001B[0;30;22m", // Black §0
-            "\u001B[0;34;22m", // Dark Blue §1
-            "\u001B[0;32;22m", // Dark Green §2
-            "\u001B[0;36;22m", // Dark Aqua §3
-            "\u001B[0;31;22m", // Dark Red §4
-            "\u001B[0;35;22m", // Dark Purple §5
-            "\u001B[0;33;22m", // Gold §6
-            "\u001B[0;37;22m", // Gray §7
-            "\u001B[0;30;1m",  // Dark Gray §8
-            "\u001B[0;34;1m",  // Blue §9
-            "\u001B[0;32;1m",  // Green §a
-            "\u001B[0;36;1m",  // Aqua §b
-            "\u001B[0;31;1m",  // Red §c
-            "\u001B[0;35;1m",  // Light Purple §d
-            "\u001B[0;33;1m",  // Yellow §e
-            "\u001B[0;37;1m",  // White §f
-            "\u001B[5m",       // Obfuscated §k
-            "\u001B[21m",      // Bold §l
-            "\u001B[9m",       // Strikethrough §m
-            "\u001B[4m",       // Underline §n
-            "\u001B[3m",       // Italic §o
-            ANSI_RESET,        // Reset §r
+            "\u001B[0;30;22m", // Black &0
+            "\u001B[0;34;22m", // Dark Blue &1
+            "\u001B[0;32;22m", // Dark Green &2
+            "\u001B[0;36;22m", // Dark Aqua &3
+            "\u001B[0;31;22m", // Dark Red &4
+            "\u001B[0;35;22m", // Dark Purple &5
+            "\u001B[0;33;22m", // Gold &6
+            "\u001B[0;37;22m", // Gray &7
+            "\u001B[0;30;1m",  // Dark Gray &8
+            "\u001B[0;34;1m",  // Blue &9
+            "\u001B[0;32;1m",  // Green &a
+            "\u001B[0;36;1m",  // Aqua &b
+            "\u001B[0;31;1m",  // Red &c
+            "\u001B[0;35;1m",  // Light Purple &d
+            "\u001B[0;33;1m",  // Yellow &e
+            "\u001B[0;37;1m",  // White &f
+            "\u001B[5m",       // Obfuscated &k
+            "\u001B[21m",      // Bold &l
+            "\u001B[9m",       // Strikethrough &m
+            "\u001B[4m",       // Underline &n
+            "\u001B[3m",       // Italic &o
+            ANSI_RESET,        // Reset &r
     };
 
     private final boolean ansi;
@@ -143,7 +143,7 @@
         }
 
         String content = toAppendTo.substring(start);
-        format(content, toAppendTo, start, ansi && TerminalConsoleAppender.isAnsiSupported());
+        format(content, toAppendTo, start, ansi && true);
     }
 
     private static void format(String s, StringBuilder result, int start, boolean ansi)
