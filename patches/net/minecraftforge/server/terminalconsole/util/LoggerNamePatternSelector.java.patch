--- ../src-base/minecraft/net/minecraftforge/server/terminalconsole/util/LoggerNamePatternSelector.java
+++ ../src-work/minecraft/net/minecraftforge/server/terminalconsole/util/LoggerNamePatternSelector.java
@@ -26,11 +26,7 @@
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.Node;
-import org.apache.logging.log4j.core.config.plugins.Plugin;
-import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
-import org.apache.logging.log4j.core.config.plugins.PluginConfiguration;
-import org.apache.logging.log4j.core.config.plugins.PluginElement;
-import org.apache.logging.log4j.core.config.plugins.PluginFactory;
+import org.apache.logging.log4j.core.config.plugins.*;
 import org.apache.logging.log4j.core.config.plugins.validation.constraints.Required;
 import org.apache.logging.log4j.core.layout.PatternLayout;
 import org.apache.logging.log4j.core.layout.PatternMatch;
@@ -61,36 +57,9 @@
  */
 @Plugin(name = "LoggerNamePatternSelector", category = Node.CATEGORY, elementType = PatternSelector.ELEMENT_TYPE)
 @PerformanceSensitive("allocation")
-public class LoggerNamePatternSelector implements PatternSelector
-{
-    private static class LoggerNameSelector
-    {
-        private final String name;
-        private final boolean isPackage;
-        private final PatternFormatter[] formatters;
-
-        LoggerNameSelector(String name, PatternFormatter[] formatters)
-        {
-            this.name = name;
-            this.isPackage = name.endsWith(".");
-            this.formatters = formatters;
-        }
-
-        PatternFormatter[] get()
-        {
-            return this.formatters;
-        }
-
-        boolean test(String s)
-        {
-            return this.isPackage ? s.startsWith(this.name) : s.equals(this.name);
-        }
-
-    }
-
+public class LoggerNamePatternSelector implements PatternSelector {
     private final PatternFormatter[] defaultFormatters;
     private final List<LoggerNameSelector> formatters = new ArrayList<>();
-
     /**
      * Constructs a new {@link LoggerNamePatternSelector}.
      *
@@ -104,45 +73,21 @@
      * @param config The configuration
      */
     protected LoggerNamePatternSelector(String defaultPattern, PatternMatch[] properties,
-                                        boolean alwaysWriteExceptions, boolean disableAnsi, boolean noConsoleNoAnsi, Configuration config)
-    {
+                                        boolean alwaysWriteExceptions, boolean disableAnsi, boolean noConsoleNoAnsi, Configuration config) {
         PatternParser parser = PatternLayout.createPatternParser(config);
         this.defaultFormatters = toArray(parser.parse(defaultPattern, alwaysWriteExceptions, disableAnsi, noConsoleNoAnsi));
-        for (PatternMatch property : properties)
-        {
+        for (PatternMatch property : properties) {
             PatternFormatter[] formatters = toArray(parser.parse(property.getPattern(), alwaysWriteExceptions, disableAnsi, noConsoleNoAnsi));
-            for (String name : property.getKey().split(","))
-            {
+            for (String name : property.getKey().split(",")) {
                 this.formatters.add(new LoggerNameSelector(name, formatters));
             }
         }
     }
 
-    private static PatternFormatter[] toArray(List<PatternFormatter> formatters)
-    {
+    private static PatternFormatter[] toArray(List<PatternFormatter> formatters) {
         return formatters.toArray(new PatternFormatter[formatters.size()]);
     }
 
-    @Override
-    public PatternFormatter[] getFormatters(LogEvent event)
-    {
-        final String loggerName = event.getLoggerName();
-        if (loggerName != null)
-        {
-            //noinspection ForLoopReplaceableByForEach
-            for (int i = 0; i < this.formatters.size(); i++)
-            {
-                LoggerNameSelector selector = this.formatters.get(i);
-                if (selector.test(loggerName))
-                {
-                    return selector.get();
-                }
-            }
-        }
-
-        return this.defaultFormatters;
-    }
-
     /**
      * Creates a new {@link LoggerNamePatternSelector}.
      *
@@ -163,9 +108,45 @@
             @PluginAttribute(value = "alwaysWriteExceptions", defaultBoolean = true) boolean alwaysWriteExceptions,
             @PluginAttribute("disableAnsi") boolean disableAnsi,
             @PluginAttribute("noConsoleNoAnsi") boolean noConsoleNoAnsi,
-            @PluginConfiguration Configuration config)
-    {
+            @PluginConfiguration Configuration config) {
         return new LoggerNamePatternSelector(defaultPattern, properties, alwaysWriteExceptions, disableAnsi, noConsoleNoAnsi, config);
     }
 
+    @Override
+    public PatternFormatter[] getFormatters(LogEvent event) {
+        final String loggerName = event.getLoggerName();
+        if (loggerName != null) {
+            //noinspection ForLoopReplaceableByForEach
+            for (int i = 0; i < this.formatters.size(); i++) {
+                LoggerNameSelector selector = this.formatters.get(i);
+                if (selector.test(loggerName)) {
+                    return selector.get();
+                }
+            }
+        }
+
+        return this.defaultFormatters;
+    }
+
+    private static class LoggerNameSelector {
+        private final String name;
+        private final boolean isPackage;
+        private final PatternFormatter[] formatters;
+
+        LoggerNameSelector(String name, PatternFormatter[] formatters) {
+            this.name = name;
+            this.isPackage = name.endsWith(".");
+            this.formatters = formatters;
+        }
+
+        PatternFormatter[] get() {
+            return this.formatters;
+        }
+
+        boolean test(String s) {
+            return this.isPackage ? s.startsWith(this.name) : s.equals(this.name);
+        }
+
+    }
+
 }
