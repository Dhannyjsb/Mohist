--- ../src-base/minecraft/net/minecraftforge/server/timings/TimeTracker.java
+++ ../src-work/minecraft/net/minecraftforge/server/timings/TimeTracker.java
@@ -19,24 +19,22 @@
 
 package net.minecraftforge.server.timings;
 
-import java.lang.ref.WeakReference;
-import java.util.Arrays;
-import java.util.Map;
-import java.util.concurrent.TimeUnit;
-
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.MapMaker;
-
 import net.minecraft.entity.Entity;
 import net.minecraft.tileentity.TileEntity;
 
+import java.lang.ref.WeakReference;
+import java.util.Arrays;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+
 /**
  * A class to assist in the collection of data to measure the update times of ticking objects {currently Tile Entities and Entities}
  *
  * @param <T>
  */
-public class TimeTracker<T>
-{
+public class TimeTracker<T> {
 
     /**
      * A tracker for timing tile entity update
@@ -59,12 +57,10 @@
      *
      * @return An immutable list of timings data collected by this tracker
      */
-    public ImmutableList<ForgeTimings<T>> getTimingData()
-    {
+    public ImmutableList<ForgeTimings<T>> getTimingData() {
         ImmutableList.Builder<ForgeTimings<T>> builder = ImmutableList.builder();
 
-        for (Map.Entry<T, int[]> entry : timings.entrySet())
-        {
+        for (Map.Entry<T, int[]> entry : timings.entrySet()) {
             builder.add(new ForgeTimings<>(entry.getKey(), Arrays.copyOfRange(entry.getValue(), 0, 99)));
         }
         return builder.build();
@@ -73,8 +69,7 @@
     /**
      * Resets the tracker (clears timings and stops any in-progress timings)
      */
-    public void reset()
-    {
+    public void reset() {
         enabled = false;
         trackTime = 0;
         timings.clear();
@@ -85,8 +80,7 @@
      *
      * @param tracking The object to stop timing
      */
-    public void trackEnd(T tracking)
-    {
+    public void trackEnd(T tracking) {
         if (!enabled)
             return;
         this.trackEnd(tracking, System.nanoTime());
@@ -97,8 +91,7 @@
      *
      * @param duration The duration for the time to track
      */
-    public void enable(int duration)
-    {
+    public void enable(int duration) {
         this.trackingDuration = duration;
         this.enabled = true;
     }
@@ -108,17 +101,14 @@
      *
      * @param toTrack The object to start timing
      */
-    public void trackStart(T toTrack)
-    {
+    public void trackStart(T toTrack) {
         if (!enabled)
             return;
         this.trackStart(toTrack, System.nanoTime());
     }
 
-    private void trackEnd(T object, long nanoTime)
-    {
-        if (currentlyTracking == null || currentlyTracking.get() != object)
-        {
+    private void trackEnd(T object, long nanoTime) {
+        if (currentlyTracking == null || currentlyTracking.get() != object) {
             currentlyTracking = null;
             return;
         }
@@ -127,14 +117,10 @@
         timings[idx] = (int) (nanoTime - timing);
     }
 
-    private void trackStart(T toTrack, long nanoTime)
-    {
-        if (trackTime == 0)
-        {
+    private void trackStart(T toTrack, long nanoTime) {
+        if (trackTime == 0) {
             trackTime = nanoTime;
-        }
-        else if (trackTime + TimeUnit.NANOSECONDS.convert(trackingDuration, TimeUnit.SECONDS) < nanoTime)
-        {
+        } else if (trackTime + TimeUnit.NANOSECONDS.convert(trackingDuration, TimeUnit.SECONDS) < nanoTime) {
             enabled = false;
             trackTime = 0;
         }
