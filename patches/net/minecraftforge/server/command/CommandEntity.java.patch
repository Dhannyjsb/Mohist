--- ../src-base/minecraft/net/minecraftforge/server/command/CommandEntity.java
+++ ../src-work/minecraft/net/minecraftforge/server/command/CommandEntity.java
@@ -19,15 +19,6 @@
 
 package net.minecraftforge.server.command;
 
-import javax.annotation.Nullable;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Set;
-import java.util.stream.Collectors;
-
 import com.google.common.collect.Maps;
 import net.minecraft.command.CommandBase;
 import net.minecraft.command.CommandException;
@@ -45,58 +36,51 @@
 import org.apache.commons.lang3.tuple.MutablePair;
 import org.apache.commons.lang3.tuple.Pair;
 
-class CommandEntity extends CommandTreeBase
-{
-    public CommandEntity()
-    {
+import javax.annotation.Nullable;
+import java.util.*;
+import java.util.stream.Collectors;
+
+class CommandEntity extends CommandTreeBase {
+    public CommandEntity() {
         addSubcommand(new EntityListCommand());
         addSubcommand(new CommandTreeHelp(this));
     }
 
     @Override
-    public String getUsage(ICommandSender sender)
-    {
+    public String getUsage(ICommandSender sender) {
         return "commands.forge.entity.usage";
     }
 
     @Override
-    public int getRequiredPermissionLevel()
-    {
+    public int getRequiredPermissionLevel() {
         return 2;
     }
 
     @Override
-    public String getName()
-    {
+    public String getName() {
         return "entity";
     }
 
-    private static class EntityListCommand extends CommandBase
-    {
+    private static class EntityListCommand extends CommandBase {
         @Override
-        public String getName()
-        {
+        public String getName() {
             return "list";
         }
 
         @Override
-        public int getRequiredPermissionLevel()
-        {
+        public int getRequiredPermissionLevel() {
             return 2;
         }
 
         @Override
-        public String getUsage(ICommandSender sender)
-        {
+        public String getUsage(ICommandSender sender) {
             return "commands.forge.entity.list.usage";
         }
 
         @Override
-        public void execute(MinecraftServer server, ICommandSender sender, String[] args) throws CommandException
-        {
+        public void execute(MinecraftServer server, ICommandSender sender, String[] args) throws CommandException {
             String filter = "*";
-            if (args.length > 0)
-            {
+            if (args.length > 0) {
                 filter = args[0];
             }
             final String cleanFilter = filter.replace("?", ".?").replace("*", ".*?");
@@ -122,8 +106,7 @@
                 info.right.put(chunk, info.right.getOrDefault(chunk, 0) + 1);
             });
 
-            if (names.size() == 1)
-            {
+            if (names.size() == 1) {
                 ResourceLocation name = names.iterator().next();
                 Pair<Integer, Map<ChunkPos, Integer>> info = list.get(name);
                 if (info == null)
@@ -132,40 +115,30 @@
                 List<Map.Entry<ChunkPos, Integer>> toSort = new ArrayList<>();
                 toSort.addAll(info.getRight().entrySet());
                 toSort.sort((a, b) -> {
-                    if (Objects.equals(a.getValue(), b.getValue()))
-                    {
+                    if (Objects.equals(a.getValue(), b.getValue())) {
                         return a.getKey().toString().compareTo(b.getKey().toString());
-                    }
-                    else
-                    {
+                    } else {
                         return b.getValue() - a.getValue();
                     }
                 });
                 long limit = 10;
-                for (Map.Entry<ChunkPos, Integer> e : toSort)
-                {
+                for (Map.Entry<ChunkPos, Integer> e : toSort) {
                     if (limit-- == 0) break;
                     sender.sendMessage(new TextComponentString("  " + e.getValue() + ": " + e.getKey().x + ", " + e.getKey().z));
                 }
-            }
-            else
-            {
+            } else {
 
                 List<Pair<ResourceLocation, Integer>> info = new ArrayList<>();
                 list.forEach((key, value) -> {
-                    if (names.contains(key))
-                    {
+                    if (names.contains(key)) {
                         Pair<ResourceLocation, Integer> of = Pair.of(key, value.left);
                         info.add(of);
                     }
                 });
                 info.sort((a, b) -> {
-                    if (Objects.equals(a.getRight(), b.getRight()))
-                    {
+                    if (Objects.equals(a.getRight(), b.getRight())) {
                         return a.getKey().toString().compareTo(b.getKey().toString());
-                    }
-                    else
-                    {
+                    } else {
                         return b.getRight() - a.getRight();
                     }
                 });
@@ -180,10 +153,8 @@
         }
 
         @Override
-        public List<String> getTabCompletions(MinecraftServer server, ICommandSender sender, String[] args, @Nullable BlockPos targetPos)
-        {
-            if (args.length == 1)
-            {
+        public List<String> getTabCompletions(MinecraftServer server, ICommandSender sender, String[] args, @Nullable BlockPos targetPos) {
+            if (args.length == 1) {
                 String[] entityNames = EntityList.getEntityNameList().stream().map(ResourceLocation::toString).sorted().toArray(String[]::new);
                 return getListOfStringsMatchingLastWord(args, entityNames);
             }
