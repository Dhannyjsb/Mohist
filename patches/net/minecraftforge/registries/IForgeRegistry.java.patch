--- ../src-base/minecraft/net/minecraftforge/registries/IForgeRegistry.java
+++ ../src-work/minecraft/net/minecraftforge/registries/IForgeRegistry.java
@@ -19,23 +19,21 @@
 
 package net.minecraftforge.registries;
 
+import net.minecraft.util.ResourceLocation;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
 import java.util.Collection;
 import java.util.List;
 import java.util.Map.Entry;
 import java.util.Set;
 
-import net.minecraft.util.ResourceLocation;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-
 /**
  * Main interface for the registry system. Use this to query the registry system.
  *
  * @param <V> The top level type for the registry
  */
-public interface IForgeRegistry<V extends IForgeRegistryEntry<V>> extends Iterable<V>
-{
+public interface IForgeRegistry<V extends IForgeRegistryEntry<V>> extends Iterable<V> {
     Class<V> getRegistrySuperType();
 
     void register(V value);
@@ -43,21 +41,31 @@
     void registerAll(@SuppressWarnings("unchecked") V... values);
 
     boolean containsKey(ResourceLocation key);
+
     boolean containsValue(V value);
 
-    @Nullable V getValue(ResourceLocation key);
-    @Nullable ResourceLocation getKey(V value);
+    @Nullable
+    V getValue(ResourceLocation key);
 
-    @Nonnull Set<ResourceLocation>           getKeys();
+    @Nullable
+    ResourceLocation getKey(V value);
+
+    @Nonnull
+    Set<ResourceLocation> getKeys();
+
     /** @deprecated use {@link #getValuesCollection} */
     @Deprecated // TODO: remove in 1.13
-    @Nonnull List<V>                         getValues();
     @Nonnull
-    default Collection<V>                    getValuesCollection() { // TODO rename this to getValues in 1.13
+    List<V> getValues();
+
+    @Nonnull
+    default Collection<V> getValuesCollection() { // TODO rename this to getValues in 1.13
         return getValues();
     }
-    @Nonnull Set<Entry<ResourceLocation, V>> getEntries();
 
+    @Nonnull
+    Set<Entry<ResourceLocation, V>> getEntries();
+
     /**
      * Retrieve the slave map of type T from the registry.
      * Slave maps are maps which are dependent on registry content in some way.
@@ -72,8 +80,7 @@
      * Callback fired when objects are added to the registry. This will fire when the registry is rebuilt
      * on the client side from a server side synchronization, or when a world is loaded.
      */
-    interface AddCallback<V extends IForgeRegistryEntry<V>>
-    {
+    interface AddCallback<V extends IForgeRegistryEntry<V>> {
         void onAdd(IForgeRegistryInternal<V> owner, RegistryManager stage, int id, V obj, @Nullable V oldObj);
     }
 
@@ -81,40 +88,35 @@
      * Callback fired when the registry is cleared. This is done before a registry is reloaded from client
      * or server.
      */
-    interface ClearCallback<V extends IForgeRegistryEntry<V>>
-    {
+    interface ClearCallback<V extends IForgeRegistryEntry<V>> {
         void onClear(IForgeRegistryInternal<V> owner, RegistryManager stage);
     }
 
     /**
      * Callback fired when a registry instance is created. Populate slave maps here.
      */
-    interface CreateCallback<V extends IForgeRegistryEntry<V>>
-    {
+    interface CreateCallback<V extends IForgeRegistryEntry<V>> {
         void onCreate(IForgeRegistryInternal<V> owner, RegistryManager stage);
     }
 
     /**
      * Callback fired when the registry contents are validated.
      */
-    interface ValidateCallback<V extends IForgeRegistryEntry<V>>
-    {
+    interface ValidateCallback<V extends IForgeRegistryEntry<V>> {
         void onValidate(IForgeRegistryInternal<V> owner, RegistryManager stage, int id, ResourceLocation key, V obj);
     }
 
     /**
      * Factory for creating dummy entries, allowing worlds to be loaded and keep the missing block references.
      */
-    interface DummyFactory<V extends IForgeRegistryEntry<V>>
-    {
+    interface DummyFactory<V extends IForgeRegistryEntry<V>> {
         V createDummy(ResourceLocation key);
     }
 
     /**
      *
      */
-    interface MissingFactory<V extends IForgeRegistryEntry<V>>
-    {
+    interface MissingFactory<V extends IForgeRegistryEntry<V>> {
         V createMissing(ResourceLocation key, boolean isNetwork);
     }
 }
