--- ../src-base/minecraft/net/minecraftforge/registries/IForgeRegistryEntry.java
+++ ../src-work/minecraft/net/minecraftforge/registries/IForgeRegistryEntry.java
@@ -20,13 +20,11 @@
 package net.minecraftforge.registries;
 
 import com.google.common.reflect.TypeToken;
-
 import net.minecraft.util.ResourceLocation;
 
 import javax.annotation.Nullable;
 
-public interface IForgeRegistryEntry<V>
-{
+public interface IForgeRegistryEntry<V> {
     /**
      * Sets a unique name for this Item. This should be used for uniquely identify the instance of the Item.
      * This is the valid replacement for the atrocious 'getUnlocalizedName().substring(6)' stuff that everyone does.
@@ -58,35 +56,43 @@
 
     // Default implementation, modders who make extra items SHOULD extend this instead of Object.
     // So, all fields in interfaces are forced static, so even with Java8 people must still extend this.
-    @SuppressWarnings({ "serial", "unchecked" })
-    public static class Impl<T  extends IForgeRegistryEntry<T>> implements IForgeRegistryEntry<T>
-    {
-        private TypeToken<T> token = new TypeToken<T>(getClass()){};
-        public final IRegistryDelegate<T> delegate = new RegistryDelegate<T>((T)this, (Class<T>)token.getRawType());
+    @SuppressWarnings({"serial", "unchecked"})
+    public static class Impl<T extends IForgeRegistryEntry<T>> implements IForgeRegistryEntry<T> {
+        private TypeToken<T> token = new TypeToken<T>(getClass()) {
+        };
+        public final IRegistryDelegate<T> delegate = new RegistryDelegate<T>((T) this, (Class<T>) token.getRawType());
         private ResourceLocation registryName = null;
 
-        public final T setRegistryName(String name)
-        {
+        public final T setRegistryName(String name) {
             if (getRegistryName() != null)
                 throw new IllegalStateException("Attempted to set registry name with existing registry name! New: " + name + " Old: " + getRegistryName());
 
             this.registryName = GameData.checkPrefix(name, true);
-            return (T)this;
+            return (T) this;
         }
 
         //Helper functions
         @Override
-        public final T setRegistryName(ResourceLocation name){ return setRegistryName(name.toString()); }
-        public final T setRegistryName(String modID, String name){ return setRegistryName(modID + ":" + name); }
+        public final T setRegistryName(ResourceLocation name) {
+            return setRegistryName(name.toString());
+        }
+
+        public final T setRegistryName(String modID, String name) {
+            return setRegistryName(modID + ":" + name);
+        }
+
         @Override
         @Nullable
-        public final ResourceLocation getRegistryName()
-        {
+        public final ResourceLocation getRegistryName() {
             if (delegate.name() != null) return delegate.name();
             return registryName != null ? registryName : null;
         }
 
         @Override
-        public final Class<T> getRegistryType() { return (Class<T>) token.getRawType(); };
+        public final Class<T> getRegistryType() {
+            return (Class<T>) token.getRawType();
+        }
+
+        ;
     }
 }
