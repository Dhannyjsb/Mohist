--- ../src-base/minecraft/net/minecraftforge/fml/common/event/FMLPreInitializationEvent.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/event/FMLPreInitializationEvent.java
@@ -19,21 +19,19 @@
 
 package net.minecraftforge.fml.common.event;
 
-import java.io.File;
-import java.security.CodeSource;
-import java.security.cert.Certificate;
-import java.util.Properties;
-
 import net.minecraftforge.fml.common.FMLModContainer;
+import net.minecraftforge.fml.common.LoaderState.ModState;
 import net.minecraftforge.fml.common.ModContainer;
 import net.minecraftforge.fml.common.ModMetadata;
-import net.minecraftforge.fml.common.LoaderState.ModState;
 import net.minecraftforge.fml.common.discovery.ASMDataTable;
-
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 import javax.annotation.Nullable;
+import java.io.File;
+import java.security.CodeSource;
+import java.security.cert.Certificate;
+import java.util.Properties;
 
 /**
  * Called before {@link FMLInitializationEvent} during mod startup.
@@ -50,8 +48,7 @@
  * @see net.minecraftforge.fml.common.Mod.EventHandler for how to subscribe to this event
  * @author cpw
  */
-public class FMLPreInitializationEvent extends FMLStateEvent
-{
+public class FMLPreInitializationEvent extends FMLStateEvent {
     private ModMetadata modMetadata;
     private File sourceFile;
     private File configurationDir;
@@ -59,34 +56,30 @@
     private ASMDataTable asmData;
     private ModContainer modContainer;
 
-    public FMLPreInitializationEvent(Object... data)
-    {
+    public FMLPreInitializationEvent(Object... data) {
         super(data);
-        this.asmData = (ASMDataTable)data[0];
-        this.configurationDir = (File)data[1];
+        this.asmData = (ASMDataTable) data[0];
+        this.configurationDir = (File) data[1];
     }
 
     @Override
-    public ModState getModState()
-    {
+    public ModState getModState() {
         return ModState.PREINITIALIZED;
     }
 
     @Override
-    public void applyModContainer(ModContainer activeContainer)
-    {
+    public void applyModContainer(ModContainer activeContainer) {
         this.modContainer = activeContainer;
         this.modMetadata = activeContainer.getMetadata();
         this.sourceFile = activeContainer.getSource();
-        this.suggestedConfigFile = new File(configurationDir, activeContainer.getModId()+".cfg");
+        this.suggestedConfigFile = new File(configurationDir, activeContainer.getModId() + ".cfg");
     }
 
     /**
      * Get the {@link File} the mod was loaded from
      * @return The file the mod was loaded from
      */
-    public File getSourceFile()
-    {
+    public File getSourceFile() {
         return sourceFile;
     }
 
@@ -94,8 +87,7 @@
      * Get the {@link ModMetadata} for this mod
      * @return the mod metadata for the mod
      */
-    public ModMetadata getModMetadata()
-    {
+    public ModMetadata getModMetadata() {
         return modMetadata;
     }
 
@@ -103,8 +95,7 @@
      * Get the main configuration directory for this minecraft instance
      * @return the main configuration directory
      */
-    public File getModConfigurationDirectory()
-    {
+    public File getModConfigurationDirectory() {
         return configurationDir;
     }
 
@@ -112,8 +103,7 @@
      * Get a suggested configuration file for this mod. It will be of the form &lt;modid&gt;.cfg
      * @return A suggested configuration file name for this mod
      */
-    public File getSuggestedConfigurationFile()
-    {
+    public File getSuggestedConfigurationFile() {
         return suggestedConfigFile;
     }
 
@@ -122,8 +112,7 @@
      * parsing information from FML. It can be searched for annotations parsed out by FML.
      * @return
      */
-    public ASMDataTable getAsmData()
-    {
+    public ASMDataTable getAsmData() {
         return asmData;
     }
 
@@ -134,11 +123,9 @@
      * @return A properties object if one exists, else null
      */
     @Nullable
-    public Properties getVersionProperties()
-    {
-        if (this.modContainer instanceof FMLModContainer)
-        {
-            return ((FMLModContainer)this.modContainer).searchForVersionProperties();
+    public Properties getVersionProperties() {
+        if (this.modContainer instanceof FMLModContainer) {
+            return ((FMLModContainer) this.modContainer).searchForVersionProperties();
         }
 
         return null;
@@ -149,8 +136,7 @@
      *
      * @return A logger
      */
-    public Logger getModLog()
-    {
+    public Logger getModLog() {
         return LogManager.getLogger(modContainer.getModId());
     }
 
@@ -164,16 +150,12 @@
      * @return Certificates used to sign FML and Forge
      */
     @Deprecated
-    public Certificate[] getFMLSigningCertificates()
-    {
+    public Certificate[] getFMLSigningCertificates() {
         CodeSource codeSource = getClass().getClassLoader().getParent().getClass().getProtectionDomain().getCodeSource();
         Certificate[] certs = codeSource.getCertificates();
-        if (certs == null)
-        {
+        if (certs == null) {
             return new Certificate[0];
-        }
-        else
-        {
+        } else {
             return certs;
         }
     }
