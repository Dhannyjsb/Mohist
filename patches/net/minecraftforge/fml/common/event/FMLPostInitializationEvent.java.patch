--- ../src-base/minecraft/net/minecraftforge/fml/common/event/FMLPostInitializationEvent.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/event/FMLPostInitializationEvent.java
@@ -19,15 +19,14 @@
 
 package net.minecraftforge.fml.common.event;
 
-import java.util.Arrays;
-import java.util.Objects;
-import java.util.Optional;
-
 import net.minecraftforge.fml.common.FMLLog;
 import net.minecraftforge.fml.common.Loader;
 import net.minecraftforge.fml.common.LoaderState.ModState;
 
 import java.lang.reflect.Constructor;
+import java.util.Arrays;
+import java.util.Objects;
+import java.util.Optional;
 
 /**
  * Called after {@link FMLInitializationEvent} has been dispatched on every mod. This is the third and last
@@ -38,16 +37,13 @@
  * @see net.minecraftforge.fml.common.Mod.EventHandler for how to subscribe to this event
  * @author cpw
  */
-public class FMLPostInitializationEvent extends FMLStateEvent
-{
-    public FMLPostInitializationEvent(Object... data)
-    {
+public class FMLPostInitializationEvent extends FMLStateEvent {
+    public FMLPostInitializationEvent(Object... data) {
         super(data);
     }
 
     @Override
-    public ModState getModState()
-    {
+    public ModState getModState() {
         return ModState.POSTINITIALIZED;
     }
 
@@ -60,19 +56,14 @@
      * @param className The name of the class I wish to instantiate
      * @return An optional containing the object if possible, or null if not
      */
-    public Optional<?> buildSoftDependProxy(String modId, String className, Object... arguments)
-    {
-        if (Loader.isModLoaded(modId))
-        {
+    public Optional<?> buildSoftDependProxy(String modId, String className, Object... arguments) {
+        if (Loader.isModLoaded(modId)) {
             Class<?>[] args = Arrays.stream(arguments).filter(Objects::nonNull).map(Object::getClass).toArray(Class<?>[]::new);
-            try
-            {
-                Class<?> clz = Class.forName(className,true,Loader.instance().getModClassLoader());
+            try {
+                Class<?> clz = Class.forName(className, true, Loader.instance().getModClassLoader());
                 Constructor<?> ct = clz.getConstructor(args);
                 return Optional.of(ct.newInstance(arguments));
-            }
-            catch (Exception e)
-            {
+            } catch (Exception e) {
                 FMLLog.log.info("An error occurred trying to build a soft depend proxy", e);
                 return Optional.empty();
             }
