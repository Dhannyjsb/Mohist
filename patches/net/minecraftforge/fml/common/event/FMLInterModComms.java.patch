--- ../src-base/minecraft/net/minecraftforge/fml/common/event/FMLInterModComms.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/event/FMLInterModComms.java
@@ -19,22 +19,17 @@
 
 package net.minecraftforge.fml.common.event;
 
-import java.util.function.Function;
-import java.util.Optional;
+import com.google.common.collect.ArrayListMultimap;
+import com.google.common.collect.ImmutableList;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.util.ResourceLocation;
-import net.minecraftforge.fml.common.FMLCommonHandler;
-import net.minecraftforge.fml.common.FMLLog;
-import net.minecraftforge.fml.common.Loader;
-import net.minecraftforge.fml.common.LoaderState;
-import net.minecraftforge.fml.common.ModContainer;
+import net.minecraftforge.fml.common.*;
 import net.minecraftforge.fml.common.Mod.Instance;
 
-import com.google.common.collect.ArrayListMultimap;
-import com.google.common.collect.ImmutableList;
-
 import javax.annotation.Nonnull;
+import java.util.Optional;
+import java.util.function.Function;
 
 /**
  * Simple intermod communications to receive simple messages directed at you
@@ -48,6 +43,155 @@
     private static ArrayListMultimap<String, IMCMessage> modMessages = ArrayListMultimap.create();
 
     /**
+     * Send a startup time message
+     * @param modId The modid to send it to
+     * @param key The mod specific key
+     * @param value An NBT type value
+     * @return if the message was enqueued successfully and will be processed during startup
+     */
+    public static boolean sendMessage(String modId, String key, NBTTagCompound value) {
+        return enqueueStartupMessage(modId, new IMCMessage(key, value));
+    }
+
+    /**
+     * Send a startup time message
+     * @param modId The modid to send it to
+     * @param key The mod specific key
+     * @param value An Itemstack value
+     * @return if the message was enqueued successfully and will be processed during startup
+     */
+    public static boolean sendMessage(String modId, String key, ItemStack value) {
+        return enqueueStartupMessage(modId, new IMCMessage(key, value));
+    }
+
+    /**
+     * Send a startup time message
+     * @param modId The modid to send it to
+     * @param key The mod specific key
+     * @param value A ResourceLocation value
+     * @return if the message was enqueued successfully and will be processed during startup
+     */
+    public static boolean sendMessage(String modId, String key, ResourceLocation value) {
+        return enqueueStartupMessage(modId, new IMCMessage(key, value));
+    }
+
+    /**
+     * Send a startup time message
+     * @param modId The modid to send it to
+     * @param key The mod specific key
+     * @param value A String value
+     * @return if the message was enqueued successfully and will be processed during startup
+     */
+    public static boolean sendMessage(String modId, String key, String value) {
+        return enqueueStartupMessage(modId, new IMCMessage(key, value));
+    }
+
+    /**
+     * Send a startup time function message
+     * @param modId The modid to send it to
+     * @param key The mod specific key
+     * @param functionClassName The class name of a function that will be instantiated when the
+     *                          message is read. It must implement {@link Function}
+     * @return if the message was enqueued successfully and will be processed during startup
+     */
+    public static boolean sendFunctionMessage(String modId, String key, String functionClassName) {
+        return enqueueStartupMessage(modId, new IMCMessage(key, functionClassName, true));
+    }
+
+    /**
+     * Send a post-startup message
+     * @param sourceMod The mod sending the message
+     * @param modId The modid to send it to
+     * @param key The mod specific key
+     * @param value An NBT type value
+     */
+    public static void sendRuntimeMessage(Object sourceMod, String modId, String key, NBTTagCompound value) {
+        enqueueMessage(sourceMod, modId, new IMCMessage(key, value));
+    }
+
+    /**
+     * Send a post-startup message
+     * @param sourceMod The mod sending the message
+     * @param modId The modid to send it to
+     * @param key The mod specific key
+     * @param value An Itemstack value
+     */
+    public static void sendRuntimeMessage(Object sourceMod, String modId, String key, ItemStack value) {
+        enqueueMessage(sourceMod, modId, new IMCMessage(key, value));
+    }
+
+    /**
+     * Send a post-startup message
+     * @param sourceMod The mod sending the message
+     * @param modId The modid to send it to
+     * @param key The mod specific key
+     * @param value A string value
+     */
+    public static void sendRuntimeMessage(Object sourceMod, String modId, String key, String value) {
+        enqueueMessage(sourceMod, modId, new IMCMessage(key, value));
+    }
+
+    /**
+     * Send a post-startup message
+     * @param sourceMod The mod sending the message
+     * @param modId The modid to send it to
+     * @param key The mod specific key
+     * @param value A string value
+     */
+    public static void sendRuntimeMessage(Object sourceMod, String modId, String key, ResourceLocation value) {
+        enqueueMessage(sourceMod, modId, new IMCMessage(key, value));
+    }
+
+    /**
+     * Send a post-startup function message.
+     *
+     * @param sourceMod The mod originating this message
+     * @param modId The modid to send it to
+     * @param key The mod specific key
+     * @param functionClassName The name of a class to be loaded when the caller processes this message.
+     *                          The named class must extend {@link Function}
+     */
+    public static void sendRuntimeFunctionMessage(Object sourceMod, String modId, String key, String functionClassName) {
+        enqueueMessage(sourceMod, modId, new IMCMessage(key, functionClassName, true));
+    }
+
+    private static boolean enqueueStartupMessage(String modTarget, IMCMessage message) {
+        if (Loader.instance().activeModContainer() == null) {
+            return false;
+        }
+        enqueueMessage(Loader.instance().activeModContainer(), modTarget, message);
+        return Loader.isModLoaded(modTarget) && !Loader.instance().hasReachedState(LoaderState.POSTINITIALIZATION);
+
+    }
+
+    private static void enqueueMessage(Object sourceMod, String modTarget, IMCMessage message) {
+        ModContainer mc;
+        if (sourceMod instanceof ModContainer) {
+            mc = (ModContainer) sourceMod;
+        } else {
+            mc = FMLCommonHandler.instance().findContainerFor(sourceMod);
+        }
+        if (mc != null && Loader.isModLoaded(modTarget)) {
+            message.setSender(mc);
+            modMessages.put(modTarget, message);
+        }
+    }
+
+    /**
+     * Retrieve any pending runtime messages for the mod
+     * @param forMod The {@link Instance} of the Mod to fetch messages for
+     * @return any messages - the collection will never be null
+     */
+    public static ImmutableList<IMCMessage> fetchRuntimeMessages(Object forMod) {
+        ModContainer mc = FMLCommonHandler.instance().findContainerFor(forMod);
+        if (mc != null) {
+            return ImmutableList.copyOf(modMessages.removeAll(mc.getModId()));
+        } else {
+            return emptyIMCList;
+        }
+    }
+
+    /**
      * Subscribe to this event to receive your messages (they are sent between
      * {@link FMLInitializationEvent} and {@link FMLPostInitializationEvent})
      *
@@ -56,21 +200,17 @@
      */
     public static class IMCEvent extends FMLEvent {
         private ModContainer activeContainer;
+        private ImmutableList<IMCMessage> currentList;
 
         @Override
-        public void applyModContainer(ModContainer activeContainer)
-        {
+        public void applyModContainer(ModContainer activeContainer) {
             this.activeContainer = activeContainer;
             this.currentList = null;
             FMLLog.log.trace("Attempting to deliver {} IMC messages to mod {}", modMessages.get(activeContainer.getModId()).size(), activeContainer.getModId());
         }
 
-        private ImmutableList<IMCMessage> currentList;
-
-        public ImmutableList<IMCMessage> getMessages()
-        {
-            if (currentList == null)
-            {
+        public ImmutableList<IMCMessage> getMessages() {
+            if (currentList == null) {
                 currentList = ImmutableList.copyOf(modMessages.removeAll(activeContainer.getModId()));
             }
             return currentList;
@@ -84,24 +224,23 @@
      *
      */
     public static final class IMCMessage {
-        private final boolean isFunction;
         /**
-         * This is the modid of the mod that sent you the message
-         */
-        private String sender;
-        /**
          * This field, and {@link #value} are both at the mod's discretion
          */
         @Nonnull
         public final String key;
+        private final boolean isFunction;
         /**
          * This field, and {@link #key} are both at the mod's discretion
          */
         @Nonnull
         private final Object value;
+        /**
+         * This is the modid of the mod that sent you the message
+         */
+        private String sender;
 
-        private IMCMessage(@Nonnull String key, @Nonnull Object value)
-        {
+        private IMCMessage(@Nonnull String key, @Nonnull Object value) {
             this.key = key;
             this.value = value;
             this.isFunction = false;
@@ -114,8 +253,7 @@
         }
 
         @Override
-        public String toString()
-        {
+        public String toString() {
             return sender;
         }
 
@@ -123,13 +261,11 @@
          * Get the sending modId of this message.
          * @return The modId of the mod that originated the message
          */
-        public String getSender()
-        {
+        public String getSender() {
             return this.sender;
         }
 
-        void setSender(ModContainer activeModContainer)
-        {
+        void setSender(ModContainer activeModContainer) {
             this.sender = activeModContainer.getModId();
         }
 
@@ -138,17 +274,16 @@
          * @throws ClassCastException if this message doesn't contain a String value
          * @return The string value
          */
-        public String getStringValue()
-        {
+        public String getStringValue() {
             return (String) value;
         }
+
         /**
          * Get the ResourceLocation value from this message.
          * @throws ClassCastException if this message doesn't contain a ResourceLocation value
          * @return The string value
          */
-        public ResourceLocation getResourceLocationValue()
-        {
+        public ResourceLocation getResourceLocationValue() {
             return (ResourceLocation) value;
         }
 
@@ -157,8 +292,7 @@
          * @throws ClassCastException if this message doesn't contain an NBT value
          * @return The NBT value
          */
-        public NBTTagCompound getNBTValue()
-        {
+        public NBTTagCompound getNBTValue() {
             return (NBTTagCompound) value;
         }
 
@@ -168,8 +302,7 @@
          * @return The Itemstack value
          */
         @Nonnull
-        public ItemStack getItemStackValue()
-        {
+        public ItemStack getItemStackValue() {
             return (ItemStack) value;
         }
 
@@ -183,15 +316,15 @@
          * @return The function value or Optional.absent if it wasn't readable or isn't a function call
          */
         @SuppressWarnings("unchecked")
-        public <T,V> Optional<Function<T,V>> getFunctionValue(Class<T> functionFrom, Class<V> functionTo) {
+        public <T, V> Optional<Function<T, V>> getFunctionValue(Class<T> functionFrom, Class<V> functionTo) {
             if (!isFunction) {
                 return Optional.empty();
             }
             try {
-                Function<T,V> f = Class.forName((String) value).asSubclass(Function.class).newInstance();
+                Function<T, V> f = Class.forName((String) value).asSubclass(Function.class).newInstance();
                 return Optional.of(f);
             } catch (Exception e) {
-                FMLLog.log.info("An error occurred instantiating the IMC function. key: {} value: {}, caller: {}", key,value,sender);
+                FMLLog.log.info("An error occurred instantiating the IMC function. key: {} value: {}, caller: {}", key, value, sender);
                 return Optional.empty();
             }
         }
@@ -200,8 +333,7 @@
          * Get the actual message class type
          * @return The type of the message
          */
-        public Class<?> getMessageType()
-        {
+        public Class<?> getMessageType() {
             return value.getClass();
         }
 
@@ -209,8 +341,7 @@
          * Is this a string type message
          * @return if this is a string type message
          */
-        public boolean isStringMessage()
-        {
+        public boolean isStringMessage() {
             return String.class.isAssignableFrom(getMessageType());
         }
 
@@ -218,8 +349,7 @@
          * Is this an {@link ItemStack} type message
          * @return if this is an itemstack type message
          */
-        public boolean isItemStackMessage()
-        {
+        public boolean isItemStackMessage() {
             return ItemStack.class.isAssignableFrom(getMessageType());
         }
 
@@ -227,8 +357,7 @@
          * Is this an {@link NBTTagCompound} type message
          * @return if this is an NBT type message
          */
-        public boolean isNBTMessage()
-        {
+        public boolean isNBTMessage() {
             return NBTTagCompound.class.isAssignableFrom(getMessageType());
         }
 
@@ -236,8 +365,7 @@
          * Is this an {@link ResourceLocation} type message
          * @return if this is an NBT type message
          */
-        public boolean isResourceLocationMessage()
-        {
+        public boolean isResourceLocationMessage() {
             return ResourceLocation.class.isAssignableFrom(getMessageType());
         }
 
@@ -245,172 +373,8 @@
          * Is this a {@link Function} type message
          * @return if this is a function type message
          */
-        public boolean isFunctionMessage() { return Function.class.isAssignableFrom(getMessageType()); }
-    }
-
-    /**
-     * Send a startup time message
-     * @param modId The modid to send it to
-     * @param key The mod specific key
-     * @param value An NBT type value
-     * @return if the message was enqueued successfully and will be processed during startup
-     */
-    public static boolean sendMessage(String modId, String key, NBTTagCompound value)
-    {
-        return enqueueStartupMessage(modId, new IMCMessage(key, value));
-    }
-
-    /**
-     * Send a startup time message
-     * @param modId The modid to send it to
-     * @param key The mod specific key
-     * @param value An Itemstack value
-     * @return if the message was enqueued successfully and will be processed during startup
-     */
-    public static boolean sendMessage(String modId, String key, ItemStack value)
-    {
-        return enqueueStartupMessage(modId, new IMCMessage(key, value));
-    }
-
-    /**
-     * Send a startup time message
-     * @param modId The modid to send it to
-     * @param key The mod specific key
-     * @param value A ResourceLocation value
-     * @return if the message was enqueued successfully and will be processed during startup
-     */
-    public static boolean sendMessage(String modId, String key, ResourceLocation value)
-    {
-        return enqueueStartupMessage(modId, new IMCMessage(key, value));
-    }
-
-    /**
-     * Send a startup time message
-     * @param modId The modid to send it to
-     * @param key The mod specific key
-     * @param value A String value
-     * @return if the message was enqueued successfully and will be processed during startup
-     */
-    public static boolean sendMessage(String modId, String key, String value)
-    {
-        return enqueueStartupMessage(modId, new IMCMessage(key, value));
-    }
-    /**
-     * Send a startup time function message
-     * @param modId The modid to send it to
-     * @param key The mod specific key
-     * @param functionClassName The class name of a function that will be instantiated when the
-     *                          message is read. It must implement {@link Function}
-     * @return if the message was enqueued successfully and will be processed during startup
-     */
-    public static boolean sendFunctionMessage(String modId, String key, String functionClassName)
-    {
-        return enqueueStartupMessage(modId, new IMCMessage(key, functionClassName, true));
-    }
-
-    /**
-     * Send a post-startup message
-     * @param sourceMod The mod sending the message
-     * @param modId The modid to send it to
-     * @param key The mod specific key
-     * @param value An NBT type value
-     */
-    public static void sendRuntimeMessage(Object sourceMod, String modId, String key, NBTTagCompound value)
-    {
-        enqueueMessage(sourceMod, modId, new IMCMessage(key, value));
-    }
-
-    /**
-     * Send a post-startup message
-     * @param sourceMod The mod sending the message
-     * @param modId The modid to send it to
-     * @param key The mod specific key
-     * @param value An Itemstack value
-     */
-    public static void sendRuntimeMessage(Object sourceMod, String modId, String key, ItemStack value)
-    {
-        enqueueMessage(sourceMod, modId, new IMCMessage(key, value));
-    }
-
-    /**
-     * Send a post-startup message
-     * @param sourceMod The mod sending the message
-     * @param modId The modid to send it to
-     * @param key The mod specific key
-     * @param value A string value
-     */
-    public static void sendRuntimeMessage(Object sourceMod, String modId, String key, String value)
-    {
-        enqueueMessage(sourceMod, modId, new IMCMessage(key, value));
-    }
-
-    /**
-     * Send a post-startup message
-     * @param sourceMod The mod sending the message
-     * @param modId The modid to send it to
-     * @param key The mod specific key
-     * @param value A string value
-     */
-    public static void sendRuntimeMessage(Object sourceMod, String modId, String key, ResourceLocation value)
-    {
-        enqueueMessage(sourceMod, modId, new IMCMessage(key, value));
-    }
-    /**
-     * Send a post-startup function message.
-     *
-     * @param sourceMod The mod originating this message
-     * @param modId The modid to send it to
-     * @param key The mod specific key
-     * @param functionClassName The name of a class to be loaded when the caller processes this message.
-     *                          The named class must extend {@link Function}
-     */
-    public static void sendRuntimeFunctionMessage(Object sourceMod, String modId, String key, String functionClassName)
-    {
-        enqueueMessage(sourceMod, modId, new IMCMessage(key, functionClassName, true));
-    }
-
-    private static boolean enqueueStartupMessage(String modTarget, IMCMessage message)
-    {
-        if (Loader.instance().activeModContainer() == null)
-        {
-            return false;
+        public boolean isFunctionMessage() {
+            return Function.class.isAssignableFrom(getMessageType());
         }
-        enqueueMessage(Loader.instance().activeModContainer(), modTarget, message);
-        return Loader.isModLoaded(modTarget) && !Loader.instance().hasReachedState(LoaderState.POSTINITIALIZATION);
-
     }
-    private static void enqueueMessage(Object sourceMod, String modTarget, IMCMessage message)
-    {
-        ModContainer mc;
-        if (sourceMod instanceof ModContainer) {
-            mc = (ModContainer) sourceMod;
-        }
-        else
-        {
-            mc = FMLCommonHandler.instance().findContainerFor(sourceMod);
-        }
-        if (mc != null && Loader.isModLoaded(modTarget))
-        {
-            message.setSender(mc);
-            modMessages.put(modTarget, message);
-        }
-    }
-
-    /**
-     * Retrieve any pending runtime messages for the mod
-     * @param forMod The {@link Instance} of the Mod to fetch messages for
-     * @return any messages - the collection will never be null
-     */
-    public static ImmutableList<IMCMessage> fetchRuntimeMessages(Object forMod)
-    {
-        ModContainer mc = FMLCommonHandler.instance().findContainerFor(forMod);
-        if (mc != null)
-        {
-            return ImmutableList.copyOf(modMessages.removeAll(mc.getModId()));
-        }
-        else
-        {
-            return emptyIMCList;
-        }
-    }
 }
