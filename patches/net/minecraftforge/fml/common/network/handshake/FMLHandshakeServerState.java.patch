--- ../src-base/minecraft/net/minecraftforge/fml/common/network/handshake/FMLHandshakeServerState.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/network/handshake/FMLHandshakeServerState.java
@@ -21,12 +21,6 @@
 
 import io.netty.channel.ChannelFutureListener;
 import io.netty.channel.ChannelHandlerContext;
-
-import java.util.Iterator;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.function.Consumer;
-
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.fml.common.FMLLog;
 import net.minecraftforge.fml.common.Loader;
@@ -36,14 +30,18 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.registries.ForgeRegistry;
 import net.minecraftforge.registries.RegistryManager;
+import red.mohist.api.PlayerAPI;
+import red.mohist.i18n.Message;
 
-enum FMLHandshakeServerState implements IHandshakeState<FMLHandshakeServerState>
-{
-    START
-    {
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.function.Consumer;
+
+enum FMLHandshakeServerState implements IHandshakeState<FMLHandshakeServerState> {
+    START {
         @Override
-        public void accept(ChannelHandlerContext ctx, FMLHandshakeMessage msg, Consumer<? super FMLHandshakeServerState> cons)
-        {
+        public void accept(ChannelHandlerContext ctx, FMLHandshakeMessage msg, Consumer<? super FMLHandshakeServerState> cons) {
             cons.accept(HELLO);
             NetworkDispatcher dispatcher = ctx.channel().attr(NetworkDispatcher.FML_DISPATCHER).get();
             int overrideDim = dispatcher.serverInitiateHandshake();
@@ -51,25 +49,26 @@
             ctx.writeAndFlush(new FMLHandshakeMessage.ServerHello(overrideDim)).addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
         }
     },
-    HELLO
-    {
+    HELLO {
         @Override
-        public void accept(ChannelHandlerContext ctx, FMLHandshakeMessage msg, Consumer<? super FMLHandshakeServerState> cons)
-        {
+        public void accept(ChannelHandlerContext ctx, FMLHandshakeMessage msg, Consumer<? super FMLHandshakeServerState> cons) {
             // Hello packet first
-            if (msg instanceof FMLHandshakeMessage.ClientHello)
-            {
-                FMLLog.log.info("Client protocol version {}", Integer.toHexString(((FMLHandshakeMessage.ClientHello)msg).protocolVersion()));
+            if (msg instanceof FMLHandshakeMessage.ClientHello) {
+                FMLLog.log.info("Client protocol version {}", Integer.toHexString(((FMLHandshakeMessage.ClientHello) msg).protocolVersion()));
                 return;
             }
 
-            FMLHandshakeMessage.ModList client = (FMLHandshakeMessage.ModList)msg;
+            FMLHandshakeMessage.ModList client = (FMLHandshakeMessage.ModList) msg;
             NetworkDispatcher dispatcher = ctx.channel().attr(NetworkDispatcher.FML_DISPATCHER).get();
             dispatcher.setModList(client.modList());
-            FMLLog.log.info("Client attempting to join with {} mods : {}", client.modListSize(), client.modListAsString());
+            if (client.modListSize() > 0) {
+                PlayerAPI.mods.put(dispatcher.player, client.modListSize());
+                PlayerAPI.modlist.put(dispatcher.player, client.modListAsString());
+            }
+            FMLLog.log.info(Message.getFormatString(Message.client_join_mods, new Object[]{client.modListSize()}));
+            FMLLog.log.debug("Client attempting to join with {} mods : {}", client.modListSize(), client.modListAsString());
             String modRejections = FMLNetworkHandler.checkModList(client, Side.CLIENT);
-            if (modRejections != null)
-            {
+            if (modRejections != null) {
                 cons.accept(ERROR);
                 dispatcher.rejectHandshake(modRejections);
                 return;
@@ -78,18 +77,14 @@
             ctx.writeAndFlush(new FMLHandshakeMessage.ModList(Loader.instance().getActiveModList()));
         }
     },
-    WAITINGCACK
-    {
+    WAITINGCACK {
         @Override
-        public void accept(ChannelHandlerContext ctx, FMLHandshakeMessage msg, Consumer<? super FMLHandshakeServerState> cons)
-        {
+        public void accept(ChannelHandlerContext ctx, FMLHandshakeMessage msg, Consumer<? super FMLHandshakeServerState> cons) {
             cons.accept(COMPLETE);
-            if (!ctx.channel().attr(NetworkDispatcher.IS_LOCAL).get())
-            {
+            if (!ctx.channel().attr(NetworkDispatcher.IS_LOCAL).get()) {
                 Map<ResourceLocation, ForgeRegistry.Snapshot> snapshot = RegistryManager.ACTIVE.takeSnapshot(false);
                 Iterator<Map.Entry<ResourceLocation, ForgeRegistry.Snapshot>> itr = snapshot.entrySet().iterator();
-                while (itr.hasNext())
-                {
+                while (itr.hasNext()) {
                     Entry<ResourceLocation, ForgeRegistry.Snapshot> e = itr.next();
                     ctx.writeAndFlush(new FMLHandshakeMessage.RegistryData(itr.hasNext(), e.getKey(), e.getValue())).addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
                 }
@@ -98,11 +93,9 @@
             NetworkRegistry.INSTANCE.fireNetworkHandshake(ctx.channel().attr(NetworkDispatcher.FML_DISPATCHER).get(), Side.SERVER);
         }
     },
-    COMPLETE
-    {
+    COMPLETE {
         @Override
-        public void accept(ChannelHandlerContext ctx, FMLHandshakeMessage msg, Consumer<? super FMLHandshakeServerState> cons)
-        {
+        public void accept(ChannelHandlerContext ctx, FMLHandshakeMessage msg, Consumer<? super FMLHandshakeServerState> cons) {
             cons.accept(DONE);
             // Poke the client
             ctx.writeAndFlush(new FMLHandshakeMessage.HandshakeAck(ordinal())).addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
@@ -110,18 +103,14 @@
             ctx.fireChannelRead(complete);
         }
     },
-    DONE
-    {
+    DONE {
         @Override
-        public void accept(ChannelHandlerContext ctx, FMLHandshakeMessage msg, Consumer<? super FMLHandshakeServerState> cons)
-        {
+        public void accept(ChannelHandlerContext ctx, FMLHandshakeMessage msg, Consumer<? super FMLHandshakeServerState> cons) {
         }
     },
-    ERROR
-    {
+    ERROR {
         @Override
-        public void accept(ChannelHandlerContext ctx, FMLHandshakeMessage msg, Consumer<? super FMLHandshakeServerState> cons)
-        {
+        public void accept(ChannelHandlerContext ctx, FMLHandshakeMessage msg, Consumer<? super FMLHandshakeServerState> cons) {
         }
     };
 }
