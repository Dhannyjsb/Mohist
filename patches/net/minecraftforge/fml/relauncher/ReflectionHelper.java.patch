--- ../src-base/minecraft/net/minecraftforge/fml/relauncher/ReflectionHelper.java
+++ ../src-work/minecraft/net/minecraftforge/fml/relauncher/ReflectionHelper.java
@@ -25,7 +25,6 @@
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
-
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
@@ -45,89 +44,17 @@
  * @deprecated not for external use
  */
 @Deprecated // TODO: remove/relocate/replace
-public class ReflectionHelper
-{
-    public static class UnableToFindMethodException extends RuntimeException
-    {
-        private static final long serialVersionUID = 1L;
-
-        @Deprecated // TODO: remove
-        public UnableToFindMethodException(String[] methodNames, Exception failed)
-        {
-            super(failed);
-        }
-
-        public UnableToFindMethodException(Throwable failed)
-        {
-            super(failed);
-        }
-    }
-
-    public static class UnableToFindClassException extends RuntimeException
-    {
-        private static final long serialVersionUID = 1L;
-
-        public UnableToFindClassException(String[] classNames, @Nullable Exception err)
-        {
-            super(err);
-        }
-    }
-
-    public static class UnableToAccessFieldException extends RuntimeException
-    {
-        private static final long serialVersionUID = 1L;
-
-        @Deprecated // TODO: remove
-        public UnableToAccessFieldException(String[] fieldNames, Exception e)
-        {
-            super(e);
-        }
-
-        public UnableToAccessFieldException(Exception e)
-        {
-            super(e);
-        }
-    }
-
-    public static class UnableToFindFieldException extends RuntimeException
-    {
-        private static final long serialVersionUID = 1L;
-
-        @Deprecated // TODO: remove
-        public UnableToFindFieldException(String[] fieldNameList, Exception e)
-        {
-            super(e);
-        }
-
-        public UnableToFindFieldException(Exception e)
-        {
-            super(e);
-        }
-    }
-
-    public static class UnknownConstructorException extends RuntimeException
-    {
-        public UnknownConstructorException(final String message)
-        {
-            super(message);
-        }
-    }
-
+public class ReflectionHelper {
     /** @deprecated use {@link #findField(Class, String, String)} */
     @Deprecated // TODO: remove
-    public static Field findField(Class<?> clazz, String... fieldNames)
-    {
+    public static Field findField(Class<?> clazz, String... fieldNames) {
         Exception failed = null;
-        for (String fieldName : fieldNames)
-        {
-            try
-            {
+        for (String fieldName : fieldNames) {
+            try {
                 Field f = clazz.getDeclaredField(fieldName);
                 f.setAccessible(true);
                 return f;
-            }
-            catch (Exception e)
-            {
+            } catch (Exception e) {
                 failed = e;
             }
         }
@@ -148,122 +75,89 @@
      * @return The field with the specified name in the given class.
      */
     @Nonnull
-    public static Field findField(@Nonnull Class<?> clazz, @Nonnull String fieldName, @Nullable String fieldObfName)
-    {
+    public static Field findField(@Nonnull Class<?> clazz, @Nonnull String fieldName, @Nullable String fieldObfName) {
         Preconditions.checkNotNull(clazz);
         Preconditions.checkArgument(StringUtils.isNotEmpty(fieldName), "Field name cannot be empty");
 
         String nameToFind = FMLLaunchHandler.isDeobfuscatedEnvironment() ? fieldName : MoreObjects.firstNonNull(fieldObfName, fieldName);
 
-        try
-        {
+        try {
             Field f = clazz.getDeclaredField(nameToFind);
             f.setAccessible(true);
             return f;
-        }
-        catch (Exception e)
-        {
+        } catch (Exception e) {
             throw new UnableToFindFieldException(e);
         }
     }
 
     @SuppressWarnings("unchecked")
     @Deprecated // TODO: remove
-    public static <T, E> T getPrivateValue(Class <? super E > classToAccess, @Nullable E instance, int fieldIndex)
-    {
-        try
-        {
+    public static <T, E> T getPrivateValue(Class<? super E> classToAccess, @Nullable E instance, int fieldIndex) {
+        try {
             Field f = classToAccess.getDeclaredFields()[fieldIndex];
             f.setAccessible(true);
             return (T) f.get(instance);
-        }
-        catch (Exception e)
-        {
+        } catch (Exception e) {
             throw new UnableToAccessFieldException(e);
         }
     }
 
-    /** @deprecated use {@link #getPrivateValue(Class, Object, String, String )} */
+    /** @deprecated use {@link #getPrivateValue(Class, Object, String, String)} */
     @SuppressWarnings("unchecked")
     @Deprecated // TODO: remove
-    public static <T, E> T getPrivateValue(Class <? super E > classToAccess, E instance, String... fieldNames)
-    {
-        try
-        {
+    public static <T, E> T getPrivateValue(Class<? super E> classToAccess, E instance, String... fieldNames) {
+        try {
             return (T) findField(classToAccess, fieldNames).get(instance);
-        }
-        catch (Exception e)
-        {
+        } catch (Exception e) {
             throw new UnableToAccessFieldException(fieldNames, e);
         }
     }
 
     @SuppressWarnings("unchecked")
-    public static <T, E> T getPrivateValue(Class<? super E> classToAccess, @Nullable E instance, String fieldName, @Nullable String fieldObfName)
-    {
-        try
-        {
+    public static <T, E> T getPrivateValue(Class<? super E> classToAccess, @Nullable E instance, String fieldName, @Nullable String fieldObfName) {
+        try {
             return (T) findField(classToAccess, fieldName, fieldObfName).get(instance);
-        }
-        catch (Exception e)
-        {
+        } catch (Exception e) {
             throw new UnableToAccessFieldException(e);
         }
     }
 
     @Deprecated // TODO: remove
-    public static <T, E> void setPrivateValue(Class <? super T > classToAccess, T instance, E value, int fieldIndex)
-    {
-        try
-        {
+    public static <T, E> void setPrivateValue(Class<? super T> classToAccess, T instance, E value, int fieldIndex) {
+        try {
             Field f = classToAccess.getDeclaredFields()[fieldIndex];
             f.setAccessible(true);
             f.set(instance, value);
-        }
-        catch (Exception e)
-        {
+        } catch (Exception e) {
             throw new UnableToAccessFieldException(e);
         }
     }
 
     /** @deprecated use {@link #setPrivateValue(Class, Object, Object, String, String)} */
     @Deprecated // TODO: remove
-    public static <T, E> void setPrivateValue(Class <? super T > classToAccess, T instance, E value, String... fieldNames)
-    {
-        try
-        {
+    public static <T, E> void setPrivateValue(Class<? super T> classToAccess, T instance, E value, String... fieldNames) {
+        try {
             findField(classToAccess, fieldNames).set(instance, value);
-        }
-        catch (Exception e)
-        {
+        } catch (Exception e) {
             throw new UnableToAccessFieldException(fieldNames, e);
         }
     }
 
-    public static <T, E> void setPrivateValue(Class<? super T> classToAccess, @Nullable T instance, @Nullable E value, String fieldName, @Nullable String fieldObfName)
-    {
-        try
-        {
+    public static <T, E> void setPrivateValue(Class<? super T> classToAccess, @Nullable T instance, @Nullable E value, String fieldName, @Nullable String fieldObfName) {
+        try {
             findField(classToAccess, fieldName, fieldObfName).set(instance, value);
-        }
-        catch (Exception e)
-        {
+        } catch (Exception e) {
             throw new UnableToAccessFieldException(e);
         }
     }
 
     @SuppressWarnings("unchecked")
-    public static Class<? super Object> getClass(ClassLoader loader, String... classNames)
-    {
+    public static Class<? super Object> getClass(ClassLoader loader, String... classNames) {
         Exception err = null;
-        for (String className : classNames)
-        {
-            try
-            {
+        for (String className : classNames) {
+            try {
                 return (Class<? super Object>) Class.forName(className, false, loader);
-            }
-            catch (Exception e)
-            {
+            } catch (Exception e) {
                 err = e;
             }
         }
@@ -285,21 +179,17 @@
      * @return The method with the specified name and parameters in the given class.
      */
     @Nonnull
-    public static Method findMethod(@Nonnull Class<?> clazz, @Nonnull String methodName, @Nullable String methodObfName, Class<?>... parameterTypes)
-    {
+    public static Method findMethod(@Nonnull Class<?> clazz, @Nonnull String methodName, @Nullable String methodObfName, Class<?>... parameterTypes) {
         Preconditions.checkNotNull(clazz);
         Preconditions.checkArgument(StringUtils.isNotEmpty(methodName), "Method name cannot be empty");
 
         String nameToFind = FMLLaunchHandler.isDeobfuscatedEnvironment() ? methodName : MoreObjects.firstNonNull(methodObfName, methodName);
 
-        try
-        {
+        try {
             Method m = clazz.getDeclaredMethod(nameToFind, parameterTypes);
             m.setAccessible(true);
             return m;
-        }
-        catch (Exception e)
-        {
+        } catch (Exception e) {
             throw new UnableToFindMethodException(e);
         }
     }
@@ -316,25 +206,20 @@
      * @throws UnknownConstructorException if the constructor could not be found
      */
     @Nonnull
-    public static <T> Constructor<T> findConstructor(@Nonnull final Class<T> klass, @Nonnull final Class<?>... parameterTypes)
-    {
+    public static <T> Constructor<T> findConstructor(@Nonnull final Class<T> klass, @Nonnull final Class<?>... parameterTypes) {
         Preconditions.checkNotNull(klass, "class");
         Preconditions.checkNotNull(parameterTypes, "parameter types");
 
-        try
-        {
+        try {
             Constructor<T> constructor = klass.getDeclaredConstructor(parameterTypes);
             constructor.setAccessible(true);
             return constructor;
-        }
-        catch (final NoSuchMethodException e)
-        {
+        } catch (final NoSuchMethodException e) {
             final StringBuilder desc = new StringBuilder();
             desc.append(klass.getSimpleName());
 
             StringJoiner joiner = new StringJoiner(", ", "(", ")");
-            for (Class<?> type : parameterTypes)
-            {
+            for (Class<?> type : parameterTypes) {
                 joiner.add(type.getSimpleName());
             }
             desc.append(joiner);
@@ -342,4 +227,57 @@
             throw new UnknownConstructorException("Could not find constructor '" + desc.toString() + "' in " + klass);
         }
     }
+
+    public static class UnableToFindMethodException extends RuntimeException {
+        private static final long serialVersionUID = 1L;
+
+        @Deprecated // TODO: remove
+        public UnableToFindMethodException(String[] methodNames, Exception failed) {
+            super(failed);
+        }
+
+        public UnableToFindMethodException(Throwable failed) {
+            super(failed);
+        }
+    }
+
+    public static class UnableToFindClassException extends RuntimeException {
+        private static final long serialVersionUID = 1L;
+
+        public UnableToFindClassException(String[] classNames, @Nullable Exception err) {
+            super(err);
+        }
+    }
+
+    public static class UnableToAccessFieldException extends RuntimeException {
+        private static final long serialVersionUID = 1L;
+
+        @Deprecated // TODO: remove
+        public UnableToAccessFieldException(String[] fieldNames, Exception e) {
+            super(e);
+        }
+
+        public UnableToAccessFieldException(Exception e) {
+            super(e);
+        }
+    }
+
+    public static class UnableToFindFieldException extends RuntimeException {
+        private static final long serialVersionUID = 1L;
+
+        @Deprecated // TODO: remove
+        public UnableToFindFieldException(String[] fieldNameList, Exception e) {
+            super(e);
+        }
+
+        public UnableToFindFieldException(Exception e) {
+            super(e);
+        }
+    }
+
+    public static class UnknownConstructorException extends RuntimeException {
+        public UnknownConstructorException(final String message) {
+            super(message);
+        }
+    }
 }
