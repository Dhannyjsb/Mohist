--- ../src-base/minecraft/net/minecraftforge/fml/relauncher/ServerLaunchWrapper.java
+++ ../src-work/minecraft/net/minecraftforge/fml/relauncher/ServerLaunchWrapper.java
@@ -19,61 +19,62 @@
 
 package net.minecraftforge.fml.relauncher;
 
-import java.lang.reflect.Method;
-
 import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.core.LoggerContext;
+import red.mohist.Mohist;
+import red.mohist.down.DownloadLibraries;
+import red.mohist.i18n.Message;
 
+import java.lang.reflect.Method;
+
 public class ServerLaunchWrapper {
 
-    /**
-     * @param args
-     */
-    public static void main(String[] args)
-    {
-        new ServerLaunchWrapper().run(args);
-    }
+    public static long j;
 
-    private ServerLaunchWrapper()
-    {
+    public ServerLaunchWrapper() {
 
     }
 
-    private void run(String[] args)
-    {
-        if (System.getProperty("log4j.configurationFile") == null)
-        {
+    public void run(String[] args) {
+        if (System.getProperty("log4j.configurationFile") == null) {
             // Set this early so we don't need to reconfigure later
-            System.setProperty("log4j.configurationFile", "log4j2_server.xml");
+            System.setProperty("log4j.configurationFile", "log4j2_mohist.xml");
         }
         Class<?> launchwrapper = null;
-        try
-        {
-            launchwrapper = Class.forName("net.minecraft.launchwrapper.Launch",true,getClass().getClassLoader());
-            Class.forName("org.objectweb.asm.Type",true,getClass().getClassLoader());
+        try {
+            launchwrapper = Class.forName("net.minecraft.launchwrapper.Launch", true, getClass().getClassLoader());
+            Class.forName("org.objectweb.asm.Type", true, getClass().getClassLoader());
+            System.out.println("");
+            System.out.println("");
+            System.out.println(" /'\\_/`\\          /\\ \\       __          /\\ \\__   ");
+            System.out.println("/\\      \\     ___ \\ \\ \\___  /\\_\\     ____\\ \\ ,_\\  ");
+            System.out.println("\\ \\ \\__\\ \\   / __`\\\\ \\  _ `\\\\/\\ \\   /',__\\\\ \\ \\/  ");
+            System.out.println(" \\ \\ \\_/\\ \\ /\\ \\L\\ \\\\ \\ \\ \\ \\\\ \\ \\ /\\__, `\\\\ \\ \\_ ");
+            System.out.println("  \\ \\_\\\\ \\_\\\\ \\____/ \\ \\_\\ \\_\\\\ \\_\\\\/\\____/ \\ \\__\\");
+            System.out.println("   \\/_/ \\/_/ \\/___/   \\/_/\\/_/ \\/_/ \\/___/   \\/__/");
+            System.out.println("");
+            System.out.println("");
+            System.out.println("                        " + Message.getString(Message.forge_ServerLanunchWrapper_1));
+            System.out.println("");
+            Mohist.LOGGER = LogManager.getLogger("Mohist");
+            Mohist.LOGGER.info(Message.getString(Message.Mohist_Start));
+            Mohist.LOGGER.info(Message.getString(Message.Load_libraries));
+        } catch (Exception e) {
+            System.out.println(Message.getString(Message.Not_Have_Library));
+            Thread t = new Thread(new DownloadLibraries(), "Server Libraries Thread");
+            t.start();
         }
-        catch (Exception e)
-        {
-            System.err.printf("We appear to be missing one or more essential library files.\n" +
-            		"You will need to add them to your server before FML and Forge will run successfully.");
-            e.printStackTrace(System.err);
-            System.exit(1);
-        }
+        j = System.nanoTime();
 
-        try
-        {
+        try {
             Method main = launchwrapper.getMethod("main", String[].class);
             String[] allArgs = new String[args.length + 2];
             allArgs[0] = "--tweakClass";
             allArgs[1] = "net.minecraftforge.fml.common.launcher.FMLServerTweaker";
             System.arraycopy(args, 0, allArgs, 2, args.length);
-            main.invoke(null,(Object)allArgs);
-        }
-        catch (Exception e)
-        {
-            System.err.printf("A problem occurred running the Server launcher.");
+            main.invoke(null, (Object) allArgs);
+        } catch (Exception e) {
+            System.out.println(Message.rb.getString(Message.Mohist_Start_Error.toString()));
             e.printStackTrace(System.err);
-            System.exit(1);
         }
     }
 
