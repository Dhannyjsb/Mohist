--- ../src-base/minecraft/net/minecraftforge/fml/server/FMLServerHandler.java
+++ ../src-work/minecraft/net/minecraftforge/fml/server/FMLServerHandler.java
@@ -19,13 +19,7 @@
 
 package net.minecraftforge.fml.server;
 
-import java.io.*;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Set;
-import java.util.zip.ZipEntry;
-import java.util.zip.ZipFile;
-
+import com.google.common.collect.ImmutableList;
 import net.minecraft.network.INetHandler;
 import net.minecraft.network.NetHandlerPlayServer;
 import net.minecraft.network.NetworkManager;
@@ -36,20 +30,21 @@
 import net.minecraft.util.text.translation.LanguageMap;
 import net.minecraft.world.storage.SaveFormatOld;
 import net.minecraftforge.common.util.CompoundDataFixer;
-import net.minecraftforge.fml.common.FMLCommonHandler;
-import net.minecraftforge.fml.common.FMLLog;
-import net.minecraftforge.fml.common.IFMLSidedHandler;
-import net.minecraftforge.fml.common.Loader;
-import net.minecraftforge.fml.common.ModContainer;
-import net.minecraftforge.fml.common.StartupQuery;
+import net.minecraftforge.fml.common.*;
 import net.minecraftforge.fml.common.eventhandler.EventBus;
 import net.minecraftforge.fml.common.network.FMLNetworkEvent;
 import net.minecraftforge.fml.relauncher.FMLLaunchHandler;
 import net.minecraftforge.fml.relauncher.Side;
-
-import com.google.common.collect.ImmutableList;
 import org.apache.commons.io.IOUtils;
+import red.mohist.i18n.Message;
 
+import java.io.*;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipFile;
+
 /**
  * Handles primary communication from hooked code into the system
  *
@@ -69,8 +64,7 @@
  * @author cpw
  *
  */
-public class FMLServerHandler implements IFMLSidedHandler
-{
+public class FMLServerHandler implements IFMLSidedHandler {
     /**
      * The singleton
      */
@@ -81,19 +75,26 @@
      */
     private MinecraftServer server;
     private List<String> injectedModContainers;
-    private FMLServerHandler()
-    {
+
+    private FMLServerHandler() {
         injectedModContainers = FMLCommonHandler.instance().beginLoading(this);
     }
+
     /**
+     * @return the instance
+     */
+    public static FMLServerHandler instance() {
+        return INSTANCE;
+    }
+
+    /**
      * Called to start the whole game off from
      * {@link MinecraftServer#startServer}
      *
      * @param minecraftServer server
      */
     @Override
-    public void beginServerLoading(MinecraftServer minecraftServer)
-    {
+    public void beginServerLoading(MinecraftServer minecraftServer) {
         server = minecraftServer;
         Loader.instance().loadMods(injectedModContainers);
         Loader.instance().preinitializeMods();
@@ -103,20 +104,17 @@
      * Called a bit later on during server initialization to finish loading mods
      */
     @Override
-    public void finishServerLoading()
-    {
+    public void finishServerLoading() {
         Loader.instance().initializeMods();
     }
 
     @Override
-    public void haltGame(String message, Throwable exception)
-    {
+    public void haltGame(String message, Throwable exception) {
         throw new RuntimeException(message, exception);
     }
 
     @Override
-    public File getSavesDirectory()
-    {
+    public File getSavesDirectory() {
         return ((SaveFormatOld) server.getActiveAnvilConverter()).savesDirectory;
     }
 
@@ -124,25 +122,15 @@
      * Get the server instance
      */
     @Override
-    public MinecraftServer getServer()
-    {
+    public MinecraftServer getServer() {
         return server;
     }
 
-    /**
-     * @return the instance
-     */
-    public static FMLServerHandler instance()
-    {
-        return INSTANCE;
-    }
-
     /* (non-Javadoc)
      * @see net.minecraftforge.fml.common.IFMLSidedHandler#getAdditionalBrandingInformation()
      */
     @Override
-    public List<String> getAdditionalBrandingInformation()
-    {
+    public List<String> getAdditionalBrandingInformation() {
         return ImmutableList.<String>of();
     }
 
@@ -150,65 +138,52 @@
      * @see net.minecraftforge.fml.common.IFMLSidedHandler#getSide()
      */
     @Override
-    public Side getSide()
-    {
+    public Side getSide() {
         return Side.SERVER;
     }
 
     @Override
-    public void showGuiScreen(Object clientGuiElement)
-    {
+    public void showGuiScreen(Object clientGuiElement) {
 
     }
 
     @Override
-    public void queryUser(StartupQuery query) throws InterruptedException
-    {
-        if (query.getResult() == null)
-        {
+    public void queryUser(StartupQuery query) throws InterruptedException {
+        if (query.getResult() == null) {
             FMLLog.log.warn(query.getText());
             query.finish();
-        }
-        else
-        {
+        } else {
             String text = query.getText() +
-                    "\n\nRun the command /fml confirm or or /fml cancel to proceed." +
-                    "\nAlternatively start the server with -Dfml.queryResult=confirm or -Dfml.queryResult=cancel to preselect the answer.";
+                    "\n\n" + Message.getString(Message.forge_FMLServerHandler_1) +
+                    "\n" + Message.getString(Message.forge_FMLServerHandler_2);
+
             FMLLog.log.warn(text);
 
             if (!query.isSynchronous()) return; // no-op until mc does commands in another thread (if ever)
 
             boolean done = false;
 
-            while (!done && server.isServerRunning())
-            {
+            while (!done && server.isServerRunning()) {
                 if (Thread.interrupted()) throw new InterruptedException();
 
                 DedicatedServer dedServer = (DedicatedServer) server;
 
                 // rudimentary command processing, check for fml confirm/cancel and stop commands
-                synchronized (dedServer.pendingCommandList)
-                {
-                    for (Iterator<PendingCommand> it = dedServer.pendingCommandList.iterator(); it.hasNext(); )
-                    {
+                synchronized (dedServer.pendingCommandList) {
+                    for (Iterator<PendingCommand> it = dedServer.pendingCommandList.iterator(); it.hasNext(); ) {
                         String cmd = it.next().command.trim().toLowerCase();
 
-                        if (cmd.equals("/fml confirm"))
-                        {
-                            FMLLog.log.info("confirmed");
+                        if (cmd.equals("/fml confirm")) {
+                            FMLLog.log.info(Message.getString(Message.forge_FMLServerHandler_3));
                             query.setResult(true);
                             done = true;
                             it.remove();
-                        }
-                        else if (cmd.equals("/fml cancel"))
-                        {
-                            FMLLog.log.info("cancelled");
+                        } else if (cmd.equals("/fml cancel")) {
+                            FMLLog.log.info(Message.getString(Message.forge_FMLServerHandler_4));
                             query.setResult(false);
                             done = true;
                             it.remove();
-                        }
-                        else if (cmd.equals("/stop"))
-                        {
+                        } else if (cmd.equals("/stop")) {
                             StartupQuery.abort();
                         }
                     }
@@ -222,37 +197,31 @@
     }
 
     @Override
-    public boolean isDisplayCloseRequested()
-    {
+    public boolean isDisplayCloseRequested() {
         return false;
     }
 
     @Override
-    public boolean shouldServerShouldBeKilledQuietly()
-    {
+    public boolean shouldServerShouldBeKilledQuietly() {
         return false;
     }
 
     @Override
-    public void addModAsResource(ModContainer container)
-    {
+    public void addModAsResource(ModContainer container) {
         String langFile = "assets/" + container.getModId().toLowerCase() + "/lang/en_us.lang";
         String langFile2 = "assets/" + container.getModId().toLowerCase() + "/lang/en_US.lang";
         File source = container.getSource();
         InputStream stream = null;
         ZipFile zip = null;
-        try
-        {
-            if (source.isDirectory() && FMLLaunchHandler.isDeobfuscatedEnvironment())
-            {
+        try {
+            if (source.isDirectory() && FMLLaunchHandler.isDeobfuscatedEnvironment()) {
                 File f = new File(source.toURI().resolve(langFile).getPath());
                 if (!f.exists())
                     f = new File(source.toURI().resolve(langFile2).getPath());
                 if (!f.exists())
                     throw new FileNotFoundException(source.toURI().resolve(langFile).getPath());
                 stream = new FileInputStream(f);
-            }
-            else if (source.exists()) //Fake sources.. Yay coremods -.-
+            } else if (source.exists()) //Fake sources.. Yay coremods -.-
             {
                 zip = new ZipFile(source);
                 ZipEntry entry = zip.getEntry(langFile);
@@ -262,57 +231,45 @@
             }
             if (stream != null)
                 LanguageMap.inject(stream);
-        }
-        catch (FileNotFoundException e)
-        {
+        } catch (FileNotFoundException e) {
             FMLLog.log.warn("Missing English translation for {}: {}", container.getModId(), e.getMessage());
-        }
-        catch (IOException e)
-        {
+        } catch (IOException e) {
             // hush
-        }
-        catch(Exception e)
-        {
+        } catch (Exception e) {
             FMLLog.log.error(e);
-        }
-        finally
-        {
+        } finally {
             IOUtils.closeQuietly(stream);
             IOUtils.closeQuietly(zip);
         }
     }
 
     @Override
-    public String getCurrentLanguage()
-    {
+    public String getCurrentLanguage() {
         return "en_US";
     }
 
     @Override
-    public void serverStopped()
-    {
+    public void serverStopped() {
         // NOOP
     }
+
     @Override
-    public NetworkManager getClientToServerNetworkManager()
-    {
+    public NetworkManager getClientToServerNetworkManager() {
         throw new RuntimeException("Missing");
     }
+
     @Override
-    public INetHandler getClientPlayHandler()
-    {
+    public INetHandler getClientPlayHandler() {
         return null;
     }
 
     @Override
-    public void fireNetRegistrationEvent(EventBus bus, NetworkManager manager, Set<String> channelSet, String channel, Side side)
-    {
+    public void fireNetRegistrationEvent(EventBus bus, NetworkManager manager, Set<String> channelSet, String channel, Side side) {
         bus.post(new FMLNetworkEvent.CustomPacketRegistrationEvent<NetHandlerPlayServer>(manager, channelSet, channel, side, NetHandlerPlayServer.class));
     }
 
     @Override
-    public boolean shouldAllowPlayerLogins()
-    {
+    public boolean shouldAllowPlayerLogins() {
         return DedicatedServer.allowPlayerLogins;
     }
 
@@ -322,21 +279,18 @@
     }
 
     @Override
-    public IThreadListener getWorldThread(INetHandler net)
-    {
+    public IThreadListener getWorldThread(INetHandler net) {
         // Always the server on the dedicated server, eventually add Per-World if Mojang adds world stuff.
         return getServer();
     }
 
     @Override
-    public void processWindowMessages()
-    {
+    public void processWindowMessages() {
         // NOOP
     }
 
     @Override
-    public String stripSpecialChars(String message)
-    {
+    public String stripSpecialChars(String message) {
         return message;
     }
 
@@ -346,19 +300,17 @@
     }
 
     @Override
-    public void fireSidedRegistryEvents()
-    {
+    public void fireSidedRegistryEvents() {
         // NOOP
     }
+
     @Override
-    public CompoundDataFixer getDataFixer()
-    {
-        return (CompoundDataFixer)this.server.getDataFixer();
+    public CompoundDataFixer getDataFixer() {
+        return (CompoundDataFixer) this.server.getDataFixer();
     }
 
     @Override
-    public boolean isDisplayVSyncForced()
-    {
+    public boolean isDisplayVSyncForced() {
         return false;
     }
 }
