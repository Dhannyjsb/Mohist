--- ../src-base/minecraft/net/minecraft/world/chunk/storage/RegionFileCache.java
+++ ../src-work/minecraft/net/minecraft/world/chunk/storage/RegionFileCache.java
@@ -1,15 +1,21 @@
 package net.minecraft.world.chunk.storage;
 
 import com.google.common.collect.Maps;
+import net.minecraft.nbt.CompressedStreamTools;
+import net.minecraft.nbt.NBTTagCompound;
+
+import javax.annotation.Nullable;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.File;
 import java.io.IOException;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public class RegionFileCache
 {
-    private static final Map<File, RegionFile> REGIONS_BY_FILE = Maps.<File, RegionFile>newHashMap();
+    public static final Map<File, RegionFile> REGIONS_BY_FILE = new LinkedHashMap(256, 0.75f, true); // Spigot - private -> public, Paper - HashMap -> LinkedHashMap
 
     public static synchronized RegionFile createOrLoadRegionFile(File worldDir, int chunkX, int chunkZ)
     {
@@ -29,8 +35,8 @@
             }
 
             if (REGIONS_BY_FILE.size() >= 256)
-            {
-                clearRegionFileReferences();
+			{
+			 	trimCache(); // Paper
             }
 
             RegionFile regionfile1 = new RegionFile(file2);
@@ -38,6 +44,20 @@
             return regionfile1;
         }
     }
+    // Paper Start
+    private static synchronized void trimCache() {
+        Iterator<Map.Entry<File, RegionFile>> itr = RegionFileCache.REGIONS_BY_FILE.entrySet().iterator();
+        int count = RegionFileCache.REGIONS_BY_FILE.size() - 256;
+        while (count-- >= 0 && itr.hasNext()) {
+            try {
+                itr.next().getValue().close();
+            } catch (IOException ioexception) {
+                ioexception.printStackTrace();
+            }
+            itr.remove();
+        }
+    }
+    // Paper End
 
     public static synchronized RegionFile getRegionFileIfExists(File worldDir, int chunkX, int chunkZ)
     {
@@ -92,14 +112,35 @@
         return regionfile.getChunkDataInputStream(chunkX & 31, chunkZ & 31);
     }
 
+    @Nullable
+    public static NBTTagCompound getChunkInputStreamCB(File worldDir, int chunkX, int chunkZ) throws IOException
+    {  // Paper - remove synchronization
+        RegionFile regionfile = createOrLoadRegionFile(worldDir, chunkX, chunkZ);
+        DataInputStream datainputstream = regionfile.getChunkDataInputStream(chunkX & 31, chunkZ & 31);
+
+        if (datainputstream == null) {
+            return null;
+        }
+
+        return CompressedStreamTools.read(datainputstream);
+    }
+
     public static DataOutputStream getChunkOutputStream(File worldDir, int chunkX, int chunkZ)
     {
         RegionFile regionfile = createOrLoadRegionFile(worldDir, chunkX, chunkZ);
         return regionfile.getChunkDataOutputStream(chunkX & 31, chunkZ & 31);
     }
 
+    public static void getChunkOutputStream(File worldDir, int chunkX, int chunkZ, NBTTagCompound nbttagcompound) throws IOException
+    {   // Paper - remove synchronization
+        RegionFile regionfile = createOrLoadRegionFile(worldDir, chunkX, chunkZ);
+        DataOutputStream dataoutputstream = regionfile.getChunkDataOutputStream(chunkX & 31, chunkZ & 31);
+        CompressedStreamTools.write(nbttagcompound, dataoutputstream);
+        dataoutputstream.close();
+    }
+
     public static boolean chunkExists(File worldDir, int chunkX, int chunkZ)
-    {
+    {   // Paper - remove synchronization
         RegionFile regionfile = getRegionFileIfExists(worldDir, chunkX, chunkZ);
         return regionfile != null ? regionfile.isChunkSaved(chunkX & 31, chunkZ & 31) : false;
     }
