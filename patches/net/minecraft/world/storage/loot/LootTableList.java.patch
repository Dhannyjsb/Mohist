--- ../src-base/minecraft/net/minecraft/world/storage/loot/LootTableList.java
+++ ../src-work/minecraft/net/minecraft/world/storage/loot/LootTableList.java
@@ -1,15 +1,14 @@
 package net.minecraft.world.storage.loot;
 
 import com.google.common.collect.Sets;
+import net.minecraft.util.ResourceLocation;
+
 import java.io.File;
 import java.util.Collections;
 import java.util.Set;
-import net.minecraft.util.ResourceLocation;
 
-public class LootTableList
-{
+public class LootTableList {
     private static final Set<ResourceLocation> LOOT_TABLES = Sets.<ResourceLocation>newHashSet();
-    private static final Set<ResourceLocation> READ_ONLY_LOOT_TABLES = Collections.<ResourceLocation>unmodifiableSet(LOOT_TABLES);
     public static final ResourceLocation EMPTY = register("empty");
     public static final ResourceLocation CHESTS_SPAWN_BONUS_CHEST = register("chests/spawn_bonus_chest");
     public static final ResourceLocation CHESTS_END_CITY_TREASURE = register("chests/end_city_treasure");
@@ -92,37 +91,29 @@
     public static final ResourceLocation GAMEPLAY_FISHING_JUNK = register("gameplay/fishing/junk");
     public static final ResourceLocation GAMEPLAY_FISHING_TREASURE = register("gameplay/fishing/treasure");
     public static final ResourceLocation GAMEPLAY_FISHING_FISH = register("gameplay/fishing/fish");
+    private static final Set<ResourceLocation> READ_ONLY_LOOT_TABLES = Collections.<ResourceLocation>unmodifiableSet(LOOT_TABLES);
 
-    private static ResourceLocation register(String id)
-    {
+    private static ResourceLocation register(String id) {
         return register(new ResourceLocation("minecraft", id));
     }
 
-    public static ResourceLocation register(ResourceLocation id)
-    {
-        if (LOOT_TABLES.add(id))
-        {
+    public static ResourceLocation register(ResourceLocation id) {
+        if (LOOT_TABLES.add(id)) {
             return id;
-        }
-        else
-        {
+        } else {
             throw new IllegalArgumentException(id + " is already a registered built-in loot table");
         }
     }
 
-    public static Set<ResourceLocation> getAll()
-    {
+    public static Set<ResourceLocation> getAll() {
         return READ_ONLY_LOOT_TABLES;
     }
 
-    public static boolean test()
-    {
-        LootTableManager loottablemanager = new LootTableManager((File)null);
+    public static boolean test() {
+        LootTableManager loottablemanager = new LootTableManager((File) null);
 
-        for (ResourceLocation resourcelocation : READ_ONLY_LOOT_TABLES)
-        {
-            if (loottablemanager.getLootTableFromLocation(resourcelocation) == LootTable.EMPTY_LOOT_TABLE)
-            {
+        for (ResourceLocation resourcelocation : READ_ONLY_LOOT_TABLES) {
+            if (loottablemanager.getLootTableFromLocation(resourcelocation) == LootTable.EMPTY_LOOT_TABLE) {
                 return false;
             }
         }
