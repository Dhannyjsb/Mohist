--- ../src-base/minecraft/net/minecraft/world/storage/SaveHandler.java
+++ ../src-work/minecraft/net/minecraft/world/storage/SaveHandler.java
@@ -1,38 +1,52 @@
 package net.minecraft.world.storage;
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import javax.annotation.Nullable;
+import net.minecraft.block.Block;
+import net.minecraft.enchantment.Enchantment;
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.entity.player.EntityPlayerMP;
+import net.minecraft.item.Item;
 import net.minecraft.nbt.CompressedStreamTools;
 import net.minecraft.nbt.NBTTagCompound;
+import net.minecraft.potion.Potion;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.datafix.DataFixer;
 import net.minecraft.util.datafix.FixTypes;
 import net.minecraft.world.MinecraftException;
 import net.minecraft.world.WorldProvider;
 import net.minecraft.world.chunk.storage.IChunkLoader;
 import net.minecraft.world.gen.structure.template.TemplateManager;
+import net.minecraftforge.common.util.EnumHelper;
+import net.minecraftforge.fml.common.FMLLog;
+import net.minecraftforge.fml.common.registry.ForgeRegistries;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.Material;
+import org.bukkit.block.Biome;
+import org.bukkit.craftbukkit.v1_12_R1.CraftServer;
+import org.bukkit.craftbukkit.v1_12_R1.entity.CraftPlayer;
+import org.bukkit.plugin.PluginLoadOrder;
+import org.bukkit.potion.PotionEffectType;
 
-public class SaveHandler implements ISaveHandler, IPlayerFileData
-{
+import javax.annotation.Nullable;
+import java.io.*;
+import java.util.Map;
+import java.util.UUID;
+
+public class SaveHandler implements ISaveHandler, IPlayerFileData {
     private static final Logger LOGGER = LogManager.getLogger();
+    private static boolean initializedBukkit = false; // Cauldron
+    protected final DataFixer dataFixer;
     private final File worldDirectory;
     private final File playersDirectory;
     private final File mapDataDir;
     private final long initializationTime = MinecraftServer.getCurrentTimeMillis();
     private final String saveDirectoryName;
     private final TemplateManager structureTemplateManager;
-    protected final DataFixer dataFixer;
+    private UUID uuid = null; // CraftBukkit
 
-    public SaveHandler(File p_i46648_1_, String saveDirectoryNameIn, boolean p_i46648_3_, DataFixer dataFixerIn)
-    {
+    public SaveHandler(File p_i46648_1_, String saveDirectoryNameIn, boolean p_i46648_3_, DataFixer dataFixerIn) {
         this.dataFixer = dataFixerIn;
         this.worldDirectory = new File(p_i46648_1_, saveDirectoryNameIn);
         this.worldDirectory.mkdirs();
@@ -41,186 +55,161 @@
         this.mapDataDir.mkdirs();
         this.saveDirectoryName = saveDirectoryNameIn;
 
-        if (p_i46648_3_)
-        {
+        if (p_i46648_3_) {
             this.playersDirectory.mkdirs();
             this.structureTemplateManager = new TemplateManager((new File(this.worldDirectory, "structures")).toString(), dataFixerIn);
-        }
-        else
-        {
+        } else {
             this.structureTemplateManager = null;
         }
 
         this.setSessionLock();
     }
 
-    private void setSessionLock()
-    {
-        try
-        {
+    private void setSessionLock() {
+        try {
             File file1 = new File(this.worldDirectory, "session.lock");
             DataOutputStream dataoutputstream = new DataOutputStream(new FileOutputStream(file1));
 
-            try
-            {
+            try {
                 dataoutputstream.writeLong(this.initializationTime);
-            }
-            finally
-            {
+            } finally {
                 dataoutputstream.close();
             }
-        }
-        catch (IOException ioexception)
-        {
+        } catch (IOException ioexception) {
             ioexception.printStackTrace();
             throw new RuntimeException("Failed to check session lock, aborting");
         }
     }
 
-    public File getWorldDirectory()
-    {
+    public File getWorldDirectory() {
         return this.worldDirectory;
     }
 
-    public void checkSessionLock() throws MinecraftException
-    {
-        try
-        {
+    public void checkSessionLock() throws MinecraftException {
+        try {
             File file1 = new File(this.worldDirectory, "session.lock");
             DataInputStream datainputstream = new DataInputStream(new FileInputStream(file1));
 
-            try
-            {
-                if (datainputstream.readLong() != this.initializationTime)
-                {
+            try {
+                if (datainputstream.readLong() != this.initializationTime) {
                     throw new MinecraftException("The save is being accessed from another location, aborting");
                 }
-            }
-            finally
-            {
+            } finally {
                 datainputstream.close();
             }
-        }
-        catch (IOException var7)
-        {
+        } catch (IOException var7) {
             throw new MinecraftException("Failed to check session lock, aborting");
         }
     }
 
-    public IChunkLoader getChunkLoader(WorldProvider provider)
-    {
+    public IChunkLoader getChunkLoader(WorldProvider provider) {
         throw new RuntimeException("Old Chunk Storage is no longer supported.");
     }
 
     @Nullable
-    public WorldInfo loadWorldInfo()
-    {
+    public WorldInfo loadWorldInfo() {
         File file1 = new File(this.worldDirectory, "level.dat");
+        WorldInfo worldInfo = null;
+        if (file1.exists()) {
+            worldInfo = SaveFormatOld.loadAndFix(file1, this.dataFixer, this);
 
-        if (file1.exists())
-        {
-            WorldInfo worldinfo = SaveFormatOld.loadAndFix(file1, this.dataFixer, this);
-
-            if (worldinfo != null)
-            {
-                return worldinfo;
+            if (worldInfo != null) {
+                return worldInfo;
             }
         }
 
         net.minecraftforge.fml.common.FMLCommonHandler.instance().confirmBackupLevelDatUse(this);
         file1 = new File(this.worldDirectory, "level.dat_old");
-        return file1.exists() ? SaveFormatOld.loadAndFix(file1, this.dataFixer, this) : null;
+        if (file1.exists()) {
+            worldInfo = SaveFormatOld.loadAndFix(file1, this.dataFixer, this);
+
+            if (worldInfo != null) {
+                return worldInfo;
+            }
+        }
+        this.initBukkitData(worldInfo); // Cauldron
+        return null;
     }
 
-    public void saveWorldInfoWithPlayer(WorldInfo worldInformation, @Nullable NBTTagCompound tagCompound)
-    {
+    public void saveWorldInfoWithPlayer(WorldInfo worldInformation, @Nullable NBTTagCompound tagCompound) {
         NBTTagCompound nbttagcompound = worldInformation.cloneNBTCompound(tagCompound);
         NBTTagCompound nbttagcompound1 = new NBTTagCompound();
         nbttagcompound1.setTag("Data", nbttagcompound);
 
         net.minecraftforge.fml.common.FMLCommonHandler.instance().handleWorldDataSave(this, worldInformation, nbttagcompound1);
 
-        try
-        {
+        try {
             File file1 = new File(this.worldDirectory, "level.dat_new");
             File file2 = new File(this.worldDirectory, "level.dat_old");
             File file3 = new File(this.worldDirectory, "level.dat");
             CompressedStreamTools.writeCompressed(nbttagcompound1, new FileOutputStream(file1));
 
-            if (file2.exists())
-            {
+            if (file2.exists()) {
                 file2.delete();
             }
 
             file3.renameTo(file2);
 
-            if (file3.exists())
-            {
+            if (file3.exists()) {
                 file3.delete();
             }
 
             file1.renameTo(file3);
 
-            if (file1.exists())
-            {
+            if (file1.exists()) {
                 file1.delete();
             }
-        }
-        catch (Exception exception)
-        {
+        } catch (Exception exception) {
             exception.printStackTrace();
         }
     }
 
-    public void saveWorldInfo(WorldInfo worldInformation)
-    {
-        this.saveWorldInfoWithPlayer(worldInformation, (NBTTagCompound)null);
+    public void saveWorldInfo(WorldInfo worldInformation) {
+        this.saveWorldInfoWithPlayer(worldInformation, (NBTTagCompound) null);
     }
 
-    public void writePlayerData(EntityPlayer player)
-    {
-        try
-        {
+    public void writePlayerData(EntityPlayer player) {
+        try {
             NBTTagCompound nbttagcompound = player.writeToNBT(new NBTTagCompound());
             File file1 = new File(this.playersDirectory, player.getCachedUniqueIdString() + ".dat.tmp");
             File file2 = new File(this.playersDirectory, player.getCachedUniqueIdString() + ".dat");
             CompressedStreamTools.writeCompressed(nbttagcompound, new FileOutputStream(file1));
 
-            if (file2.exists())
-            {
+            if (file2.exists()) {
                 file2.delete();
             }
 
             file1.renameTo(file2);
             net.minecraftforge.event.ForgeEventFactory.firePlayerSavingEvent(player, this.playersDirectory, player.getUniqueID().toString());
+        } catch (Exception var5) {
+            LOGGER.warn("Failed to save player data for {}", (Object) player.getName());
         }
-        catch (Exception var5)
-        {
-            LOGGER.warn("Failed to save player data for {}", (Object)player.getName());
-        }
     }
 
     @Nullable
-    public NBTTagCompound readPlayerData(EntityPlayer player)
-    {
+    public NBTTagCompound readPlayerData(EntityPlayer player) {
         NBTTagCompound nbttagcompound = null;
 
-        try
-        {
+        try {
             File file1 = new File(this.playersDirectory, player.getCachedUniqueIdString() + ".dat");
-
-            if (file1.exists() && file1.isFile())
-            {
+            if (file1.exists() && file1.isFile()) {
                 nbttagcompound = CompressedStreamTools.readCompressed(new FileInputStream(file1));
             }
+        } catch (Exception var4) {
+            LOGGER.warn("Failed to load player data for {}", (Object) player.getName());
         }
-        catch (Exception var4)
-        {
-            LOGGER.warn("Failed to load player data for {}", (Object)player.getName());
-        }
 
-        if (nbttagcompound != null)
-        {
+        if (nbttagcompound != null) {
+            // CraftBukkit start
+            if (player instanceof EntityPlayerMP) {
+                CraftPlayer playerCB = (CraftPlayer) player.getBukkitEntity();
+                // Only update first played if it is older than the one we have
+                long modified = new File(this.playersDirectory, player.getUniqueID().toString() + ".dat").lastModified();
+                if (modified < playerCB.getFirstPlayed()) {
+                    playerCB.setFirstPlayed(modified);
+                }
+            }
+            // CraftBukkit end
             player.readFromNBT(this.dataFixer.process(FixTypes.PLAYER, nbttagcompound));
         }
 
@@ -228,24 +217,35 @@
         return nbttagcompound;
     }
 
-    public IPlayerFileData getPlayerNBTManager()
-    {
+    // CraftBukkit start
+    public NBTTagCompound getPlayerData(String s) {
+        try {
+            File file1 = new File(this.playersDirectory, s + ".dat");
+
+            if (file1.exists()) {
+                return CompressedStreamTools.readCompressed((InputStream) (new FileInputStream(file1)));
+            }
+        } catch (Exception exception) {
+            LOGGER.warn("Failed to load player data for " + s);
+        }
+
+        return null;
+    }
+    // CraftBukkit end
+
+    public IPlayerFileData getPlayerNBTManager() {
         return this;
     }
 
-    public String[] getAvailablePlayerDat()
-    {
+    public String[] getAvailablePlayerDat() {
         String[] astring = this.playersDirectory.list();
 
-        if (astring == null)
-        {
+        if (astring == null) {
             astring = new String[0];
         }
 
-        for (int i = 0; i < astring.length; ++i)
-        {
-            if (astring[i].endsWith(".dat"))
-            {
+        for (int i = 0; i < astring.length; ++i) {
+            if (astring[i].endsWith(".dat")) {
                 astring[i] = astring[i].substring(0, astring[i].length() - 4);
             }
         }
@@ -253,35 +253,127 @@
         return astring;
     }
 
-    public void flush()
-    {
+    public void flush() {
     }
 
-    public File getMapFileFromName(String mapName)
-    {
+    public File getMapFileFromName(String mapName) {
         return new File(this.mapDataDir, mapName + ".dat");
     }
 
-    public TemplateManager getStructureTemplateManager()
-    {
+    public TemplateManager getStructureTemplateManager() {
         return this.structureTemplateManager;
     }
 
-    public NBTTagCompound getPlayerNBT(net.minecraft.entity.player.EntityPlayerMP player)
-    {
-        try
-        {
+    public NBTTagCompound getPlayerNBT(EntityPlayerMP player) {
+        try {
             File file1 = new File(this.playersDirectory, player.getUniqueID().toString() + ".dat");
 
-            if (file1.exists() && file1.isFile())
-            {
+            if (file1.exists() && file1.isFile()) {
                 return CompressedStreamTools.readCompressed(new FileInputStream(file1));
             }
-        }
-        catch (Exception exception)
-        {
+        } catch (Exception exception) {
             LOGGER.warn("Failed to load player data for " + player.getName());
         }
         return null;
     }
+
+    // CraftBukkit start
+    public UUID getUUID() {
+        if (uuid != null) return uuid;
+        File file1 = new File(this.worldDirectory, "uid.dat");
+        if (file1.exists()) {
+            DataInputStream dis = null;
+            try {
+                dis = new DataInputStream(new FileInputStream(file1));
+                return uuid = new UUID(dis.readLong(), dis.readLong());
+            } catch (IOException ex) {
+                LOGGER.warn("Failed to read " + file1 + ", generating new random UUID", ex);
+            } finally {
+                if (dis != null) {
+                    try {
+                        dis.close();
+                    } catch (IOException ex) {
+                        // NOOP
+                    }
+                }
+            }
+        }
+        uuid = UUID.randomUUID();
+        DataOutputStream dos = null;
+        try {
+            dos = new DataOutputStream(new FileOutputStream(file1));
+            dos.writeLong(uuid.getMostSignificantBits());
+            dos.writeLong(uuid.getLeastSignificantBits());
+        } catch (IOException ex) {
+            LOGGER.warn("Failed to write " + file1, ex);
+        } finally {
+            if (dos != null) {
+                try {
+                    dos.close();
+                } catch (IOException ex) {
+                    // NOOP
+                }
+            }
+        }
+        return uuid;
+    }
+
+    public File getPlayerDir() {
+        return playersDirectory;
+    }
+    // CraftBukkit end
+
+    // Mohist start
+    public void initBukkitData(WorldInfo worldInfo) {
+        // inject bukkit materials before plugins load
+        if (!this.initializedBukkit && (worldInfo == null || worldInfo.getDimension() == 0)) {
+            for (Map.Entry<ResourceLocation, Item> entry : ForgeRegistries.ITEMS.getEntries()) {
+                ResourceLocation key = entry.getKey();
+                if (!key.getResourceDomain().equals("minecraft")) {
+                    String materialName = Material.normalizeName(key.toString());
+                    Item item = entry.getValue();
+                    // inject item materials into Bukkit for FML
+                    Material material = Material.addMaterial(Item.getIdFromItem(item), materialName, false);
+                    if (material != null) {
+                        FMLLog.info("Injected new Forge item material %s with ID %d.", material.name(), material.getId());
+                    }
+                }
+            }
+            for (Map.Entry<ResourceLocation, Block> entry : ForgeRegistries.BLOCKS.getEntries()) {
+                ResourceLocation key = entry.getKey();
+                if (!key.getResourceDomain().equals("minecraft")) {
+                    String materialName = Material.normalizeName(key.toString());
+                    Block block = entry.getValue();
+                    // inject block materials into Bukkit for FML
+                    Material material = Material.addMaterial(Block.getIdFromBlock(block), materialName, true);
+                    if (material != null) {
+                        FMLLog.info("Injected new Forge block material %s with ID %d.", material.name(), material.getId());
+                    }
+                }
+            }
+
+            for (Object enchantment : Enchantment.REGISTRY) {
+                org.bukkit.enchantments.Enchantment.registerEnchantment(new org.bukkit.craftbukkit.v1_12_R1.enchantments.CraftEnchantment((Enchantment) enchantment));
+            }
+            org.bukkit.enchantments.Enchantment.stopAcceptingRegistrations();
+            for (Object effect : Potion.REGISTRY) {
+                PotionEffectType.registerPotionEffectType(new org.bukkit.craftbukkit.v1_12_R1.potion.CraftPotionEffectType((Potion) effect));
+            }
+            PotionEffectType.stopAcceptingRegistrations();
+            b:
+            for (Map.Entry<ResourceLocation, net.minecraft.world.biome.Biome> entry : ForgeRegistries.BIOMES.getEntries()) {
+                String biomeName = entry.getKey().getResourcePath().toUpperCase(java.util.Locale.ENGLISH);
+                for (Biome biome : Biome.values()) {
+                    if (biome.toString().equals(biomeName)) continue b;
+                }
+                EnumHelper.addBukkitBiome(biomeName);
+            }
+            // since we modify bukkit enums, we need to guarantee that plugins are
+            // loaded after all mods have been loaded by FML to avoid race conditions.
+            ((CraftServer) Bukkit.getServer()).loadPlugins();
+            ((CraftServer) Bukkit.getServer()).enablePlugins(PluginLoadOrder.STARTUP);
+            initializedBukkit = true;
+        }
+    }
+    // Mohist end
 }
