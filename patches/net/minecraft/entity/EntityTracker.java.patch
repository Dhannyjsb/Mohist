--- ../src-base/minecraft/net/minecraft/entity/EntityTracker.java
+++ ../src-work/minecraft/net/minecraft/entity/EntityTracker.java
@@ -1,9 +1,15 @@
 package net.minecraft.entity;
 
 import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Queues;
 import com.google.common.collect.Sets;
 import java.util.List;
+import java.util.Map;
+import java.util.Queue;
 import java.util.Set;
+
+import io.netty.util.internal.ConcurrentSet;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ICrashReportDetail;
@@ -52,14 +58,14 @@
 {
     private static final Logger LOGGER = LogManager.getLogger();
     private final WorldServer world;
-    private final Set<EntityTrackerEntry> entries = Sets.<EntityTrackerEntry>newHashSet();
-    private final IntHashMap<EntityTrackerEntry> trackedEntityHashTable = new IntHashMap<EntityTrackerEntry>();
+    private final Set<EntityTrackerEntry> entries = Sets.newConcurrentHashSet();//hose
+    public final Map<Integer, EntityTrackerEntry> trackedEntityHashTable = Maps.newConcurrentMap();//hose
     private int maxTrackingDistanceThreshold;
 
     public EntityTracker(WorldServer theWorldIn)
     {
         this.world = theWorldIn;
-        this.maxTrackingDistanceThreshold = theWorldIn.getMinecraftServer().getPlayerList().getEntityViewDistance();
+        this.maxTrackingDistanceThreshold = net.minecraft.server.management.PlayerChunkMap.getFurthestViewableBlock(theWorldIn.spigotConfig.viewDistance); // Spigot
     }
 
     public static long getPositionLong(double value)
@@ -77,6 +83,9 @@
 
     public void track(Entity entityIn)
     {
+        if (this.trackedEntityHashTable.containsKey(entityIn.getEntityId())){
+            return;
+        }
         if (net.minecraftforge.fml.common.registry.EntityRegistry.instance().tryTrackingEntity(this, entityIn)) return;
 
         if (entityIn instanceof EntityPlayerMP)
@@ -198,7 +207,7 @@
         }
         else if (entityIn instanceof EntityAreaEffectCloud)
         {
-            this.track(entityIn, 160, Integer.MAX_VALUE, true);
+            this.track(entityIn, 160, 10 /*Integer.MAX_VALUE*/, true); // CraftBukkit
         }
         else if (entityIn instanceof EntityEnderCrystal)
         {
@@ -217,16 +226,17 @@
 
     public void track(Entity entityIn, int trackingRange, final int updateFrequency, boolean sendVelocityUpdates)
     {
+        trackingRange = org.spigotmc.TrackingRange.getEntityTrackingRange(entityIn, trackingRange); // Spigot
         try
         {
-            if (this.trackedEntityHashTable.containsItem(entityIn.getEntityId()))
+            if (this.trackedEntityHashTable.containsKey(entityIn.getEntityId()))
             {
-                throw new IllegalStateException("Entity is already tracked!");
+                return;
             }
 
             EntityTrackerEntry entitytrackerentry = new EntityTrackerEntry(entityIn, trackingRange, this.maxTrackingDistanceThreshold, updateFrequency, sendVelocityUpdates);
             this.entries.add(entitytrackerentry);
-            this.trackedEntityHashTable.addKey(entityIn.getEntityId(), entitytrackerentry);
+            this.trackedEntityHashTable.put(entityIn.getEntityId(), entitytrackerentry);
             entitytrackerentry.updatePlayerEntities(this.world.playerEntities);
         }
         catch (Throwable throwable)
@@ -249,8 +259,11 @@
                 }
             });
             entityIn.addEntityCrashInfo(crashreportcategory);
-            ((EntityTrackerEntry)this.trackedEntityHashTable.lookup(entityIn.getEntityId())).getTrackedEntity().addEntityCrashInfo(crashreport.makeCategory("Entity That Is Already Tracked"));
-
+            try {
+                ((EntityTrackerEntry)this.trackedEntityHashTable.get(entityIn.getEntityId())).getTrackedEntity().addEntityCrashInfo(crashreport.makeCategory("Entity That Is Already Tracked"));
+            } catch (Exception ex) {
+                this.trackedEntityHashTable.remove(entityIn.getEntityId());
+            }
             try
             {
                 throw new ReportedException(crashreport);
@@ -274,7 +287,7 @@
             }
         }
 
-        EntityTrackerEntry entitytrackerentry1 = this.trackedEntityHashTable.removeObject(entityIn.getEntityId());
+        EntityTrackerEntry entitytrackerentry1 = this.trackedEntityHashTable.remove(entityIn.getEntityId()); //hose
 
         if (entitytrackerentry1 != null)
         {
@@ -285,35 +298,19 @@
 
     public void tick()
     {
-        List<EntityPlayerMP> list = Lists.<EntityPlayerMP>newArrayList();
-
-        for (EntityTrackerEntry entitytrackerentry : this.entries)
-        {
+        Queue arraylist = Queues.newConcurrentLinkedQueue();
+        this.entries.parallelStream().forEach(entitytrackerentry -> {
             entitytrackerentry.updatePlayerList(this.world.playerEntities);
-
-            if (entitytrackerentry.playerEntitiesUpdated)
-            {
+            if (entitytrackerentry.playerEntitiesUpdated) {
                 Entity entity = entitytrackerentry.getTrackedEntity();
-
-                if (entity instanceof EntityPlayerMP)
-                {
-                    list.add((EntityPlayerMP)entity);
+                if (entity instanceof EntityPlayerMP) {
+                    arraylist.add((EntityPlayerMP) entity);
                 }
             }
-        }
-
-        for (int i = 0; i < list.size(); ++i)
-        {
-            EntityPlayerMP entityplayermp = list.get(i);
-
-            for (EntityTrackerEntry entitytrackerentry1 : this.entries)
-            {
-                if (entitytrackerentry1.getTrackedEntity() != entityplayermp)
-                {
-                    entitytrackerentry1.updatePlayerEntity(entityplayermp);
-                }
-            }
-        }
+        });
+        arraylist.parallelStream().forEach(entityplayermp -> {
+            this.entries.parallelStream().filter(entitytrackerentry1 -> entitytrackerentry1.getTrackedEntity() != entityplayermp).forEach(entitytrackerentry1 -> entitytrackerentry1.updatePlayerEntity((EntityPlayerMP) entityplayermp));
+        });
     }
 
     public void updateVisibility(EntityPlayerMP player)
@@ -333,7 +330,7 @@
 
     public void sendToTracking(Entity entityIn, Packet<?> packetIn)
     {
-        EntityTrackerEntry entitytrackerentry = this.trackedEntityHashTable.lookup(entityIn.getEntityId());
+        EntityTrackerEntry entitytrackerentry = this.trackedEntityHashTable.get(entityIn.getEntityId());
 
         if (entitytrackerentry != null)
         {
@@ -351,7 +348,7 @@
      */
     public Set<? extends net.minecraft.entity.player.EntityPlayer> getTrackingPlayers(Entity entity)
     {
-        EntityTrackerEntry entry = (EntityTrackerEntry) trackedEntityHashTable.lookup(entity.getEntityId());
+        EntityTrackerEntry entry = (EntityTrackerEntry) trackedEntityHashTable.get(entity.getEntityId());
         if (entry == null)
             return java.util.Collections.emptySet();
         else
@@ -362,7 +359,7 @@
 
     public void sendToTrackingAndSelf(Entity entityIn, Packet<?> packetIn)
     {
-        EntityTrackerEntry entitytrackerentry = this.trackedEntityHashTable.lookup(entityIn.getEntityId());
+        EntityTrackerEntry entitytrackerentry = this.trackedEntityHashTable.get(entityIn.getEntityId());
 
         if (entitytrackerentry != null)
         {
@@ -370,12 +367,32 @@
         }
     }
 
+    Set<EntityTrackerEntry> remove_untrack = Sets.newConcurrentHashSet();//hose
     public void removePlayerFromTrackers(EntityPlayerMP player)
     {
         for (EntityTrackerEntry entitytrackerentry : this.entries)
         {
             entitytrackerentry.removeTrackedPlayerSymmetric(player);
         }
+        //remove all untrack here
+
+        for (EntityTrackerEntry ete: this.entries) {
+            int exist_count = 0;
+            try {
+                for (Entity ent : this.world.loadedEntityList) {
+                    if (ent.getEntityId() == ete.hashCode()) {
+                        exist_count++;
+                    }
+                }
+                if (exist_count == 0) {
+                    remove_untrack.add(ete);
+                }
+            } catch (Exception ex) {
+                //
+            }
+        }
+        this.entries.removeAll(remove_untrack);
+        remove_untrack.clear();
     }
 
     public void sendLeashedEntitiesInChunk(EntityPlayerMP player, Chunk chunkIn)
