--- ../src-base/minecraft/net/minecraft/entity/EntityTracker.java
+++ ../src-work/minecraft/net/minecraft/entity/EntityTracker.java
@@ -2,6 +2,8 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
+
+import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 import net.minecraft.crash.CrashReport;
@@ -53,13 +55,13 @@
     private static final Logger LOGGER = LogManager.getLogger();
     private final WorldServer world;
     private final Set<EntityTrackerEntry> entries = Sets.<EntityTrackerEntry>newHashSet();
-    private final IntHashMap<EntityTrackerEntry> trackedEntityHashTable = new IntHashMap<EntityTrackerEntry>();
+    public final IntHashMap<EntityTrackerEntry> trackedEntityHashTable = new IntHashMap<EntityTrackerEntry>();
     private int maxTrackingDistanceThreshold;
 
     public EntityTracker(WorldServer theWorldIn)
     {
         this.world = theWorldIn;
-        this.maxTrackingDistanceThreshold = theWorldIn.getMinecraftServer().getPlayerList().getEntityViewDistance();
+        this.maxTrackingDistanceThreshold = net.minecraft.server.management.PlayerChunkMap.getFurthestViewableBlock(theWorldIn.spigotConfig.viewDistance); // Spigot
     }
 
     public static long getPositionLong(double value)
@@ -84,8 +86,9 @@
             this.track(entityIn, 512, 2);
             EntityPlayerMP entityplayermp = (EntityPlayerMP)entityIn;
 
-            for (EntityTrackerEntry entitytrackerentry : this.entries)
-            {
+            Iterator<EntityTrackerEntry> it = this.entries.iterator();
+            while (it.hasNext()) {
+                EntityTrackerEntry entitytrackerentry = it.next();
                 if (entitytrackerentry.getTrackedEntity() != entityplayermp)
                 {
                     entitytrackerentry.updatePlayerEntity(entityplayermp);
@@ -198,7 +201,7 @@
         }
         else if (entityIn instanceof EntityAreaEffectCloud)
         {
-            this.track(entityIn, 160, Integer.MAX_VALUE, true);
+            this.track(entityIn, 160, 10 /*Integer.MAX_VALUE*/, true); // CraftBukkit
         }
         else if (entityIn instanceof EntityEnderCrystal)
         {
@@ -217,11 +220,12 @@
 
     public void track(Entity entityIn, int trackingRange, final int updateFrequency, boolean sendVelocityUpdates)
     {
+        trackingRange = org.spigotmc.TrackingRange.getEntityTrackingRange(entityIn, trackingRange); // Spigot
         try
         {
             if (this.trackedEntityHashTable.containsItem(entityIn.getEntityId()))
             {
-                throw new IllegalStateException("Entity is already tracked!");
+                return;
             }
 
             EntityTrackerEntry entitytrackerentry = new EntityTrackerEntry(entityIn, trackingRange, this.maxTrackingDistanceThreshold, updateFrequency, sendVelocityUpdates);
@@ -268,8 +272,9 @@
         {
             EntityPlayerMP entityplayermp = (EntityPlayerMP)entityIn;
 
-            for (EntityTrackerEntry entitytrackerentry : this.entries)
-            {
+            Iterator<EntityTrackerEntry> it = this.entries.iterator();
+            while (it.hasNext()) {
+                EntityTrackerEntry entitytrackerentry = it.next();
                 entitytrackerentry.removeFromTrackedPlayers(entityplayermp);
             }
         }
@@ -287,10 +292,11 @@
     {
         List<EntityPlayerMP> list = Lists.<EntityPlayerMP>newArrayList();
 
-        for (EntityTrackerEntry entitytrackerentry : this.entries)
-        {
-            entitytrackerentry.updatePlayerList(this.world.playerEntities);
+        Iterator<EntityTrackerEntry> it = this.entries.iterator();
+        while (it.hasNext()) {
+            EntityTrackerEntry entitytrackerentry = it.next();
 
+            entitytrackerentry.updatePlayerList(this.world.playerEntities);
             if (entitytrackerentry.playerEntitiesUpdated)
             {
                 Entity entity = entitytrackerentry.getTrackedEntity();
@@ -306,8 +312,9 @@
         {
             EntityPlayerMP entityplayermp = list.get(i);
 
-            for (EntityTrackerEntry entitytrackerentry1 : this.entries)
-            {
+            Iterator<EntityTrackerEntry> it1 = this.entries.iterator();
+            while (it.hasNext()) {
+                EntityTrackerEntry entitytrackerentry1 = it1.next();
                 if (entitytrackerentry1.getTrackedEntity() != entityplayermp)
                 {
                     entitytrackerentry1.updatePlayerEntity(entityplayermp);
@@ -318,8 +325,9 @@
 
     public void updateVisibility(EntityPlayerMP player)
     {
-        for (EntityTrackerEntry entitytrackerentry : this.entries)
-        {
+        Iterator<EntityTrackerEntry> it = this.entries.iterator();
+        while (it.hasNext()) {
+            EntityTrackerEntry entitytrackerentry = it.next();
             if (entitytrackerentry.getTrackedEntity() == player)
             {
                 entitytrackerentry.updatePlayerEntities(this.world.playerEntities);
@@ -372,8 +380,9 @@
 
     public void removePlayerFromTrackers(EntityPlayerMP player)
     {
-        for (EntityTrackerEntry entitytrackerentry : this.entries)
-        {
+        Iterator<EntityTrackerEntry> it = this.entries.iterator();
+        while (it.hasNext()) {
+            EntityTrackerEntry entitytrackerentry = it.next();
             entitytrackerentry.removeTrackedPlayerSymmetric(player);
         }
     }
@@ -383,8 +392,9 @@
         List<Entity> list = Lists.<Entity>newArrayList();
         List<Entity> list1 = Lists.<Entity>newArrayList();
 
-        for (EntityTrackerEntry entitytrackerentry : this.entries)
-        {
+        Iterator<EntityTrackerEntry> it = this.entries.iterator();
+        while (it.hasNext()) {
+            EntityTrackerEntry entitytrackerentry = it.next();
             Entity entity = entitytrackerentry.getTrackedEntity();
 
             if (entity != player && entity.chunkCoordX == chunkIn.x && entity.chunkCoordZ == chunkIn.z)
@@ -424,8 +434,9 @@
     {
         this.maxTrackingDistanceThreshold = (p_187252_1_ - 1) * 16;
 
-        for (EntityTrackerEntry entitytrackerentry : this.entries)
-        {
+        Iterator<EntityTrackerEntry> it = this.entries.iterator();
+        while (it.hasNext()) {
+            EntityTrackerEntry entitytrackerentry = it.next();
             entitytrackerentry.setMaxRange(this.maxTrackingDistanceThreshold);
         }
     }
