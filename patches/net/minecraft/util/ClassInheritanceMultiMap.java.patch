--- ../src-base/minecraft/net/minecraft/util/ClassInheritanceMultiMap.java
+++ ../src-work/minecraft/net/minecraft/util/ClassInheritanceMultiMap.java
@@ -4,21 +4,25 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+import io.netty.util.internal.ConcurrentSet;
+
 import java.util.AbstractSet;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.CopyOnWriteArrayList;
 
 public class ClassInheritanceMultiMap<T> extends AbstractSet<T>
 {
     // Forge: Use concurrent collection to allow creating chunks from multiple threads safely
     private static final Set < Class<? >> ALL_KNOWN = java.util.Collections.newSetFromMap(new java.util.concurrent.ConcurrentHashMap<Class<?>, Boolean>());
-    private final Map < Class<?>, List<T >> map = Maps. < Class<?>, List<T >> newHashMap();
-    private final Set < Class<? >> knownKeys = Sets. < Class<? >> newIdentityHashSet();
+    private final Map < Class<?>, List<T >> map = new ConcurrentHashMap<Class<?>, List<T>>();
+    private final Set < Class<? >> knownKeys = new ConcurrentSet();
     private final Class<T> baseClass;
-    private final List<T> values = Lists.<T>newArrayList();
+    private final List<T> values = new CopyOnWriteArrayList<T>();
 
     public ClassInheritanceMultiMap(Class<T> baseClassIn)
     {
@@ -83,7 +87,9 @@
 
         if (list == null)
         {
-            this.map.put(parentClass, Lists.newArrayList(value));
+            List<T> list1 = new CopyOnWriteArrayList<T>();
+            list1.add(value);
+            this.map.put(parentClass, list1);
         }
         else
         {
@@ -93,16 +99,15 @@
 
     public boolean remove(Object p_remove_1_)
     {
-        T t = (T)p_remove_1_;
         boolean flag = false;
 
         for (Class<?> oclass : this.knownKeys)
         {
-            if (oclass.isAssignableFrom(t.getClass()))
+            if (oclass.isAssignableFrom(p_remove_1_.getClass()))
             {
                 List<T> list = (List)this.map.get(oclass);
 
-                if (list != null && list.remove(t))
+                if (list != null && list.remove(p_remove_1_))
                 {
                     flag = true;
                 }
@@ -119,26 +124,22 @@
 
     public <S> Iterable<S> getByClass(final Class<S> clazz)
     {
-        return new Iterable<S>()
-        {
-            public Iterator<S> iterator()
-            {
-                List<T> list = (List)ClassInheritanceMultiMap.this.map.get(ClassInheritanceMultiMap.this.initializeClassLookup(clazz));
+        return (Iterable<S>) () -> {
+            List<T> list = (List)ClassInheritanceMultiMap.this.map.get(ClassInheritanceMultiMap.this.initializeClassLookup(clazz));
 
-                if (list == null)
-                {
-                    return Collections.<S>emptyIterator();
-                }
-                else
-                {
-                    Iterator<T> iterator = list.iterator();
-                    return Iterators.filter(iterator, clazz);
-                }
+            if (list == null)
+            {
+                return Collections.<S>emptyIterator();
             }
+            else
+            {
+                Iterator<T> iterator = list.iterator();
+                return Iterators.filter(iterator, clazz);
+            }
         };
     }
 
-    public Iterator<T> iterator()
+    public synchronized Iterator<T> iterator()
     {
         return (Iterator<T>)(this.values.isEmpty() ? Collections.emptyIterator() : Iterators.unmodifiableIterator(this.values.iterator()));
     }
