--- ../src-base/minecraft/net/minecraft/util/registry/RegistryNamespaced.java
+++ ../src-work/minecraft/net/minecraft/util/registry/RegistryNamespaced.java
@@ -2,63 +2,69 @@
 
 import com.google.common.collect.BiMap;
 import com.google.common.collect.HashBiMap;
-import java.util.Iterator;
-import java.util.Map;
-import javax.annotation.Nullable;
+import net.minecraft.block.Block;
 import net.minecraft.util.IObjectIntIterable;
 import net.minecraft.util.IntIdentityHashBiMap;
+import net.minecraftforge.fml.common.FMLLog;
+import org.bukkit.Material;
 
-public class RegistryNamespaced<K, V> extends RegistrySimple<K, V> implements IObjectIntIterable<V>
-{
+import javax.annotation.Nullable;
+import java.util.Iterator;
+import java.util.Map;
+
+public class RegistryNamespaced<K, V> extends RegistrySimple<K, V> implements IObjectIntIterable<V> {
     protected final IntIdentityHashBiMap<V> underlyingIntegerMap = new IntIdentityHashBiMap<V>(256);
     protected final Map<V, K> inverseObjectRegistry;
 
-    public RegistryNamespaced()
-    {
-        this.inverseObjectRegistry = ((BiMap)this.registryObjects).inverse();
+    public RegistryNamespaced() {
+        this.inverseObjectRegistry = ((BiMap) this.registryObjects).inverse();
     }
 
-    public void register(int id, K key, V value)
-    {
+    public void register(int id, K key, V value) {
+        // Cauldron start - register item/block materials for Bukkit
+        boolean isForgeBlock = value instanceof Block && (value.getClass().getName().length() > 3 && !value.getClass().getName().startsWith("net.minecraft.block")) ? true : false;
+        String materialName = Material.normalizeName(key.toString());
+        org.bukkit.Material material = org.bukkit.Material.addMaterial(id, materialName, isForgeBlock);
+        if (material != null) {
+            if (isForgeBlock) {
+                FMLLog.info("Injected new Forge block material %s with ID %d.", material.name(), material.getId());
+            } else {
+                FMLLog.info("Injected new Forge item material %s with ID %d.", material.name(), material.getId());
+            }
+        }
+        // Cauldron end
         this.underlyingIntegerMap.put(value, id);
         this.putObject(key, value);
     }
 
-    protected Map<K, V> createUnderlyingMap()
-    {
+    protected Map<K, V> createUnderlyingMap() {
         return HashBiMap.<K, V>create();
     }
 
     @Nullable
-    public V getObject(@Nullable K name)
-    {
-        return (V)super.getObject(name);
+    public V getObject(@Nullable K name) {
+        return (V) super.getObject(name);
     }
 
     @Nullable
-    public K getNameForObject(V value)
-    {
+    public K getNameForObject(V value) {
         return this.inverseObjectRegistry.get(value);
     }
 
-    public boolean containsKey(K key)
-    {
+    public boolean containsKey(K key) {
         return super.containsKey(key);
     }
 
-    public int getIDForObject(@Nullable V value)
-    {
+    public int getIDForObject(@Nullable V value) {
         return this.underlyingIntegerMap.getId(value);
     }
 
     @Nullable
-    public V getObjectById(int id)
-    {
+    public V getObjectById(int id) {
         return this.underlyingIntegerMap.get(id);
     }
 
-    public Iterator<V> iterator()
-    {
+    public Iterator<V> iterator() {
         return this.underlyingIntegerMap.iterator();
     }
 }
