--- ../src-base/minecraft/net/minecraft/nbt/NBTUtil.java
+++ ../src-work/minecraft/net/minecraft/nbt/NBTUtil.java
@@ -5,9 +5,6 @@
 import com.google.common.collect.UnmodifiableIterator;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.properties.Property;
-import java.util.UUID;
-import java.util.Map.Entry;
-import javax.annotation.Nullable;
 import net.minecraft.block.Block;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.state.BlockStateContainer;
@@ -19,101 +16,88 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public final class NBTUtil
-{
+import javax.annotation.Nullable;
+import java.util.Map.Entry;
+import java.util.UUID;
+
+public final class NBTUtil {
     private static final Logger LOGGER = LogManager.getLogger();
 
     @Nullable
-    public static GameProfile readGameProfileFromNBT(NBTTagCompound compound)
-    {
+    public static GameProfile readGameProfileFromNBT(NBTTagCompound compound) {
         String s = null;
         String s1 = null;
-
-        if (compound.hasKey("Name", 8))
         {
-            s = compound.getString("Name");
+            NBTBase Name = compound.getTag("Name");
+            if (Name != null && Name.isString()) {
+                s = Name.getString();
+            }
         }
 
-        if (compound.hasKey("Id", 8))
         {
-            s1 = compound.getString("Id");
+            NBTBase Id = compound.getTag("Id");
+            if (Id != null && Id.isString()) {
+                s1 = Id.getString();
+            }
         }
 
-        try
-        {
-            UUID uuid;
-
-            try
-            {
-                uuid = UUID.fromString(s1);
+        try {
+            if (s1 == null) {
+                return null;
             }
-            catch (Throwable var12)
-            {
-                uuid = null;
-            }
-
+            UUID uuid = UUID.fromString(s1);
             GameProfile gameprofile = new GameProfile(uuid, s);
 
-            if (compound.hasKey("Properties", 10))
-            {
-                NBTTagCompound nbttagcompound = compound.getCompoundTag("Properties");
+            NBTBase tag = compound.getTag("Properties");
+            if (tag == null || !tag.isCompound()) {
+                return gameprofile;
+            }
 
-                for (String s2 : nbttagcompound.getKeySet())
-                {
-                    NBTTagList nbttaglist = nbttagcompound.getTagList(s2, 10);
+            NBTTagCompound nbttagcompound = (NBTTagCompound) tag;
+            for (Entry<String, NBTBase> entry : nbttagcompound.entrySet()) {
+                String k = entry.getKey();
+                NBTBase v = entry.getValue();
+                NBTTagList nbttaglist = v.isList() ? (NBTTagList) v : new NBTTagList();
 
-                    for (int i = 0; i < nbttaglist.tagCount(); ++i)
-                    {
-                        NBTTagCompound nbttagcompound1 = nbttaglist.getCompoundTagAt(i);
-                        String s3 = nbttagcompound1.getString("Value");
+                int tagCount = nbttaglist.tagCount();
+                for (int i = 0; i < tagCount; ++i) {
+                    NBTTagCompound nbttagcompound1 = nbttaglist.getCompoundTagAt(i);
 
-                        if (nbttagcompound1.hasKey("Signature", 8))
-                        {
-                            gameprofile.getProperties().put(s2, new Property(s2, s3, nbttagcompound1.getString("Signature")));
-                        }
-                        else
-                        {
-                            gameprofile.getProperties().put(s2, new Property(s2, s3));
-                        }
+                    String Value = nbttagcompound1.getString("Value");
+                    NBTBase Signature = nbttagcompound1.getTag("Signature");
+
+                    if (Signature != null && Signature.isString()) {
+                        gameprofile.getProperties().put(k, new Property(k, Value, Signature.getString()));
+                    } else {
+                        gameprofile.getProperties().put(k, new Property(k, Value));
                     }
                 }
             }
-
             return gameprofile;
-        }
-        catch (Throwable var13)
-        {
+        } catch (Throwable var13) {
             return null;
         }
     }
 
-    public static NBTTagCompound writeGameProfile(NBTTagCompound tagCompound, GameProfile profile)
-    {
-        if (!StringUtils.isNullOrEmpty(profile.getName()))
-        {
+    public static NBTTagCompound writeGameProfile(NBTTagCompound tagCompound, GameProfile profile) {
+        if (!StringUtils.isNullOrEmpty(profile.getName())) {
             tagCompound.setString("Name", profile.getName());
         }
 
-        if (profile.getId() != null)
-        {
+        if (profile.getId() != null) {
             tagCompound.setString("Id", profile.getId().toString());
         }
 
-        if (!profile.getProperties().isEmpty())
-        {
+        if (!profile.getProperties().isEmpty()) {
             NBTTagCompound nbttagcompound = new NBTTagCompound();
-
-            for (String s : profile.getProperties().keySet())
-            {
+            for (String s : profile.getProperties().keySet()) {
                 NBTTagList nbttaglist = new NBTTagList();
 
-                for (Property property : profile.getProperties().get(s))
-                {
+                for (Property property : profile.getProperties().get(s)) {
                     NBTTagCompound nbttagcompound1 = new NBTTagCompound();
                     nbttagcompound1.setString("Value", property.getValue());
 
-                    if (property.hasSignature())
-                    {
+                    if (property.hasSignature()) {
                         nbttagcompound1.setString("Signature", property.getSignature());
                     }
 
@@ -130,101 +114,75 @@
     }
 
     @VisibleForTesting
-    public static boolean areNBTEquals(NBTBase nbt1, NBTBase nbt2, boolean compareTagList)
-    {
-        if (nbt1 == nbt2)
-        {
+    public static boolean areNBTEquals(NBTBase nbt1, NBTBase nbt2, boolean compareTagList) {
+        if (nbt1 == nbt2) {
             return true;
-        }
-        else if (nbt1 == null)
-        {
+        } else if (nbt1 == null) {
             return true;
-        }
-        else if (nbt2 == null)
-        {
+        } else if (nbt2 == null) {
             return false;
-        }
-        else if (!nbt1.getClass().equals(nbt2.getClass()))
-        {
+        } else if (!nbt1.getClass().equals(nbt2.getClass())) {
             return false;
-        }
-        else if (nbt1 instanceof NBTTagCompound)
-        {
-            NBTTagCompound nbttagcompound = (NBTTagCompound)nbt1;
-            NBTTagCompound nbttagcompound1 = (NBTTagCompound)nbt2;
+        } else if (nbt1 instanceof NBTTagCompound) {
+            NBTTagCompound nbttagcompound = (NBTTagCompound) nbt1;
+            NBTTagCompound nbttagcompound1 = (NBTTagCompound) nbt2;
 
-            for (String s : nbttagcompound.getKeySet())
-            {
+            for (Entry<String, NBTBase> entry : nbttagcompound.entrySet()) {
+                String s = entry.getKey();
                 NBTBase nbtbase1 = nbttagcompound.getTag(s);
-
-                if (!areNBTEquals(nbtbase1, nbttagcompound1.getTag(s), compareTagList))
-                {
+                if (!areNBTEquals(nbtbase1, nbttagcompound1.getTag(s), compareTagList)) {
                     return false;
                 }
             }
-
             return true;
-        }
-        else if (nbt1 instanceof NBTTagList && compareTagList)
-        {
-            NBTTagList nbttaglist = (NBTTagList)nbt1;
-            NBTTagList nbttaglist1 = (NBTTagList)nbt2;
+        } else if (nbt1 instanceof NBTTagList && compareTagList) {
+            NBTTagList nbttaglist = (NBTTagList) nbt1;
+            NBTTagList nbttaglist1 = (NBTTagList) nbt2;
 
-            if (nbttaglist.hasNoTags())
-            {
+            if (nbttaglist.hasNoTags()) {
                 return nbttaglist1.hasNoTags();
-            }
-            else
-            {
-                for (int i = 0; i < nbttaglist.tagCount(); ++i)
-                {
+            } else {
+                int tagCount = nbttaglist.tagCount();
+                int tagCount2 = nbttaglist1.tagCount();
+                for (int i = 0; i < tagCount; ++i) {
                     NBTBase nbtbase = nbttaglist.get(i);
                     boolean flag = false;
 
-                    for (int j = 0; j < nbttaglist1.tagCount(); ++j)
-                    {
-                        if (areNBTEquals(nbtbase, nbttaglist1.get(j), compareTagList))
-                        {
+                    for (int j = 0; j < tagCount2; ++j) {
+                        if (areNBTEquals(nbtbase, nbttaglist1.get(j), compareTagList)) {
                             flag = true;
                             break;
                         }
                     }
 
-                    if (!flag)
-                    {
+                    if (!flag) {
                         return false;
                     }
                 }
 
                 return true;
             }
-        }
-        else
-        {
+        } else {
             return nbt1.equals(nbt2);
         }
     }
 
-    public static NBTTagCompound createUUIDTag(UUID uuid)
-    {
+    public static NBTTagCompound createUUIDTag(UUID uuid) {
         NBTTagCompound nbttagcompound = new NBTTagCompound();
         nbttagcompound.setLong("M", uuid.getMostSignificantBits());
         nbttagcompound.setLong("L", uuid.getLeastSignificantBits());
         return nbttagcompound;
     }
 
-    public static UUID getUUIDFromTag(NBTTagCompound tag)
-    {
+    public static UUID getUUIDFromTag(NBTTagCompound tag) {
         return new UUID(tag.getLong("M"), tag.getLong("L"));
     }
 
-    public static BlockPos getPosFromTag(NBTTagCompound tag)
-    {
+    public static BlockPos getPosFromTag(NBTTagCompound tag) {
         return new BlockPos(tag.getInteger("X"), tag.getInteger("Y"), tag.getInteger("Z"));
     }
 
-    public static NBTTagCompound createPosTag(BlockPos pos)
-    {
+    public static NBTTagCompound createPosTag(BlockPos pos) {
         NBTTagCompound nbttagcompound = new NBTTagCompound();
         nbttagcompound.setInteger("X", pos.getX());
         nbttagcompound.setInteger("Y", pos.getY());
@@ -232,28 +190,22 @@
         return nbttagcompound;
     }
 
-    public static IBlockState readBlockState(NBTTagCompound tag)
-    {
-        if (!tag.hasKey("Name", 8))
-        {
+    public static IBlockState readBlockState(NBTTagCompound tag) {
+        NBTTagString Name = tag.getTagIfPresent("Name", NBTTagString.class);
+        if (Name == null) {
             return Blocks.AIR.getDefaultState();
-        }
-        else
-        {
-            Block block = Block.REGISTRY.getObject(new ResourceLocation(tag.getString("Name")));
+        } else {
+            Block block = Block.REGISTRY.getObject(new ResourceLocation(Name.getString()));
             IBlockState iblockstate = block.getDefaultState();
-
-            if (tag.hasKey("Properties", 10))
-            {
+            NBTTagCompound Properties = tag.getTagIfPresent("Properties", NBTTagCompound.class);
+            if (Properties != null) {
                 NBTTagCompound nbttagcompound = tag.getCompoundTag("Properties");
                 BlockStateContainer blockstatecontainer = block.getBlockState();
 
-                for (String s : nbttagcompound.getKeySet())
-                {
+                for (String s : nbttagcompound.getKeySet()) {
                     IProperty<?> iproperty = blockstatecontainer.getProperty(s);
 
-                    if (iproperty != null)
-                    {
+                    if (iproperty != null) {
                         iblockstate = setValueHelper(iblockstate, iproperty, s, nbttagcompound, tag);
                     }
                 }
@@ -263,34 +215,27 @@
         }
     }
 
-    private static <T extends Comparable<T>> IBlockState setValueHelper(IBlockState p_193590_0_, IProperty<T> p_193590_1_, String p_193590_2_, NBTTagCompound p_193590_3_, NBTTagCompound p_193590_4_)
-    {
+    private static <T extends Comparable<T>> IBlockState setValueHelper(IBlockState p_193590_0_, IProperty<T> p_193590_1_, String p_193590_2_, NBTTagCompound p_193590_3_, NBTTagCompound p_193590_4_) {
         Optional<T> optional = p_193590_1_.parseValue(p_193590_3_.getString(p_193590_2_));
 
-        if (optional.isPresent())
-        {
+        if (optional.isPresent()) {
             return p_193590_0_.withProperty(p_193590_1_, optional.get());
-        }
-        else
-        {
+        } else {
             LOGGER.warn("Unable to read property: {} with value: {} for blockstate: {}", p_193590_2_, p_193590_3_.getString(p_193590_2_), p_193590_4_.toString());
             return p_193590_0_;
         }
     }
 
-    public static NBTTagCompound writeBlockState(NBTTagCompound tag, IBlockState state)
-    {
-        tag.setString("Name", ((ResourceLocation)Block.REGISTRY.getNameForObject(state.getBlock())).toString());
+    public static NBTTagCompound writeBlockState(NBTTagCompound tag, IBlockState state) {
+        tag.setString("Name", ((ResourceLocation) Block.REGISTRY.getNameForObject(state.getBlock())).toString());
 
-        if (!state.getProperties().isEmpty())
-        {
+        if (!state.getProperties().isEmpty()) {
             NBTTagCompound nbttagcompound = new NBTTagCompound();
             UnmodifiableIterator unmodifiableiterator = state.getProperties().entrySet().iterator();
 
-            while (unmodifiableiterator.hasNext())
-            {
-                Entry < IProperty<?>, Comparable<? >> entry = (Entry)unmodifiableiterator.next();
-                IProperty<?> iproperty = (IProperty)entry.getKey();
+            while (unmodifiableiterator.hasNext()) {
+                Entry<IProperty<?>, Comparable<?>> entry = (Entry) unmodifiableiterator.next();
+                IProperty<?> iproperty = (IProperty) entry.getKey();
                 nbttagcompound.setString(iproperty.getName(), getName(iproperty, entry.getValue()));
             }
 
@@ -301,8 +246,7 @@
     }
 
     @SuppressWarnings("unchecked")
-    private static <T extends Comparable<T>> String getName(IProperty<T> p_190010_0_, Comparable<?> p_190010_1_)
-    {
-        return p_190010_0_.getName((T)p_190010_1_);
+    private static <T extends Comparable<T>> String getName(IProperty<T> p_190010_0_, Comparable<?> p_190010_1_) {
+        return p_190010_0_.getName((T) p_190010_1_);
     }
 }
