--- ../src-base/minecraft/net/minecraft/client/util/JsonException.java
+++ ../src-work/minecraft/net/minecraft/client/util/JsonException.java
@@ -1,98 +1,80 @@
 package net.minecraft.client.util;
 
 import com.google.common.collect.Lists;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.util.List;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.commons.lang3.StringUtils;
 
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.util.List;
+
 @SideOnly(Side.CLIENT)
-public class JsonException extends IOException
-{
+public class JsonException extends IOException {
     private final List<JsonException.Entry> entries = Lists.<JsonException.Entry>newArrayList();
     private final String message;
 
-    public JsonException(String messageIn)
-    {
+    public JsonException(String messageIn) {
         this.entries.add(new JsonException.Entry());
         this.message = messageIn;
     }
 
-    public JsonException(String messageIn, Throwable cause)
-    {
+    public JsonException(String messageIn, Throwable cause) {
         super(cause);
         this.entries.add(new JsonException.Entry());
         this.message = messageIn;
     }
 
-    public void prependJsonKey(String key)
-    {
-        ((JsonException.Entry)this.entries.get(0)).addJsonKey(key);
+    public static JsonException forException(Exception exception) {
+        if (exception instanceof JsonException) {
+            return (JsonException) exception;
+        } else {
+            String s = exception.getMessage();
+
+            if (exception instanceof FileNotFoundException) {
+                s = "File not found";
+            }
+
+            return new JsonException(s, exception);
+        }
     }
 
-    public void setFilenameAndFlush(String filenameIn)
-    {
+    public void prependJsonKey(String key) {
+        ((JsonException.Entry) this.entries.get(0)).addJsonKey(key);
+    }
+
+    public void setFilenameAndFlush(String filenameIn) {
         (this.entries.get(0)).filename = filenameIn;
         this.entries.add(0, new JsonException.Entry());
     }
 
-    public String getMessage()
-    {
+    public String getMessage() {
         return "Invalid " + this.entries.get(this.entries.size() - 1) + ": " + this.message;
     }
 
-    public static JsonException forException(Exception exception)
-    {
-        if (exception instanceof JsonException)
-        {
-            return (JsonException)exception;
+    @SideOnly(Side.CLIENT)
+    public static class Entry {
+        private final List<String> jsonKeys;
+        private String filename;
+
+        private Entry() {
+            this.jsonKeys = Lists.<String>newArrayList();
         }
-        else
-        {
-            String s = exception.getMessage();
 
-            if (exception instanceof FileNotFoundException)
-            {
-                s = "File not found";
-            }
+        private void addJsonKey(String key) {
+            this.jsonKeys.add(0, key);
+        }
 
-            return new JsonException(s, exception);
+        public String getJsonKeys() {
+            return StringUtils.join((Iterable) this.jsonKeys, "->");
         }
-    }
 
-    @SideOnly(Side.CLIENT)
-    public static class Entry
-        {
-            private String filename;
-            private final List<String> jsonKeys;
-
-            private Entry()
-            {
-                this.jsonKeys = Lists.<String>newArrayList();
+        public String toString() {
+            if (this.filename != null) {
+                return this.jsonKeys.isEmpty() ? this.filename : this.filename + " " + this.getJsonKeys();
+            } else {
+                return this.jsonKeys.isEmpty() ? "(Unknown file)" : "(Unknown file) " + this.getJsonKeys();
             }
-
-            private void addJsonKey(String key)
-            {
-                this.jsonKeys.add(0, key);
-            }
-
-            public String getJsonKeys()
-            {
-                return StringUtils.join((Iterable)this.jsonKeys, "->");
-            }
-
-            public String toString()
-            {
-                if (this.filename != null)
-                {
-                    return this.jsonKeys.isEmpty() ? this.filename : this.filename + " " + this.getJsonKeys();
-                }
-                else
-                {
-                    return this.jsonKeys.isEmpty() ? "(Unknown file)" : "(Unknown file) " + this.getJsonKeys();
-                }
-            }
         }
+    }
 }
